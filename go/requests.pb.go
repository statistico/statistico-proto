// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.6.1
// source: requests.proto

package statistico

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter to limit the competitions returned associated to a specific countries
	CountryIds []uint64 `protobuf:"varint,1,rep,packed,name=country_ids,json=countryIds,proto3" json:"country_ids,omitempty"`
	// Order the ID column to return competitions in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	// A filter to limit the competitions returned depending on if they are a cup competition or not
	IsCup *wrappers.BoolValue `protobuf:"bytes,3,opt,name=is_cup,json=isCup,proto3" json:"is_cup,omitempty"`
}

func (x *CompetitionRequest) Reset() {
	*x = CompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionRequest) ProtoMessage() {}

func (x *CompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionRequest.ProtoReflect.Descriptor instead.
func (*CompetitionRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{0}
}

func (x *CompetitionRequest) GetCountryIds() []uint64 {
	if x != nil {
		return x.CountryIds
	}
	return nil
}

func (x *CompetitionRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CompetitionRequest) GetIsCup() *wrappers.BoolValue {
	if x != nil {
		return x.IsCup
	}
	return nil
}

type CreateStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserId         string               `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market         string               `protobuf:"bytes,4,opt,name=market,proto3" json:"market,omitempty"`
	Runner         string               `protobuf:"bytes,5,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds        *wrappers.FloatValue `protobuf:"bytes,6,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds        *wrappers.FloatValue `protobuf:"bytes,7,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	Side           SideEnum             `protobuf:"varint,8,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	CompetitionIds []uint64             `protobuf:"varint,9,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	ResultFilters  []*ResultFilter      `protobuf:"bytes,10,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters    []*StatFilter        `protobuf:"bytes,11,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
	Visibility     VisibilityEnum       `protobuf:"varint,12,opt,name=visibility,proto3,enum=statistico.VisibilityEnum" json:"visibility,omitempty"`
}

func (x *CreateStrategyRequest) Reset() {
	*x = CreateStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStrategyRequest) ProtoMessage() {}

func (x *CreateStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStrategyRequest.ProtoReflect.Descriptor instead.
func (*CreateStrategyRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{1}
}

func (x *CreateStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStrategyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateStrategyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateStrategyRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CreateStrategyRequest) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *CreateStrategyRequest) GetMinOdds() *wrappers.FloatValue {
	if x != nil {
		return x.MinOdds
	}
	return nil
}

func (x *CreateStrategyRequest) GetMaxOdds() *wrappers.FloatValue {
	if x != nil {
		return x.MaxOdds
	}
	return nil
}

func (x *CreateStrategyRequest) GetSide() SideEnum {
	if x != nil {
		return x.Side
	}
	return SideEnum_BACK
}

func (x *CreateStrategyRequest) GetCompetitionIds() []uint64 {
	if x != nil {
		return x.CompetitionIds
	}
	return nil
}

func (x *CreateStrategyRequest) GetResultFilters() []*ResultFilter {
	if x != nil {
		return x.ResultFilters
	}
	return nil
}

func (x *CreateStrategyRequest) GetStatFilters() []*StatFilter {
	if x != nil {
		return x.StatFilters
	}
	return nil
}

func (x *CreateStrategyRequest) GetVisibility() VisibilityEnum {
	if x != nil {
		return x.Visibility
	}
	return VisibilityEnum_PUBLIC
}

type FixtureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureId uint64 `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
}

func (x *FixtureRequest) Reset() {
	*x = FixtureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureRequest) ProtoMessage() {}

func (x *FixtureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureRequest.ProtoReflect.Descriptor instead.
func (*FixtureRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{2}
}

func (x *FixtureRequest) GetFixtureId() uint64 {
	if x != nil {
		return x.FixtureId
	}
	return 0
}

type FixtureSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,1,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// The number of results to return.
	Limit *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,3,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return Results after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// Order the date column to return results in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *FixtureSearchRequest) Reset() {
	*x = FixtureSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureSearchRequest) ProtoMessage() {}

func (x *FixtureSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureSearchRequest.ProtoReflect.Descriptor instead.
func (*FixtureSearchRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{3}
}

func (x *FixtureSearchRequest) GetSeasonIds() []uint64 {
	if x != nil {
		return x.SeasonIds
	}
	return nil
}

func (x *FixtureSearchRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *FixtureSearchRequest) GetDateBefore() *wrappers.StringValue {
	if x != nil {
		return x.DateBefore
	}
	return nil
}

func (x *FixtureSearchRequest) GetDateAfter() *wrappers.StringValue {
	if x != nil {
		return x.DateAfter
	}
	return nil
}

func (x *FixtureSearchRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

type HistoricalResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Home Team ID that the Result set relates to
	HomeTeamId uint64 `protobuf:"varint,1,opt,name=home_team_id,json=homeTeamId,proto3" json:"home_team_id,omitempty"`
	// The Away Team ID that the Result set relates to
	AwayTeamId uint64 `protobuf:"varint,2,opt,name=away_team_id,json=awayTeamId,proto3" json:"away_team_id,omitempty"`
	// The number of results to return
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore string `protobuf:"bytes,4,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
}

func (x *HistoricalResultRequest) Reset() {
	*x = HistoricalResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalResultRequest) ProtoMessage() {}

func (x *HistoricalResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalResultRequest.ProtoReflect.Descriptor instead.
func (*HistoricalResultRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{4}
}

func (x *HistoricalResultRequest) GetHomeTeamId() uint64 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *HistoricalResultRequest) GetAwayTeamId() uint64 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

func (x *HistoricalResultRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HistoricalResultRequest) GetDateBefore() string {
	if x != nil {
		return x.DateBefore
	}
	return ""
}

type ListUserStrategiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListUserStrategiesRequest) Reset() {
	*x = ListUserStrategiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserStrategiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserStrategiesRequest) ProtoMessage() {}

func (x *ListUserStrategiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserStrategiesRequest.ProtoReflect.Descriptor instead.
func (*ListUserStrategiesRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{5}
}

func (x *ListUserStrategiesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureId uint64 `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
}

func (x *ResultRequest) Reset() {
	*x = ResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultRequest) ProtoMessage() {}

func (x *ResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultRequest.ProtoReflect.Descriptor instead.
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{6}
}

func (x *ResultRequest) GetFixtureId() uint64 {
	if x != nil {
		return x.FixtureId
	}
	return 0
}

type SeasonCompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionId uint64 `protobuf:"varint,1,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	// Order the name column to return seasons in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *SeasonCompetitionRequest) Reset() {
	*x = SeasonCompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonCompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCompetitionRequest) ProtoMessage() {}

func (x *SeasonCompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCompetitionRequest.ProtoReflect.Descriptor instead.
func (*SeasonCompetitionRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{7}
}

func (x *SeasonCompetitionRequest) GetCompetitionId() uint64 {
	if x != nil {
		return x.CompetitionId
	}
	return 0
}

func (x *SeasonCompetitionRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

type SeasonFixtureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId uint64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// RFC3339 formatted string i.e. "2006-01-02T15:04:05Z07:00"
	DateFrom string `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateTo string `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *SeasonFixtureRequest) Reset() {
	*x = SeasonFixtureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonFixtureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonFixtureRequest) ProtoMessage() {}

func (x *SeasonFixtureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonFixtureRequest.ProtoReflect.Descriptor instead.
func (*SeasonFixtureRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{8}
}

func (x *SeasonFixtureRequest) GetSeasonId() uint64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonFixtureRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *SeasonFixtureRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type SeasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Season ID that the Result set relates to
	SeasonId int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore string `protobuf:"bytes,2,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
}

func (x *SeasonRequest) Reset() {
	*x = SeasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRequest) ProtoMessage() {}

func (x *SeasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRequest.ProtoReflect.Descriptor instead.
func (*SeasonRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{9}
}

func (x *SeasonRequest) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonRequest) GetDateBefore() string {
	if x != nil {
		return x.DateBefore
	}
	return ""
}

type SeasonTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId uint64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (x *SeasonTeamsRequest) Reset() {
	*x = SeasonTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTeamsRequest) ProtoMessage() {}

func (x *SeasonTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTeamsRequest.ProtoReflect.Descriptor instead.
func (*SeasonTeamsRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{10}
}

func (x *SeasonTeamsRequest) GetSeasonId() uint64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

type StrategyTradeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market         string               `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Runner         string               `protobuf:"bytes,2,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds        *wrappers.FloatValue `protobuf:"bytes,3,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds        *wrappers.FloatValue `protobuf:"bytes,4,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	Line           string               `protobuf:"bytes,5,opt,name=line,proto3" json:"line,omitempty"`
	Side           SideEnum             `protobuf:"varint,6,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	CompetitionIds []uint64             `protobuf:"varint,7,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	SeasonIds      []uint64             `protobuf:"varint,8,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	DateFrom       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo         *timestamp.Timestamp `protobuf:"bytes,10,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	ResultFilters  []*ResultFilter      `protobuf:"bytes,11,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters    []*StatFilter        `protobuf:"bytes,12,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
}

func (x *StrategyTradeSearchRequest) Reset() {
	*x = StrategyTradeSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyTradeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyTradeSearchRequest) ProtoMessage() {}

func (x *StrategyTradeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyTradeSearchRequest.ProtoReflect.Descriptor instead.
func (*StrategyTradeSearchRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{11}
}

func (x *StrategyTradeSearchRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *StrategyTradeSearchRequest) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *StrategyTradeSearchRequest) GetMinOdds() *wrappers.FloatValue {
	if x != nil {
		return x.MinOdds
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetMaxOdds() *wrappers.FloatValue {
	if x != nil {
		return x.MaxOdds
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *StrategyTradeSearchRequest) GetSide() SideEnum {
	if x != nil {
		return x.Side
	}
	return SideEnum_BACK
}

func (x *StrategyTradeSearchRequest) GetCompetitionIds() []uint64 {
	if x != nil {
		return x.CompetitionIds
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetSeasonIds() []uint64 {
	if x != nil {
		return x.SeasonIds
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetResultFilters() []*ResultFilter {
	if x != nil {
		return x.ResultFilters
	}
	return nil
}

func (x *StrategyTradeSearchRequest) GetStatFilters() []*StatFilter {
	if x != nil {
		return x.StatFilters
	}
	return nil
}

type TeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *TeamRequest) Reset() {
	*x = TeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRequest) ProtoMessage() {}

func (x *TeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRequest.ProtoReflect.Descriptor instead.
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{12}
}

func (x *TeamRequest) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type TeamResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Team ID that the Result set relates to
	TeamId uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The number of results to return. If limit is not set the whole Result set for the Team
	// will be returned
	Limit *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,3,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return Results after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// A filter to return based limited to either home or away results
	Venue *wrappers.StringValue `protobuf:"bytes,5,opt,name=venue,proto3" json:"venue,omitempty"`
	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,6,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// Order the date column to return results in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *TeamResultRequest) Reset() {
	*x = TeamResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamResultRequest) ProtoMessage() {}

func (x *TeamResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamResultRequest.ProtoReflect.Descriptor instead.
func (*TeamResultRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{13}
}

func (x *TeamResultRequest) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamResultRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *TeamResultRequest) GetDateBefore() *wrappers.StringValue {
	if x != nil {
		return x.DateBefore
	}
	return nil
}

func (x *TeamResultRequest) GetDateAfter() *wrappers.StringValue {
	if x != nil {
		return x.DateAfter
	}
	return nil
}

func (x *TeamResultRequest) GetVenue() *wrappers.StringValue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *TeamResultRequest) GetSeasonIds() []uint64 {
	if x != nil {
		return x.SeasonIds
	}
	return nil
}

func (x *TeamResultRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

type TeamSeasonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Order the name column to return seasons in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *TeamSeasonsRequest) Reset() {
	*x = TeamSeasonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSeasonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSeasonsRequest) ProtoMessage() {}

func (x *TeamSeasonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSeasonsRequest.ProtoReflect.Descriptor instead.
func (*TeamSeasonsRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{14}
}

func (x *TeamSeasonsRequest) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamSeasonsRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

type TeamStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat string `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`
	// The Team ID that the Result set relates to
	TeamId uint64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The number of results to return. If limit is not set the whole Result set for the Team
	// will be returned
	Limit *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return stats before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return stats after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,5,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// A filter to return based stats limited to match being played either home or away
	Venue *wrappers.StringValue `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"`
	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,7,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// Order the date column to return stats in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,8,opt,name=sort,proto3" json:"sort,omitempty"`
	// Return stats for opposing team
	Opponent *wrappers.BoolValue `protobuf:"bytes,9,opt,name=opponent,proto3" json:"opponent,omitempty"`
}

func (x *TeamStatRequest) Reset() {
	*x = TeamStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requests_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatRequest) ProtoMessage() {}

func (x *TeamStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatRequest.ProtoReflect.Descriptor instead.
func (*TeamStatRequest) Descriptor() ([]byte, []int) {
	return file_requests_proto_rawDescGZIP(), []int{15}
}

func (x *TeamStatRequest) GetStat() string {
	if x != nil {
		return x.Stat
	}
	return ""
}

func (x *TeamStatRequest) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamStatRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *TeamStatRequest) GetDateBefore() *wrappers.StringValue {
	if x != nil {
		return x.DateBefore
	}
	return nil
}

func (x *TeamStatRequest) GetDateAfter() *wrappers.StringValue {
	if x != nil {
		return x.DateAfter
	}
	return nil
}

func (x *TeamStatRequest) GetVenue() *wrappers.StringValue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *TeamStatRequest) GetSeasonIds() []uint64 {
	if x != nil {
		return x.SeasonIds
	}
	return nil
}

func (x *TeamStatRequest) GetSort() *wrappers.StringValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *TeamStatRequest) GetOpponent() *wrappers.BoolValue {
	if x != nil {
		return x.Opponent
	}
	return nil
}

var File_requests_proto protoreflect.FileDescriptor

var file_requests_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x1a, 0x0a, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x43, 0x75, 0x70, 0x22, 0x91, 0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x64, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x34, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x73, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x69, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x22, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22,
	0x31, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xaa, 0x04, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4f, 0x64, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x32, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x26, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x5f, 0x0a, 0x12, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xab, 0x03, 0x0a,
	0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_requests_proto_rawDescOnce sync.Once
	file_requests_proto_rawDescData = file_requests_proto_rawDesc
)

func file_requests_proto_rawDescGZIP() []byte {
	file_requests_proto_rawDescOnce.Do(func() {
		file_requests_proto_rawDescData = protoimpl.X.CompressGZIP(file_requests_proto_rawDescData)
	})
	return file_requests_proto_rawDescData
}

var file_requests_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_requests_proto_goTypes = []interface{}{
	(*CompetitionRequest)(nil),         // 0: statistico.CompetitionRequest
	(*CreateStrategyRequest)(nil),      // 1: statistico.CreateStrategyRequest
	(*FixtureRequest)(nil),             // 2: statistico.FixtureRequest
	(*FixtureSearchRequest)(nil),       // 3: statistico.FixtureSearchRequest
	(*HistoricalResultRequest)(nil),    // 4: statistico.HistoricalResultRequest
	(*ListUserStrategiesRequest)(nil),  // 5: statistico.ListUserStrategiesRequest
	(*ResultRequest)(nil),              // 6: statistico.ResultRequest
	(*SeasonCompetitionRequest)(nil),   // 7: statistico.SeasonCompetitionRequest
	(*SeasonFixtureRequest)(nil),       // 8: statistico.SeasonFixtureRequest
	(*SeasonRequest)(nil),              // 9: statistico.SeasonRequest
	(*SeasonTeamsRequest)(nil),         // 10: statistico.SeasonTeamsRequest
	(*StrategyTradeSearchRequest)(nil), // 11: statistico.StrategyTradeSearchRequest
	(*TeamRequest)(nil),                // 12: statistico.TeamRequest
	(*TeamResultRequest)(nil),          // 13: statistico.TeamResultRequest
	(*TeamSeasonsRequest)(nil),         // 14: statistico.TeamSeasonsRequest
	(*TeamStatRequest)(nil),            // 15: statistico.TeamStatRequest
	(*wrappers.StringValue)(nil),       // 16: google.protobuf.StringValue
	(*wrappers.BoolValue)(nil),         // 17: google.protobuf.BoolValue
	(*wrappers.FloatValue)(nil),        // 18: google.protobuf.FloatValue
	(SideEnum)(0),                      // 19: statistico.SideEnum
	(*ResultFilter)(nil),               // 20: statistico.ResultFilter
	(*StatFilter)(nil),                 // 21: statistico.StatFilter
	(VisibilityEnum)(0),                // 22: statistico.VisibilityEnum
	(*wrappers.UInt64Value)(nil),       // 23: google.protobuf.UInt64Value
	(*timestamp.Timestamp)(nil),        // 24: google.protobuf.Timestamp
}
var file_requests_proto_depIdxs = []int32{
	16, // 0: statistico.CompetitionRequest.sort:type_name -> google.protobuf.StringValue
	17, // 1: statistico.CompetitionRequest.is_cup:type_name -> google.protobuf.BoolValue
	18, // 2: statistico.CreateStrategyRequest.min_odds:type_name -> google.protobuf.FloatValue
	18, // 3: statistico.CreateStrategyRequest.max_odds:type_name -> google.protobuf.FloatValue
	19, // 4: statistico.CreateStrategyRequest.side:type_name -> statistico.SideEnum
	20, // 5: statistico.CreateStrategyRequest.result_filters:type_name -> statistico.ResultFilter
	21, // 6: statistico.CreateStrategyRequest.stat_filters:type_name -> statistico.StatFilter
	22, // 7: statistico.CreateStrategyRequest.visibility:type_name -> statistico.VisibilityEnum
	23, // 8: statistico.FixtureSearchRequest.limit:type_name -> google.protobuf.UInt64Value
	16, // 9: statistico.FixtureSearchRequest.date_before:type_name -> google.protobuf.StringValue
	16, // 10: statistico.FixtureSearchRequest.date_after:type_name -> google.protobuf.StringValue
	16, // 11: statistico.FixtureSearchRequest.sort:type_name -> google.protobuf.StringValue
	16, // 12: statistico.SeasonCompetitionRequest.sort:type_name -> google.protobuf.StringValue
	18, // 13: statistico.StrategyTradeSearchRequest.min_odds:type_name -> google.protobuf.FloatValue
	18, // 14: statistico.StrategyTradeSearchRequest.max_odds:type_name -> google.protobuf.FloatValue
	19, // 15: statistico.StrategyTradeSearchRequest.side:type_name -> statistico.SideEnum
	24, // 16: statistico.StrategyTradeSearchRequest.dateFrom:type_name -> google.protobuf.Timestamp
	24, // 17: statistico.StrategyTradeSearchRequest.dateTo:type_name -> google.protobuf.Timestamp
	20, // 18: statistico.StrategyTradeSearchRequest.result_filters:type_name -> statistico.ResultFilter
	21, // 19: statistico.StrategyTradeSearchRequest.stat_filters:type_name -> statistico.StatFilter
	23, // 20: statistico.TeamResultRequest.limit:type_name -> google.protobuf.UInt64Value
	16, // 21: statistico.TeamResultRequest.date_before:type_name -> google.protobuf.StringValue
	16, // 22: statistico.TeamResultRequest.date_after:type_name -> google.protobuf.StringValue
	16, // 23: statistico.TeamResultRequest.venue:type_name -> google.protobuf.StringValue
	16, // 24: statistico.TeamResultRequest.sort:type_name -> google.protobuf.StringValue
	16, // 25: statistico.TeamSeasonsRequest.sort:type_name -> google.protobuf.StringValue
	23, // 26: statistico.TeamStatRequest.limit:type_name -> google.protobuf.UInt64Value
	16, // 27: statistico.TeamStatRequest.date_before:type_name -> google.protobuf.StringValue
	16, // 28: statistico.TeamStatRequest.date_after:type_name -> google.protobuf.StringValue
	16, // 29: statistico.TeamStatRequest.venue:type_name -> google.protobuf.StringValue
	16, // 30: statistico.TeamStatRequest.sort:type_name -> google.protobuf.StringValue
	17, // 31: statistico.TeamStatRequest.opponent:type_name -> google.protobuf.BoolValue
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_requests_proto_init() }
func file_requests_proto_init() {
	if File_requests_proto != nil {
		return
	}
	file_enum_proto_init()
	file_filter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_requests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserStrategiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonCompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonFixtureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyTradeSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSeasonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requests_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_requests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_requests_proto_goTypes,
		DependencyIndexes: file_requests_proto_depIdxs,
		MessageInfos:      file_requests_proto_msgTypes,
	}.Build()
	File_requests_proto = out.File
	file_requests_proto_rawDesc = nil
	file_requests_proto_goTypes = nil
	file_requests_proto_depIdxs = nil
}
