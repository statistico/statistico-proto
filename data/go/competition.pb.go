// Code generated by protoc-gen-go. DO NOT EDIT.
// source: competition.proto

package statistico_data

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Competition struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsCup                bool     `protobuf:"varint,3,opt,name=is_cup,json=isCup,proto3" json:"is_cup,omitempty"`
	CountryId            uint64   `protobuf:"varint,4,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Competition) Reset()         { *m = Competition{} }
func (m *Competition) String() string { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()    {}
func (*Competition) Descriptor() ([]byte, []int) {
	return fileDescriptor_25f6be7558319af9, []int{0}
}

func (m *Competition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Competition.Unmarshal(m, b)
}
func (m *Competition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Competition.Marshal(b, m, deterministic)
}
func (m *Competition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Competition.Merge(m, src)
}
func (m *Competition) XXX_Size() int {
	return xxx_messageInfo_Competition.Size(m)
}
func (m *Competition) XXX_DiscardUnknown() {
	xxx_messageInfo_Competition.DiscardUnknown(m)
}

var xxx_messageInfo_Competition proto.InternalMessageInfo

func (m *Competition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competition) GetIsCup() bool {
	if m != nil {
		return m.IsCup
	}
	return false
}

func (m *Competition) GetCountryId() uint64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func init() {
	proto.RegisterType((*Competition)(nil), "statistico_data.Competition")
}

func init() {
	proto.RegisterFile("competition.proto", fileDescriptor_25f6be7558319af9)
}

var fileDescriptor_25f6be7558319af9 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x41, 0x4b, 0xc5, 0x30,
	0x0c, 0xc7, 0xed, 0x9c, 0x0f, 0x5f, 0x84, 0xa7, 0x06, 0x84, 0xf2, 0x50, 0x18, 0xcf, 0xcb, 0x4e,
	0x43, 0xf4, 0x23, 0xec, 0x24, 0x78, 0xaa, 0x27, 0x4f, 0xa3, 0xb6, 0x45, 0x72, 0xd8, 0x5a, 0x9b,
	0x54, 0xf0, 0xdb, 0x0b, 0x9b, 0xe0, 0xf0, 0xf0, 0x6e, 0x21, 0xff, 0x5f, 0x92, 0x5f, 0xe0, 0xda,
	0xc5, 0x31, 0x05, 0x21, 0xa1, 0x38, 0x75, 0x29, 0x47, 0x89, 0x78, 0xc9, 0x62, 0x85, 0x58, 0xc8,
	0xc5, 0xc1, 0x5b, 0xb1, 0xfb, 0x5d, 0x0e, 0x9f, 0x25, 0xb0, 0xf0, 0x02, 0x1c, 0x3e, 0xe0, 0xa2,
	0xff, 0x9b, 0xc2, 0x1d, 0x54, 0xe4, 0xb5, 0x6a, 0x54, 0x5b, 0x9b, 0x8a, 0x3c, 0x22, 0xd4, 0x93,
	0x1d, 0x83, 0xae, 0x1a, 0xd5, 0x6e, 0xcd, 0x5c, 0xe3, 0x0d, 0x6c, 0x88, 0x07, 0x57, 0x92, 0x3e,
	0x6d, 0x54, 0x7b, 0x6e, 0xce, 0x88, 0xfb, 0x92, 0xf0, 0x0e, 0xc0, 0xc5, 0x32, 0x49, 0xfe, 0x1e,
	0xc8, 0xeb, 0x7a, 0x5e, 0xb1, 0xfd, 0xed, 0x3c, 0xfb, 0xc7, 0x08, 0xb8, 0x3a, 0xf4, 0x1a, 0xf2,
	0x17, 0xb9, 0x80, 0x6f, 0x70, 0xf5, 0x42, 0x2c, 0xab, 0x84, 0xf1, 0xbe, 0xfb, 0x27, 0xdd, 0xad,
	0x62, 0xb3, 0xe8, 0xef, 0x6f, 0x8f, 0x41, 0x87, 0x93, 0x07, 0xf5, 0xbe, 0x99, 0x1f, 0x7c, 0xfa,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x60, 0x74, 0x10, 0x9f, 0x16, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompetitionServiceClient is the client API for CompetitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompetitionServiceClient interface {
	ListCompetitions(ctx context.Context, in *CompetitionRequest, opts ...grpc.CallOption) (CompetitionService_ListCompetitionsClient, error)
}

type competitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitionServiceClient(cc grpc.ClientConnInterface) CompetitionServiceClient {
	return &competitionServiceClient{cc}
}

func (c *competitionServiceClient) ListCompetitions(ctx context.Context, in *CompetitionRequest, opts ...grpc.CallOption) (CompetitionService_ListCompetitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CompetitionService_serviceDesc.Streams[0], "/statistico_data.CompetitionService/ListCompetitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &competitionServiceListCompetitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompetitionService_ListCompetitionsClient interface {
	Recv() (*Competition, error)
	grpc.ClientStream
}

type competitionServiceListCompetitionsClient struct {
	grpc.ClientStream
}

func (x *competitionServiceListCompetitionsClient) Recv() (*Competition, error) {
	m := new(Competition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompetitionServiceServer is the server API for CompetitionService service.
type CompetitionServiceServer interface {
	ListCompetitions(*CompetitionRequest, CompetitionService_ListCompetitionsServer) error
}

// UnimplementedCompetitionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompetitionServiceServer struct {
}

func (*UnimplementedCompetitionServiceServer) ListCompetitions(req *CompetitionRequest, srv CompetitionService_ListCompetitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCompetitions not implemented")
}

func RegisterCompetitionServiceServer(s *grpc.Server, srv CompetitionServiceServer) {
	s.RegisterService(&_CompetitionService_serviceDesc, srv)
}

func _CompetitionService_ListCompetitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompetitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompetitionServiceServer).ListCompetitions(m, &competitionServiceListCompetitionsServer{stream})
}

type CompetitionService_ListCompetitionsServer interface {
	Send(*Competition) error
	grpc.ServerStream
}

type competitionServiceListCompetitionsServer struct {
	grpc.ServerStream
}

func (x *competitionServiceListCompetitionsServer) Send(m *Competition) error {
	return x.ServerStream.SendMsg(m)
}

var _CompetitionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statistico_data.CompetitionService",
	HandlerType: (*CompetitionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCompetitions",
			Handler:       _CompetitionService_ListCompetitions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "competition.proto",
}
