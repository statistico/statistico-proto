// Code generated by protoc-gen-go. DO NOT EDIT.
// source: requests.proto

package statistico_data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CompetitionRequest struct {
	// A filter to limit the competitions returned associated to a specific countries
	CountryIds []uint64 `protobuf:"varint,1,rep,packed,name=country_ids,json=countryIds,proto3" json:"country_ids,omitempty"`
	// Order the ID column to return competitions in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	// A filter to limit the competitions returned depending on if they are a cup competition or not
	IsCup                *wrappers.BoolValue `protobuf:"bytes,3,opt,name=is_cup,json=isCup,proto3" json:"is_cup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CompetitionRequest) Reset()         { *m = CompetitionRequest{} }
func (m *CompetitionRequest) String() string { return proto.CompactTextString(m) }
func (*CompetitionRequest) ProtoMessage()    {}
func (*CompetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{0}
}

func (m *CompetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompetitionRequest.Unmarshal(m, b)
}
func (m *CompetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompetitionRequest.Marshal(b, m, deterministic)
}
func (m *CompetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompetitionRequest.Merge(m, src)
}
func (m *CompetitionRequest) XXX_Size() int {
	return xxx_messageInfo_CompetitionRequest.Size(m)
}
func (m *CompetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompetitionRequest proto.InternalMessageInfo

func (m *CompetitionRequest) GetCountryIds() []uint64 {
	if m != nil {
		return m.CountryIds
	}
	return nil
}

func (m *CompetitionRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *CompetitionRequest) GetIsCup() *wrappers.BoolValue {
	if m != nil {
		return m.IsCup
	}
	return nil
}

type FixtureRequest struct {
	FixtureId            uint64   `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FixtureRequest) Reset()         { *m = FixtureRequest{} }
func (m *FixtureRequest) String() string { return proto.CompactTextString(m) }
func (*FixtureRequest) ProtoMessage()    {}
func (*FixtureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{1}
}

func (m *FixtureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixtureRequest.Unmarshal(m, b)
}
func (m *FixtureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixtureRequest.Marshal(b, m, deterministic)
}
func (m *FixtureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixtureRequest.Merge(m, src)
}
func (m *FixtureRequest) XXX_Size() int {
	return xxx_messageInfo_FixtureRequest.Size(m)
}
func (m *FixtureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FixtureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FixtureRequest proto.InternalMessageInfo

func (m *FixtureRequest) GetFixtureId() uint64 {
	if m != nil {
		return m.FixtureId
	}
	return 0
}

type FixtureSearchRequest struct {
	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,1,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// The number of results to return.
	Limit *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,3,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return Results after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// Order the date column to return results in specific order
	Sort                 *wrappers.StringValue `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FixtureSearchRequest) Reset()         { *m = FixtureSearchRequest{} }
func (m *FixtureSearchRequest) String() string { return proto.CompactTextString(m) }
func (*FixtureSearchRequest) ProtoMessage()    {}
func (*FixtureSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{2}
}

func (m *FixtureSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixtureSearchRequest.Unmarshal(m, b)
}
func (m *FixtureSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixtureSearchRequest.Marshal(b, m, deterministic)
}
func (m *FixtureSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixtureSearchRequest.Merge(m, src)
}
func (m *FixtureSearchRequest) XXX_Size() int {
	return xxx_messageInfo_FixtureSearchRequest.Size(m)
}
func (m *FixtureSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FixtureSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FixtureSearchRequest proto.InternalMessageInfo

func (m *FixtureSearchRequest) GetSeasonIds() []uint64 {
	if m != nil {
		return m.SeasonIds
	}
	return nil
}

func (m *FixtureSearchRequest) GetLimit() *wrappers.UInt64Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *FixtureSearchRequest) GetDateBefore() *wrappers.StringValue {
	if m != nil {
		return m.DateBefore
	}
	return nil
}

func (m *FixtureSearchRequest) GetDateAfter() *wrappers.StringValue {
	if m != nil {
		return m.DateAfter
	}
	return nil
}

func (m *FixtureSearchRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

type HistoricalResultRequest struct {
	// The Home Team ID that the Result set relates to
	HomeTeamId uint64 `protobuf:"varint,1,opt,name=home_team_id,json=homeTeamId,proto3" json:"home_team_id,omitempty"`
	// The Away Team ID that the Result set relates to
	AwayTeamId uint64 `protobuf:"varint,2,opt,name=away_team_id,json=awayTeamId,proto3" json:"away_team_id,omitempty"`
	// The number of results to return
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore           string   `protobuf:"bytes,4,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalResultRequest) Reset()         { *m = HistoricalResultRequest{} }
func (m *HistoricalResultRequest) String() string { return proto.CompactTextString(m) }
func (*HistoricalResultRequest) ProtoMessage()    {}
func (*HistoricalResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{3}
}

func (m *HistoricalResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalResultRequest.Unmarshal(m, b)
}
func (m *HistoricalResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalResultRequest.Marshal(b, m, deterministic)
}
func (m *HistoricalResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalResultRequest.Merge(m, src)
}
func (m *HistoricalResultRequest) XXX_Size() int {
	return xxx_messageInfo_HistoricalResultRequest.Size(m)
}
func (m *HistoricalResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalResultRequest proto.InternalMessageInfo

func (m *HistoricalResultRequest) GetHomeTeamId() uint64 {
	if m != nil {
		return m.HomeTeamId
	}
	return 0
}

func (m *HistoricalResultRequest) GetAwayTeamId() uint64 {
	if m != nil {
		return m.AwayTeamId
	}
	return 0
}

func (m *HistoricalResultRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *HistoricalResultRequest) GetDateBefore() string {
	if m != nil {
		return m.DateBefore
	}
	return ""
}

type ResultRequest struct {
	FixtureId            uint64   `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultRequest) Reset()         { *m = ResultRequest{} }
func (m *ResultRequest) String() string { return proto.CompactTextString(m) }
func (*ResultRequest) ProtoMessage()    {}
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{4}
}

func (m *ResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultRequest.Unmarshal(m, b)
}
func (m *ResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultRequest.Marshal(b, m, deterministic)
}
func (m *ResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultRequest.Merge(m, src)
}
func (m *ResultRequest) XXX_Size() int {
	return xxx_messageInfo_ResultRequest.Size(m)
}
func (m *ResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResultRequest proto.InternalMessageInfo

func (m *ResultRequest) GetFixtureId() uint64 {
	if m != nil {
		return m.FixtureId
	}
	return 0
}

type SeasonCompetitionRequest struct {
	CompetitionId uint64 `protobuf:"varint,1,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	// Order the name column to return seasons in specific order
	Sort                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SeasonCompetitionRequest) Reset()         { *m = SeasonCompetitionRequest{} }
func (m *SeasonCompetitionRequest) String() string { return proto.CompactTextString(m) }
func (*SeasonCompetitionRequest) ProtoMessage()    {}
func (*SeasonCompetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{5}
}

func (m *SeasonCompetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeasonCompetitionRequest.Unmarshal(m, b)
}
func (m *SeasonCompetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeasonCompetitionRequest.Marshal(b, m, deterministic)
}
func (m *SeasonCompetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonCompetitionRequest.Merge(m, src)
}
func (m *SeasonCompetitionRequest) XXX_Size() int {
	return xxx_messageInfo_SeasonCompetitionRequest.Size(m)
}
func (m *SeasonCompetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonCompetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonCompetitionRequest proto.InternalMessageInfo

func (m *SeasonCompetitionRequest) GetCompetitionId() uint64 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *SeasonCompetitionRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

type SeasonRequest struct {
	// The Season ID that the Result set relates to
	SeasonId int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore           string   `protobuf:"bytes,2,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonRequest) Reset()         { *m = SeasonRequest{} }
func (m *SeasonRequest) String() string { return proto.CompactTextString(m) }
func (*SeasonRequest) ProtoMessage()    {}
func (*SeasonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{6}
}

func (m *SeasonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeasonRequest.Unmarshal(m, b)
}
func (m *SeasonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeasonRequest.Marshal(b, m, deterministic)
}
func (m *SeasonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonRequest.Merge(m, src)
}
func (m *SeasonRequest) XXX_Size() int {
	return xxx_messageInfo_SeasonRequest.Size(m)
}
func (m *SeasonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonRequest proto.InternalMessageInfo

func (m *SeasonRequest) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeasonRequest) GetDateBefore() string {
	if m != nil {
		return m.DateBefore
	}
	return ""
}

type SeasonTeamsRequest struct {
	SeasonId             uint64   `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonTeamsRequest) Reset()         { *m = SeasonTeamsRequest{} }
func (m *SeasonTeamsRequest) String() string { return proto.CompactTextString(m) }
func (*SeasonTeamsRequest) ProtoMessage()    {}
func (*SeasonTeamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{7}
}

func (m *SeasonTeamsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeasonTeamsRequest.Unmarshal(m, b)
}
func (m *SeasonTeamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeasonTeamsRequest.Marshal(b, m, deterministic)
}
func (m *SeasonTeamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonTeamsRequest.Merge(m, src)
}
func (m *SeasonTeamsRequest) XXX_Size() int {
	return xxx_messageInfo_SeasonTeamsRequest.Size(m)
}
func (m *SeasonTeamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonTeamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonTeamsRequest proto.InternalMessageInfo

func (m *SeasonTeamsRequest) GetSeasonId() uint64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type TeamRequest struct {
	TeamId               uint64   `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamRequest) Reset()         { *m = TeamRequest{} }
func (m *TeamRequest) String() string { return proto.CompactTextString(m) }
func (*TeamRequest) ProtoMessage()    {}
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{8}
}

func (m *TeamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamRequest.Unmarshal(m, b)
}
func (m *TeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamRequest.Marshal(b, m, deterministic)
}
func (m *TeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRequest.Merge(m, src)
}
func (m *TeamRequest) XXX_Size() int {
	return xxx_messageInfo_TeamRequest.Size(m)
}
func (m *TeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRequest proto.InternalMessageInfo

func (m *TeamRequest) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type TeamResultRequest struct {
	// The Team ID that the Result set relates to
	TeamId uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The number of results to return. If limit is not set the whole Result set for the Team
	// will be returned
	Limit *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return Results before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,3,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return Results after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// A filter to return based limited to either home or away results
	Venue *wrappers.StringValue `protobuf:"bytes,5,opt,name=venue,proto3" json:"venue,omitempty"`
	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,6,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// Order the date column to return results in specific order
	Sort                 *wrappers.StringValue `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TeamResultRequest) Reset()         { *m = TeamResultRequest{} }
func (m *TeamResultRequest) String() string { return proto.CompactTextString(m) }
func (*TeamResultRequest) ProtoMessage()    {}
func (*TeamResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{9}
}

func (m *TeamResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamResultRequest.Unmarshal(m, b)
}
func (m *TeamResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamResultRequest.Marshal(b, m, deterministic)
}
func (m *TeamResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamResultRequest.Merge(m, src)
}
func (m *TeamResultRequest) XXX_Size() int {
	return xxx_messageInfo_TeamResultRequest.Size(m)
}
func (m *TeamResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamResultRequest proto.InternalMessageInfo

func (m *TeamResultRequest) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TeamResultRequest) GetLimit() *wrappers.UInt64Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *TeamResultRequest) GetDateBefore() *wrappers.StringValue {
	if m != nil {
		return m.DateBefore
	}
	return nil
}

func (m *TeamResultRequest) GetDateAfter() *wrappers.StringValue {
	if m != nil {
		return m.DateAfter
	}
	return nil
}

func (m *TeamResultRequest) GetVenue() *wrappers.StringValue {
	if m != nil {
		return m.Venue
	}
	return nil
}

func (m *TeamResultRequest) GetSeasonIds() []uint64 {
	if m != nil {
		return m.SeasonIds
	}
	return nil
}

func (m *TeamResultRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

type TeamSeasonsRequest struct {
	TeamId uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Order the name column to return seasons in specific order
	Sort                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TeamSeasonsRequest) Reset()         { *m = TeamSeasonsRequest{} }
func (m *TeamSeasonsRequest) String() string { return proto.CompactTextString(m) }
func (*TeamSeasonsRequest) ProtoMessage()    {}
func (*TeamSeasonsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{10}
}

func (m *TeamSeasonsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamSeasonsRequest.Unmarshal(m, b)
}
func (m *TeamSeasonsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamSeasonsRequest.Marshal(b, m, deterministic)
}
func (m *TeamSeasonsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSeasonsRequest.Merge(m, src)
}
func (m *TeamSeasonsRequest) XXX_Size() int {
	return xxx_messageInfo_TeamSeasonsRequest.Size(m)
}
func (m *TeamSeasonsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSeasonsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSeasonsRequest proto.InternalMessageInfo

func (m *TeamSeasonsRequest) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TeamSeasonsRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

type TeamStatRequest struct {
	Stat string `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`
	// The Team ID that the Result set relates to
	TeamId uint64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The number of results to return. If limit is not set the whole Result set for the Team
	// will be returned
	Limit *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A filter to return stats before a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateBefore *wrappers.StringValue `protobuf:"bytes,4,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
	// A filter to return stats after a specific date
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateAfter *wrappers.StringValue `protobuf:"bytes,5,opt,name=date_after,json=dateAfter,proto3" json:"date_after,omitempty"`
	// A filter to return based stats limited to match being played either home or away
	Venue *wrappers.StringValue `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"`
	// A filter to limit the results returned associated to a specific season
	SeasonIds []uint64 `protobuf:"varint,7,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	// Order the date column to return stats in specific order
	Sort *wrappers.StringValue `protobuf:"bytes,8,opt,name=sort,proto3" json:"sort,omitempty"`
	// Return stats for opposing team
	Opponent             *wrappers.BoolValue `protobuf:"bytes,9,opt,name=opponent,proto3" json:"opponent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TeamStatRequest) Reset()         { *m = TeamStatRequest{} }
func (m *TeamStatRequest) String() string { return proto.CompactTextString(m) }
func (*TeamStatRequest) ProtoMessage()    {}
func (*TeamStatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{11}
}

func (m *TeamStatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamStatRequest.Unmarshal(m, b)
}
func (m *TeamStatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamStatRequest.Marshal(b, m, deterministic)
}
func (m *TeamStatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamStatRequest.Merge(m, src)
}
func (m *TeamStatRequest) XXX_Size() int {
	return xxx_messageInfo_TeamStatRequest.Size(m)
}
func (m *TeamStatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamStatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamStatRequest proto.InternalMessageInfo

func (m *TeamStatRequest) GetStat() string {
	if m != nil {
		return m.Stat
	}
	return ""
}

func (m *TeamStatRequest) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TeamStatRequest) GetLimit() *wrappers.UInt64Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *TeamStatRequest) GetDateBefore() *wrappers.StringValue {
	if m != nil {
		return m.DateBefore
	}
	return nil
}

func (m *TeamStatRequest) GetDateAfter() *wrappers.StringValue {
	if m != nil {
		return m.DateAfter
	}
	return nil
}

func (m *TeamStatRequest) GetVenue() *wrappers.StringValue {
	if m != nil {
		return m.Venue
	}
	return nil
}

func (m *TeamStatRequest) GetSeasonIds() []uint64 {
	if m != nil {
		return m.SeasonIds
	}
	return nil
}

func (m *TeamStatRequest) GetSort() *wrappers.StringValue {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *TeamStatRequest) GetOpponent() *wrappers.BoolValue {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func init() {
	proto.RegisterType((*CompetitionRequest)(nil), "statistico_data.CompetitionRequest")
	proto.RegisterType((*FixtureRequest)(nil), "statistico_data.FixtureRequest")
	proto.RegisterType((*FixtureSearchRequest)(nil), "statistico_data.FixtureSearchRequest")
	proto.RegisterType((*HistoricalResultRequest)(nil), "statistico_data.HistoricalResultRequest")
	proto.RegisterType((*ResultRequest)(nil), "statistico_data.ResultRequest")
	proto.RegisterType((*SeasonCompetitionRequest)(nil), "statistico_data.SeasonCompetitionRequest")
	proto.RegisterType((*SeasonRequest)(nil), "statistico_data.SeasonRequest")
	proto.RegisterType((*SeasonTeamsRequest)(nil), "statistico_data.SeasonTeamsRequest")
	proto.RegisterType((*TeamRequest)(nil), "statistico_data.TeamRequest")
	proto.RegisterType((*TeamResultRequest)(nil), "statistico_data.TeamResultRequest")
	proto.RegisterType((*TeamSeasonsRequest)(nil), "statistico_data.TeamSeasonsRequest")
	proto.RegisterType((*TeamStatRequest)(nil), "statistico_data.TeamStatRequest")
}

func init() {
	proto.RegisterFile("requests.proto", fileDescriptor_9c9ccec99da7c9b4)
}

var fileDescriptor_9c9ccec99da7c9b4 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x1d, 0x27, 0x8d, 0x27, 0x24, 0x15, 0x56, 0xa5, 0x5a, 0xe5, 0xa3, 0x91, 0x25, 0x50,
	0x4e, 0x09, 0x0d, 0xa8, 0x17, 0xc4, 0x81, 0x56, 0x42, 0xe4, 0xc0, 0xc5, 0x01, 0xae, 0xd6, 0xc6,
	0xde, 0xa4, 0x2b, 0x39, 0x5e, 0xb3, 0x3b, 0xa6, 0xf4, 0x7f, 0x20, 0x21, 0xf1, 0x17, 0xf8, 0x55,
	0xfc, 0x13, 0xb4, 0x6b, 0x3b, 0x71, 0xd2, 0x86, 0xa4, 0xe1, 0xc4, 0x2d, 0x19, 0xbf, 0x37, 0xb3,
	0xf3, 0xde, 0xb3, 0x17, 0x3a, 0x82, 0x7e, 0xc9, 0xa8, 0x44, 0xd9, 0x4f, 0x05, 0x47, 0xee, 0x1c,
	0x4a, 0x24, 0xc8, 0x24, 0xb2, 0x90, 0x07, 0x11, 0x41, 0x72, 0xf2, 0x74, 0xc6, 0xf9, 0x2c, 0xa6,
	0x03, 0xfd, 0x78, 0x92, 0x4d, 0x07, 0xd7, 0x82, 0xa4, 0x29, 0x15, 0x05, 0xc1, 0xfb, 0x69, 0x80,
	0x73, 0xc9, 0xe7, 0x29, 0x45, 0x86, 0x8c, 0x27, 0x7e, 0xde, 0xce, 0x39, 0x85, 0x56, 0xc8, 0xb3,
	0x04, 0xc5, 0x4d, 0xc0, 0x22, 0xe9, 0x1a, 0xdd, 0x5a, 0xcf, 0xf2, 0xa1, 0x28, 0x8d, 0x22, 0xe9,
	0xbc, 0x00, 0x4b, 0x72, 0x81, 0xae, 0xd9, 0x35, 0x7a, 0xad, 0xe1, 0xe3, 0x7e, 0x3e, 0xa6, 0x5f,
	0x8e, 0xe9, 0x8f, 0x51, 0xb0, 0x64, 0xf6, 0x99, 0xc4, 0x19, 0xf5, 0x35, 0xd2, 0x39, 0x83, 0x06,
	0x93, 0x41, 0x98, 0xa5, 0x6e, 0x4d, 0x73, 0x4e, 0x6e, 0x71, 0x2e, 0x38, 0x8f, 0x73, 0x46, 0x9d,
	0xc9, 0xcb, 0x2c, 0xf5, 0x06, 0xd0, 0x79, 0xc7, 0xbe, 0x61, 0x26, 0x68, 0x79, 0xae, 0x27, 0x00,
	0xd3, 0xbc, 0x12, 0xb0, 0xc8, 0x35, 0xba, 0x46, 0xcf, 0xf2, 0xed, 0xa2, 0x32, 0x8a, 0xbc, 0x1f,
	0x26, 0x1c, 0x15, 0x8c, 0x31, 0x25, 0x22, 0xbc, 0xaa, 0xf0, 0x24, 0x25, 0x92, 0x27, 0x95, 0x75,
	0xec, 0xbc, 0xa2, 0xb6, 0x19, 0x42, 0x3d, 0x66, 0x73, 0xb6, 0x79, 0x9d, 0x4f, 0xa3, 0x04, 0xcf,
	0x5f, 0x15, 0x87, 0xd3, 0x50, 0xe7, 0x0d, 0xb4, 0x22, 0x82, 0x34, 0x98, 0xd0, 0x29, 0x17, 0xb4,
	0x58, 0xea, 0xef, 0x42, 0x80, 0x22, 0x5c, 0x68, 0xbc, 0xf3, 0x1a, 0xf4, 0xbf, 0x80, 0x4c, 0x91,
	0x0a, 0xd7, 0xda, 0x81, 0x6d, 0x2b, 0xfc, 0x5b, 0x05, 0x5f, 0xa8, 0x5f, 0xdf, 0x55, 0x7d, 0xef,
	0xbb, 0x01, 0xc7, 0xef, 0x99, 0x44, 0x2e, 0x58, 0x48, 0x62, 0x9f, 0xca, 0x2c, 0xc6, 0x52, 0x9c,
	0x2e, 0x3c, 0xb8, 0xe2, 0x73, 0x1a, 0x20, 0x25, 0xf3, 0xa5, 0xac, 0xa0, 0x6a, 0x1f, 0x29, 0x99,
	0x8f, 0x22, 0x85, 0x20, 0xd7, 0xe4, 0x66, 0x81, 0x30, 0x73, 0x84, 0xaa, 0x15, 0x88, 0xa3, 0x52,
	0x41, 0xa5, 0x43, 0xbb, 0xd4, 0xe8, 0x74, 0x55, 0x23, 0xb5, 0xa5, 0x5d, 0x55, 0xc1, 0xeb, 0x43,
	0x7b, 0xf5, 0x2c, 0x5b, 0x0c, 0x96, 0xe0, 0x8e, 0xb5, 0x6b, 0x77, 0x64, 0xf6, 0x19, 0x74, 0xc2,
	0x65, 0x75, 0x49, 0x6f, 0x57, 0xaa, 0xa3, 0xe8, 0xfe, 0xc9, 0xf5, 0x3e, 0x40, 0x3b, 0x1f, 0x5a,
	0x4e, 0x7a, 0x04, 0xf6, 0x22, 0x4d, 0x7a, 0x48, 0xcd, 0x6f, 0x96, 0x61, 0x5a, 0xdf, 0xd9, 0xbc,
	0xb5, 0xf3, 0x19, 0x38, 0x79, 0x3b, 0x25, 0x9d, 0xdc, 0xd8, 0xd3, 0x5a, 0xf6, 0xf4, 0x9e, 0x43,
	0x4b, 0x81, 0x4b, 0xec, 0x31, 0x1c, 0xac, 0x7a, 0xd5, 0x40, 0xed, 0x82, 0xf7, 0xdb, 0x84, 0x87,
	0x39, 0xb0, 0xaa, 0xe9, 0x26, 0xf8, 0x7f, 0x17, 0xfb, 0x21, 0xd4, 0xbf, 0xd2, 0x24, 0xa3, 0x3b,
	0xe5, 0x3e, 0x87, 0xae, 0xbd, 0xf9, 0x8d, 0xf5, 0x37, 0xbf, 0x4c, 0xc3, 0xc1, 0xce, 0x69, 0x08,
	0xc0, 0x51, 0x12, 0xe7, 0x16, 0xca, 0xad, 0x1a, 0xdf, 0x3f, 0x6e, 0xbf, 0x6a, 0x70, 0xa8, 0x27,
	0x20, 0x59, 0x58, 0xe8, 0x80, 0xa5, 0xbe, 0xec, 0xba, 0xb7, 0xed, 0xeb, 0xdf, 0xd5, 0x91, 0xe6,
	0xdd, 0xb6, 0xd6, 0xf6, 0xb6, 0xd5, 0xfa, 0x27, 0x5b, 0xeb, 0x7b, 0xda, 0xda, 0xd8, 0xd7, 0xd6,
	0x83, 0x4d, 0xb6, 0x36, 0x77, 0xbe, 0x9e, 0xce, 0xa1, 0xc9, 0xd3, 0x94, 0x27, 0x34, 0x41, 0xd7,
	0xde, 0x7a, 0x41, 0x2d, 0xb0, 0x93, 0x86, 0x7e, 0xfa, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0e, 0x77, 0xf6, 0xb6, 0x8a, 0x07, 0x00, 0x00,
}
