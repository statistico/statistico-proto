# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import requests_pb2 as requests__pb2
import result_pb2 as result__pb2


class ResultServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetById = channel.unary_unary(
                '/statistico.ResultService/GetById',
                request_serializer=requests__pb2.ResultRequest.SerializeToString,
                response_deserializer=result__pb2.Result.FromString,
                )
        self.GetHistoricalResultsForFixture = channel.unary_stream(
                '/statistico.ResultService/GetHistoricalResultsForFixture',
                request_serializer=requests__pb2.HistoricalResultRequest.SerializeToString,
                response_deserializer=result__pb2.Result.FromString,
                )
        self.GetResultsForSeason = channel.unary_stream(
                '/statistico.ResultService/GetResultsForSeason',
                request_serializer=requests__pb2.SeasonRequest.SerializeToString,
                response_deserializer=result__pb2.Result.FromString,
                )
        self.GetResultsForTeam = channel.unary_stream(
                '/statistico.ResultService/GetResultsForTeam',
                request_serializer=requests__pb2.TeamResultRequest.SerializeToString,
                response_deserializer=result__pb2.Result.FromString,
                )


class ResultServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalResultsForFixture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResultsForSeason(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResultsForTeam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetById,
                    request_deserializer=requests__pb2.ResultRequest.FromString,
                    response_serializer=result__pb2.Result.SerializeToString,
            ),
            'GetHistoricalResultsForFixture': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHistoricalResultsForFixture,
                    request_deserializer=requests__pb2.HistoricalResultRequest.FromString,
                    response_serializer=result__pb2.Result.SerializeToString,
            ),
            'GetResultsForSeason': grpc.unary_stream_rpc_method_handler(
                    servicer.GetResultsForSeason,
                    request_deserializer=requests__pb2.SeasonRequest.FromString,
                    response_serializer=result__pb2.Result.SerializeToString,
            ),
            'GetResultsForTeam': grpc.unary_stream_rpc_method_handler(
                    servicer.GetResultsForTeam,
                    request_deserializer=requests__pb2.TeamResultRequest.FromString,
                    response_serializer=result__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statistico.ResultService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistico.ResultService/GetById',
            requests__pb2.ResultRequest.SerializeToString,
            result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricalResultsForFixture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/statistico.ResultService/GetHistoricalResultsForFixture',
            requests__pb2.HistoricalResultRequest.SerializeToString,
            result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResultsForSeason(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/statistico.ResultService/GetResultsForSeason',
            requests__pb2.SeasonRequest.SerializeToString,
            result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResultsForTeam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/statistico.ResultService/GetResultsForTeam',
            requests__pb2.TeamResultRequest.SerializeToString,
            result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
