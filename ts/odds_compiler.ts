// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "odds_compiler.proto" (package "statistico", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Odds } from "./common";
/**
 * @generated from protobuf message statistico.EventRequest
 */
export interface EventRequest {
    /**
     * @generated from protobuf field: uint64 event_id = 1;
     */
    eventId: bigint;
    /**
     * @generated from protobuf field: string market = 2;
     */
    market: string;
}
/**
 * @generated from protobuf message statistico.EventMarket
 */
export interface EventMarket {
    /**
     * @generated from protobuf field: uint64 event_id = 1;
     */
    eventId: bigint;
    /**
     * @generated from protobuf field: string market = 2;
     */
    market: string;
    /**
     * @generated from protobuf field: repeated statistico.Odds odds = 3;
     */
    odds: Odds[];
    /**
     * @generated from protobuf field: string model = 4;
     */
    model: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EventRequest$Type extends MessageType<EventRequest> {
    constructor() {
        super("statistico.EventRequest", [
            { no: 1, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "market", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventRequest>): EventRequest {
        const message = { eventId: 0n, market: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventRequest): EventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 event_id */ 1:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                case /* string market */ 2:
                    message.market = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 event_id = 1; */
        if (message.eventId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.eventId);
        /* string market = 2; */
        if (message.market !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.market);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.EventRequest
 */
export const EventRequest = new EventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMarket$Type extends MessageType<EventMarket> {
    constructor() {
        super("statistico.EventMarket", [
            { no: 1, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "market", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "odds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Odds },
            { no: 4, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventMarket>): EventMarket {
        const message = { eventId: 0n, market: "", odds: [], model: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventMarket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventMarket): EventMarket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 event_id */ 1:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                case /* string market */ 2:
                    message.market = reader.string();
                    break;
                case /* repeated statistico.Odds odds */ 3:
                    message.odds.push(Odds.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string model */ 4:
                    message.model = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventMarket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 event_id = 1; */
        if (message.eventId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.eventId);
        /* string market = 2; */
        if (message.market !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.market);
        /* repeated statistico.Odds odds = 3; */
        for (let i = 0; i < message.odds.length; i++)
            Odds.internalBinaryWrite(message.odds[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string model = 4; */
        if (message.model !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.model);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.EventMarket
 */
export const EventMarket = new EventMarket$Type();
/**
 * @generated ServiceType for protobuf service statistico.OddsCompilerService
 */
export const OddsCompilerService = new ServiceType("statistico.OddsCompilerService", [
    { name: "GetEventMarket", options: {}, I: EventRequest, O: EventMarket }
]);
