// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: odds_warehouse.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OddsWarehouseServiceClient is the client API for OddsWarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OddsWarehouseServiceClient interface {
	ExchangeEventMarketSearch(ctx context.Context, in *ExchangeEventMarketRequest, opts ...grpc.CallOption) (*ExchangeEventMarket, error)
}

type oddsWarehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOddsWarehouseServiceClient(cc grpc.ClientConnInterface) OddsWarehouseServiceClient {
	return &oddsWarehouseServiceClient{cc}
}

func (c *oddsWarehouseServiceClient) ExchangeEventMarketSearch(ctx context.Context, in *ExchangeEventMarketRequest, opts ...grpc.CallOption) (*ExchangeEventMarket, error) {
	out := new(ExchangeEventMarket)
	err := c.cc.Invoke(ctx, "/statistico.OddsWarehouseService/ExchangeEventMarketSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OddsWarehouseServiceServer is the server API for OddsWarehouseService service.
// All implementations must embed UnimplementedOddsWarehouseServiceServer
// for forward compatibility
type OddsWarehouseServiceServer interface {
	ExchangeEventMarketSearch(context.Context, *ExchangeEventMarketRequest) (*ExchangeEventMarket, error)
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

// UnimplementedOddsWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOddsWarehouseServiceServer struct {
}

func (UnimplementedOddsWarehouseServiceServer) ExchangeEventMarketSearch(context.Context, *ExchangeEventMarketRequest) (*ExchangeEventMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeEventMarketSearch not implemented")
}
func (UnimplementedOddsWarehouseServiceServer) mustEmbedUnimplementedOddsWarehouseServiceServer() {}

// UnsafeOddsWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OddsWarehouseServiceServer will
// result in compilation errors.
type UnsafeOddsWarehouseServiceServer interface {
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

func RegisterOddsWarehouseServiceServer(s grpc.ServiceRegistrar, srv OddsWarehouseServiceServer) {
	s.RegisterService(&OddsWarehouseService_ServiceDesc, srv)
}

func _OddsWarehouseService_ExchangeEventMarketSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeEventMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OddsWarehouseServiceServer).ExchangeEventMarketSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistico.OddsWarehouseService/ExchangeEventMarketSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OddsWarehouseServiceServer).ExchangeEventMarketSearch(ctx, req.(*ExchangeEventMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OddsWarehouseService_ServiceDesc is the grpc.ServiceDesc for OddsWarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OddsWarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.OddsWarehouseService",
	HandlerType: (*OddsWarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeEventMarketSearch",
			Handler:    _OddsWarehouseService_ExchangeEventMarketSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odds_warehouse.proto",
}
