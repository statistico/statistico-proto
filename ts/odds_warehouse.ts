// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "odds_warehouse.proto" (package "statistico", syntax proto3)
// tslint:disable
import { EventMarketRequest } from "./requests";
import { ExchangeOddsRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Date } from "./common";
/**
 * @generated from protobuf message statistico.ExchangeOdds
 */
export interface ExchangeOdds {
    /**
     * @generated from protobuf field: float price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: float size = 2;
     */
    size: number;
    /**
     * @generated from protobuf field: string side = 3;
     */
    side: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 4;
     */
    timestamp: bigint;
}
/**
 * @generated from protobuf message statistico.Market
 */
export interface Market {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: uint64 event_id = 3;
     */
    eventId: bigint;
    /**
     * @generated from protobuf field: uint64 competition_id = 4;
     */
    competitionId: bigint;
    /**
     * @generated from protobuf field: uint64 season_id = 5;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: string exchange = 6;
     */
    exchange: string;
    /**
     * @generated from protobuf field: statistico.Date date_time = 7;
     */
    dateTime?: Date;
    /**
     * @generated from protobuf field: repeated statistico.Runner runners = 8;
     */
    runners: Runner[];
}
/**
 * @generated from protobuf message statistico.Runner
 */
export interface Runner {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: statistico.ExchangeOdds back_odds = 3;
     */
    backOdds?: ExchangeOdds;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExchangeOdds$Type extends MessageType<ExchangeOdds> {
    constructor() {
        super("statistico.ExchangeOdds", [
            { no: 1, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "size", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "side", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ExchangeOdds>): ExchangeOdds {
        const message = { price: 0, size: 0, side: "", timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExchangeOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExchangeOdds): ExchangeOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float price */ 1:
                    message.price = reader.float();
                    break;
                case /* float size */ 2:
                    message.size = reader.float();
                    break;
                case /* string side */ 3:
                    message.side = reader.string();
                    break;
                case /* uint64 timestamp */ 4:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExchangeOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit32).float(message.price);
        /* float size = 2; */
        if (message.size !== 0)
            writer.tag(2, WireType.Bit32).float(message.size);
        /* string side = 3; */
        if (message.side !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.side);
        /* uint64 timestamp = 4; */
        if (message.timestamp !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.ExchangeOdds
 */
export const ExchangeOdds = new ExchangeOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Market$Type extends MessageType<Market> {
    constructor() {
        super("statistico.Market", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "competition_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "exchange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "date_time", kind: "message", T: () => Date },
            { no: 8, name: "runners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Runner }
        ]);
    }
    create(value?: PartialMessage<Market>): Market {
        const message = { id: "", name: "", eventId: 0n, competitionId: 0n, seasonId: 0n, exchange: "", runners: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Market>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Market): Market {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* uint64 event_id */ 3:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                case /* uint64 competition_id */ 4:
                    message.competitionId = reader.uint64().toBigInt();
                    break;
                case /* uint64 season_id */ 5:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                case /* string exchange */ 6:
                    message.exchange = reader.string();
                    break;
                case /* statistico.Date date_time */ 7:
                    message.dateTime = Date.internalBinaryRead(reader, reader.uint32(), options, message.dateTime);
                    break;
                case /* repeated statistico.Runner runners */ 8:
                    message.runners.push(Runner.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Market, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint64 event_id = 3; */
        if (message.eventId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.eventId);
        /* uint64 competition_id = 4; */
        if (message.competitionId !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.competitionId);
        /* uint64 season_id = 5; */
        if (message.seasonId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.seasonId);
        /* string exchange = 6; */
        if (message.exchange !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.exchange);
        /* statistico.Date date_time = 7; */
        if (message.dateTime)
            Date.internalBinaryWrite(message.dateTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated statistico.Runner runners = 8; */
        for (let i = 0; i < message.runners.length; i++)
            Runner.internalBinaryWrite(message.runners[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Market
 */
export const Market = new Market$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Runner$Type extends MessageType<Runner> {
    constructor() {
        super("statistico.Runner", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "back_odds", kind: "message", T: () => ExchangeOdds }
        ]);
    }
    create(value?: PartialMessage<Runner>): Runner {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Runner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Runner): Runner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* statistico.ExchangeOdds back_odds */ 3:
                    message.backOdds = ExchangeOdds.internalBinaryRead(reader, reader.uint32(), options, message.backOdds);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Runner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* statistico.ExchangeOdds back_odds = 3; */
        if (message.backOdds)
            ExchangeOdds.internalBinaryWrite(message.backOdds, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Runner
 */
export const Runner = new Runner$Type();
/**
 * @generated ServiceType for protobuf service statistico.OddsWarehouseService
 */
export const OddsWarehouseService = new ServiceType("statistico.OddsWarehouseService", [
    { name: "GetExchangeOdds", serverStreaming: true, options: {}, I: ExchangeOddsRequest, O: ExchangeOdds },
    { name: "GetEventMarkets", serverStreaming: true, options: {}, I: EventMarketRequest, O: Market }
]);
