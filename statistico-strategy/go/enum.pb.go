// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package statisticoproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_FOR     Action = 0
	Action_AGAINST Action = 1
)

var Action_name = map[int32]string{
	0: "FOR",
	1: "AGAINST",
}

var Action_value = map[string]int32{
	"FOR":     0,
	"AGAINST": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{0}
}

type Line int32

const (
	Line_CLOSING Line = 0
	Line_MAX     Line = 1
)

var Line_name = map[int32]string{
	0: "CLOSING",
	1: "MAX",
}

var Line_value = map[string]int32{
	"CLOSING": 0,
	"MAX":     1,
}

func (x Line) String() string {
	return proto.EnumName(Line_name, int32(x))
}

func (Line) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{1}
}

type Measure int32

const (
	Measure_TOTAL Measure = 0
	Measure_AVG   Measure = 1
)

var Measure_name = map[int32]string{
	0: "TOTAL",
	1: "AVG",
}

var Measure_value = map[string]int32{
	"TOTAL": 0,
	"AVG":   1,
}

func (x Measure) String() string {
	return proto.EnumName(Measure_name, int32(x))
}

func (Measure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{2}
}

type Metric int32

const (
	Metric_GTE Metric = 0
	Metric_LTE Metric = 1
)

var Metric_name = map[int32]string{
	0: "GTE",
	1: "LTE",
}

var Metric_value = map[string]int32{
	"GTE": 0,
	"LTE": 1,
}

func (x Metric) String() string {
	return proto.EnumName(Metric_name, int32(x))
}

func (Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{3}
}

type Result int32

const (
	Result_WIN       Result = 0
	Result_LOSE      Result = 1
	Result_DRAW      Result = 2
	Result_WIN_DRAW  Result = 3
	Result_LOSE_DRAW Result = 4
)

var Result_name = map[int32]string{
	0: "WIN",
	1: "LOSE",
	2: "DRAW",
	3: "WIN_DRAW",
	4: "LOSE_DRAW",
}

var Result_value = map[string]int32{
	"WIN":       0,
	"LOSE":      1,
	"DRAW":      2,
	"WIN_DRAW":  3,
	"LOSE_DRAW": 4,
}

func (x Result) String() string {
	return proto.EnumName(Result_name, int32(x))
}

func (Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{4}
}

type Stat int32

const (
	Stat_GOALS         Stat = 0
	Stat_SHOTS_ON_GOAL Stat = 1
	Stat_XG            Stat = 2
)

var Stat_name = map[int32]string{
	0: "GOALS",
	1: "SHOTS_ON_GOAL",
	2: "XG",
}

var Stat_value = map[string]int32{
	"GOALS":         0,
	"SHOTS_ON_GOAL": 1,
	"XG":            2,
}

func (x Stat) String() string {
	return proto.EnumName(Stat_name, int32(x))
}

func (Stat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{5}
}

type Team int32

const (
	Team_HOME_TEAM Team = 0
	Team_AWAY_TEAM Team = 1
)

var Team_name = map[int32]string{
	0: "HOME_TEAM",
	1: "AWAY_TEAM",
}

var Team_value = map[string]int32{
	"HOME_TEAM": 0,
	"AWAY_TEAM": 1,
}

func (x Team) String() string {
	return proto.EnumName(Team_name, int32(x))
}

func (Team) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{6}
}

type TradeResult int32

const (
	TradeResult_SUCCESS TradeResult = 0
	TradeResult_FAIL    TradeResult = 1
)

var TradeResult_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var TradeResult_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x TradeResult) String() string {
	return proto.EnumName(TradeResult_name, int32(x))
}

func (TradeResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{7}
}

type Venue int32

const (
	Venue_HOME      Venue = 0
	Venue_AWAY      Venue = 1
	Venue_HOME_AWAY Venue = 2
)

var Venue_name = map[int32]string{
	0: "HOME",
	1: "AWAY",
	2: "HOME_AWAY",
}

var Venue_value = map[string]int32{
	"HOME":      0,
	"AWAY":      1,
	"HOME_AWAY": 2,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}

func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{8}
}

func init() {
	proto.RegisterEnum("statisticoproto.Action", Action_name, Action_value)
	proto.RegisterEnum("statisticoproto.Line", Line_name, Line_value)
	proto.RegisterEnum("statisticoproto.Measure", Measure_name, Measure_value)
	proto.RegisterEnum("statisticoproto.Metric", Metric_name, Metric_value)
	proto.RegisterEnum("statisticoproto.Result", Result_name, Result_value)
	proto.RegisterEnum("statisticoproto.Stat", Stat_name, Stat_value)
	proto.RegisterEnum("statisticoproto.Team", Team_name, Team_value)
	proto.RegisterEnum("statisticoproto.TradeResult", TradeResult_name, TradeResult_value)
	proto.RegisterEnum("statisticoproto.Venue", Venue_name, Venue_value)
}

func init() {
	proto.RegisterFile("enum.proto", fileDescriptor_13a9f1b5947140c8)
}

var fileDescriptor_13a9f1b5947140c8 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xc1, 0x6e, 0xab, 0x30,
	0x10, 0x45, 0x31, 0x21, 0x90, 0x4c, 0x5e, 0xf4, 0xa6, 0x5e, 0x56, 0x6d, 0x57, 0x59, 0x59, 0x55,
	0x37, 0xfd, 0x02, 0x37, 0x25, 0x04, 0xc9, 0x60, 0x29, 0x76, 0x43, 0xba, 0x42, 0x94, 0x7a, 0x81,
	0xd4, 0x40, 0x05, 0xe6, 0xff, 0x2b, 0x43, 0xd5, 0x9d, 0xcf, 0xb9, 0xa3, 0x3b, 0x23, 0x03, 0x98,
	0x76, 0xbc, 0x3e, 0x7d, 0xf7, 0x9d, 0xed, 0xe8, 0xff, 0xc1, 0x56, 0xb6, 0x19, 0x6c, 0x53, 0x77,
	0x93, 0x60, 0x0f, 0x10, 0xf2, 0xda, 0x36, 0x5d, 0x4b, 0x23, 0x58, 0x1c, 0xe4, 0x09, 0x3d, 0xba,
	0x81, 0x88, 0x27, 0x3c, 0xcd, 0x95, 0x46, 0xc2, 0xee, 0x20, 0x10, 0x4d, 0x6b, 0x9c, 0xdc, 0x0b,
	0xa9, 0xd2, 0x3c, 0x41, 0xcf, 0x8d, 0x66, 0xfc, 0x82, 0x84, 0xdd, 0x43, 0x94, 0x99, 0x6a, 0x18,
	0x7b, 0x43, 0xd7, 0xb0, 0xd4, 0x52, 0x73, 0x31, 0xc7, 0xfc, 0x9c, 0x20, 0x61, 0xb7, 0x10, 0x66,
	0xc6, 0xf6, 0x4d, 0xed, 0x54, 0xa2, 0xe3, 0x39, 0x13, 0x3a, 0x46, 0xc2, 0x5e, 0x20, 0x3c, 0x99,
	0x61, 0xfc, 0xb2, 0x4e, 0x15, 0x69, 0x8e, 0x1e, 0x5d, 0x41, 0x20, 0xa4, 0x8a, 0x91, 0xb8, 0xd7,
	0xeb, 0x89, 0x17, 0xe8, 0xd3, 0x7f, 0xb0, 0x2a, 0xd2, 0xbc, 0x9c, 0x68, 0x41, 0xb7, 0xb0, 0x76,
	0x13, 0x33, 0x06, 0xec, 0x11, 0x02, 0x65, 0x2b, 0xeb, 0x76, 0x27, 0x92, 0x0b, 0x85, 0x1e, 0xbd,
	0x81, 0xad, 0x3a, 0x4a, 0xad, 0x4a, 0x99, 0x97, 0xce, 0x21, 0xa1, 0x21, 0xf8, 0x97, 0x04, 0x7d,
	0xb6, 0x83, 0x40, 0x9b, 0xea, 0xea, 0x4a, 0x8e, 0x32, 0x8b, 0x4b, 0x1d, 0xf3, 0x0c, 0x3d, 0x87,
	0xbc, 0xe0, 0xef, 0x33, 0x12, 0xb6, 0x83, 0x8d, 0xee, 0xab, 0x4f, 0xf3, 0x7b, 0xdc, 0x06, 0x22,
	0xf5, 0xb6, 0xdf, 0xc7, 0x4a, 0xcd, 0x07, 0x1e, 0x78, 0x2a, 0x90, 0x30, 0x06, 0xcb, 0xb3, 0x69,
	0x47, 0xe3, 0x94, 0x2b, 0x9b, 0x43, 0xd7, 0x83, 0xe4, 0x6f, 0xc1, 0x84, 0xfe, 0x47, 0x38, 0xfd,
	0xf4, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0xd3, 0x1f, 0xef, 0x88, 0x01, 0x00, 0x00,
}
