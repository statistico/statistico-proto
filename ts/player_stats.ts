// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "player_stats.proto" (package "statistico", syntax proto3)
// tslint:disable
import { FixtureRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "./google/protobuf/wrappers";
import { Int32Value } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message statistico.TeamSeasonPlayStatsRequest
 */
export interface TeamSeasonPlayStatsRequest {
    /**
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: uint64 season_id = 2;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: uint64 date_before = 3;
     */
    dateBefore: bigint;
}
/**
 * @generated from protobuf message statistico.PlayerStatsResponse
 */
export interface PlayerStatsResponse {
    /**
     * @generated from protobuf field: repeated statistico.PlayerStats home_team = 1;
     */
    homeTeam: PlayerStats[];
    /**
     * @generated from protobuf field: repeated statistico.PlayerStats away_team = 2;
     */
    awayTeam: PlayerStats[];
}
/**
 * @generated from protobuf message statistico.LineupResponse
 */
export interface LineupResponse {
    /**
     * @generated from protobuf field: statistico.Lineup home_team = 1;
     */
    homeTeam?: Lineup;
    /**
     * @generated from protobuf field: statistico.Lineup away_team = 2;
     */
    awayTeam?: Lineup;
}
/**
 * @generated from protobuf message statistico.PlayerStats
 */
export interface PlayerStats {
    /**
     * @generated from protobuf field: uint64 player_id = 1;
     */
    playerId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value shots_total = 2;
     */
    shotsTotal?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value shots_on_goal = 3;
     */
    shotsOnGoal?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value goals_scored = 4;
     */
    goalsScored?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value goals_conceded = 5;
     */
    goalsConceded?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value assists = 6;
     */
    assists?: Int32Value;
}
/**
 * @generated from protobuf message statistico.Lineup
 */
export interface Lineup {
    /**
     * @generated from protobuf field: repeated statistico.LineupPlayer start = 1;
     */
    start: LineupPlayer[];
    /**
     * @generated from protobuf field: repeated statistico.LineupPlayer bench = 2;
     */
    bench: LineupPlayer[];
}
/**
 * @generated from protobuf message statistico.LineupPlayer
 */
export interface LineupPlayer {
    /**
     * @generated from protobuf field: uint64 player_id = 1;
     */
    playerId: bigint;
    /**
     * @generated from protobuf field: string position = 2;
     */
    position: string;
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value formation_position = 3;
     */
    formationPosition?: UInt32Value;
    /**
     * @generated from protobuf field: bool is_substitute = 4;
     */
    isSubstitute: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamSeasonPlayStatsRequest$Type extends MessageType<TeamSeasonPlayStatsRequest> {
    constructor() {
        super("statistico.TeamSeasonPlayStatsRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "date_before", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamSeasonPlayStatsRequest>): TeamSeasonPlayStatsRequest {
        const message = { teamId: 0n, seasonId: 0n, dateBefore: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamSeasonPlayStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamSeasonPlayStatsRequest): TeamSeasonPlayStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* uint64 season_id */ 2:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                case /* uint64 date_before */ 3:
                    message.dateBefore = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamSeasonPlayStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 season_id = 2; */
        if (message.seasonId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.seasonId);
        /* uint64 date_before = 3; */
        if (message.dateBefore !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.dateBefore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamSeasonPlayStatsRequest
 */
export const TeamSeasonPlayStatsRequest = new TeamSeasonPlayStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStatsResponse$Type extends MessageType<PlayerStatsResponse> {
    constructor() {
        super("statistico.PlayerStatsResponse", [
            { no: 1, name: "home_team", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats },
            { no: 2, name: "away_team", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }
        ]);
    }
    create(value?: PartialMessage<PlayerStatsResponse>): PlayerStatsResponse {
        const message = { homeTeam: [], awayTeam: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStatsResponse): PlayerStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated statistico.PlayerStats home_team */ 1:
                    message.homeTeam.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated statistico.PlayerStats away_team */ 2:
                    message.awayTeam.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated statistico.PlayerStats home_team = 1; */
        for (let i = 0; i < message.homeTeam.length; i++)
            PlayerStats.internalBinaryWrite(message.homeTeam[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated statistico.PlayerStats away_team = 2; */
        for (let i = 0; i < message.awayTeam.length; i++)
            PlayerStats.internalBinaryWrite(message.awayTeam[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.PlayerStatsResponse
 */
export const PlayerStatsResponse = new PlayerStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LineupResponse$Type extends MessageType<LineupResponse> {
    constructor() {
        super("statistico.LineupResponse", [
            { no: 1, name: "home_team", kind: "message", T: () => Lineup },
            { no: 2, name: "away_team", kind: "message", T: () => Lineup }
        ]);
    }
    create(value?: PartialMessage<LineupResponse>): LineupResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LineupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LineupResponse): LineupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* statistico.Lineup home_team */ 1:
                    message.homeTeam = Lineup.internalBinaryRead(reader, reader.uint32(), options, message.homeTeam);
                    break;
                case /* statistico.Lineup away_team */ 2:
                    message.awayTeam = Lineup.internalBinaryRead(reader, reader.uint32(), options, message.awayTeam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LineupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* statistico.Lineup home_team = 1; */
        if (message.homeTeam)
            Lineup.internalBinaryWrite(message.homeTeam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Lineup away_team = 2; */
        if (message.awayTeam)
            Lineup.internalBinaryWrite(message.awayTeam, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.LineupResponse
 */
export const LineupResponse = new LineupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStats$Type extends MessageType<PlayerStats> {
    constructor() {
        super("statistico.PlayerStats", [
            { no: 1, name: "player_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "shots_total", kind: "message", T: () => Int32Value },
            { no: 3, name: "shots_on_goal", kind: "message", T: () => Int32Value },
            { no: 4, name: "goals_scored", kind: "message", T: () => Int32Value },
            { no: 5, name: "goals_conceded", kind: "message", T: () => Int32Value },
            { no: 6, name: "assists", kind: "message", T: () => Int32Value }
        ]);
    }
    create(value?: PartialMessage<PlayerStats>): PlayerStats {
        const message = { playerId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 player_id */ 1:
                    message.playerId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Int32Value shots_total */ 2:
                    message.shotsTotal = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.shotsTotal);
                    break;
                case /* google.protobuf.Int32Value shots_on_goal */ 3:
                    message.shotsOnGoal = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.shotsOnGoal);
                    break;
                case /* google.protobuf.Int32Value goals_scored */ 4:
                    message.goalsScored = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.goalsScored);
                    break;
                case /* google.protobuf.Int32Value goals_conceded */ 5:
                    message.goalsConceded = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.goalsConceded);
                    break;
                case /* google.protobuf.Int32Value assists */ 6:
                    message.assists = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.assists);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 player_id = 1; */
        if (message.playerId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.playerId);
        /* google.protobuf.Int32Value shots_total = 2; */
        if (message.shotsTotal)
            Int32Value.internalBinaryWrite(message.shotsTotal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value shots_on_goal = 3; */
        if (message.shotsOnGoal)
            Int32Value.internalBinaryWrite(message.shotsOnGoal, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value goals_scored = 4; */
        if (message.goalsScored)
            Int32Value.internalBinaryWrite(message.goalsScored, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value goals_conceded = 5; */
        if (message.goalsConceded)
            Int32Value.internalBinaryWrite(message.goalsConceded, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value assists = 6; */
        if (message.assists)
            Int32Value.internalBinaryWrite(message.assists, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.PlayerStats
 */
export const PlayerStats = new PlayerStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Lineup$Type extends MessageType<Lineup> {
    constructor() {
        super("statistico.Lineup", [
            { no: 1, name: "start", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LineupPlayer },
            { no: 2, name: "bench", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LineupPlayer }
        ]);
    }
    create(value?: PartialMessage<Lineup>): Lineup {
        const message = { start: [], bench: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Lineup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Lineup): Lineup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated statistico.LineupPlayer start */ 1:
                    message.start.push(LineupPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated statistico.LineupPlayer bench */ 2:
                    message.bench.push(LineupPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Lineup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated statistico.LineupPlayer start = 1; */
        for (let i = 0; i < message.start.length; i++)
            LineupPlayer.internalBinaryWrite(message.start[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated statistico.LineupPlayer bench = 2; */
        for (let i = 0; i < message.bench.length; i++)
            LineupPlayer.internalBinaryWrite(message.bench[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Lineup
 */
export const Lineup = new Lineup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LineupPlayer$Type extends MessageType<LineupPlayer> {
    constructor() {
        super("statistico.LineupPlayer", [
            { no: 1, name: "player_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "formation_position", kind: "message", T: () => UInt32Value },
            { no: 4, name: "is_substitute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LineupPlayer>): LineupPlayer {
        const message = { playerId: 0n, position: "", isSubstitute: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LineupPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LineupPlayer): LineupPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 player_id */ 1:
                    message.playerId = reader.uint64().toBigInt();
                    break;
                case /* string position */ 2:
                    message.position = reader.string();
                    break;
                case /* google.protobuf.UInt32Value formation_position */ 3:
                    message.formationPosition = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.formationPosition);
                    break;
                case /* bool is_substitute */ 4:
                    message.isSubstitute = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LineupPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 player_id = 1; */
        if (message.playerId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.playerId);
        /* string position = 2; */
        if (message.position !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.position);
        /* google.protobuf.UInt32Value formation_position = 3; */
        if (message.formationPosition)
            UInt32Value.internalBinaryWrite(message.formationPosition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool is_substitute = 4; */
        if (message.isSubstitute !== false)
            writer.tag(4, WireType.Varint).bool(message.isSubstitute);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.LineupPlayer
 */
export const LineupPlayer = new LineupPlayer$Type();
/**
 * @generated ServiceType for protobuf service statistico.PlayerStatsService
 */
export const PlayerStatsService = new ServiceType("statistico.PlayerStatsService", [
    { name: "GetPlayerStatsForFixture", options: {}, I: FixtureRequest, O: PlayerStatsResponse },
    { name: "GetLineUpForFixture", options: {}, I: FixtureRequest, O: LineupResponse },
    { name: "GetTeamSeasonPlayerStats", serverStreaming: true, options: {}, I: TeamSeasonPlayStatsRequest, O: PlayerStats }
]);
