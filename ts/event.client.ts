// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "event.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventService } from "./event";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FixtureEventsResponse } from "./event";
import type { FixtureRequest } from "./requests";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.EventService
 */
export interface IEventServiceClient {
    /**
     * @generated from protobuf rpc: FixtureEvents(statistico.FixtureRequest) returns (statistico.FixtureEventsResponse);
     */
    fixtureEvents(input: FixtureRequest, options?: RpcOptions): UnaryCall<FixtureRequest, FixtureEventsResponse>;
}
/**
 * @generated from protobuf service statistico.EventService
 */
export class EventServiceClient implements IEventServiceClient, ServiceInfo {
    typeName = EventService.typeName;
    methods = EventService.methods;
    options = EventService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FixtureEvents(statistico.FixtureRequest) returns (statistico.FixtureEventsResponse);
     */
    fixtureEvents(input: FixtureRequest, options?: RpcOptions): UnaryCall<FixtureRequest, FixtureEventsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FixtureRequest, FixtureEventsResponse>("unary", this._transport, method, opt, input);
    }
}
