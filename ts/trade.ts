// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "trade.proto" (package "statistico", syntax proto3)
// tslint:disable
import { SearchTradesRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TradeResultEnum } from "./enum";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message statistico.Trade
 */
export interface Trade {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string strategy_id = 2;
     */
    strategyId: string;
    /**
     * @generated from protobuf field: string exchange = 3;
     */
    exchange: string;
    /**
     * @generated from protobuf field: string exchange_ref = 4;
     */
    exchangeRef: string;
    /**
     * @generated from protobuf field: string market = 5;
     */
    market: string;
    /**
     * @generated from protobuf field: string runner = 6;
     */
    runner: string;
    /**
     * @generated from protobuf field: float exchange_price = 7;
     */
    exchangePrice: number;
    /**
     * @generated from protobuf field: float statistico_price = 8;
     */
    statisticoPrice: number;
    /**
     * @generated from protobuf field: float stake = 9;
     */
    stake: number;
    /**
     * @generated from protobuf field: uint64 event_id = 10;
     */
    eventId: bigint;
    /**
     * @generated from protobuf field: uint64 competition_id = 11;
     */
    competitionId: bigint;
    /**
     * @generated from protobuf field: uint64 season_id = 12;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp event_date = 13;
     */
    eventDate?: Timestamp;
    /**
     * @generated from protobuf field: statistico.TradeResultEnum result = 14;
     */
    result: TradeResultEnum;
    /**
     * @generated from protobuf field: uint64 created_at = 15;
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: uint64 updated_at = 16;
     */
    updatedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Trade$Type extends MessageType<Trade> {
    constructor() {
        super("statistico.Trade", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "strategy_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "exchange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "exchange_ref", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "market", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "runner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "exchange_price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "statistico_price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "stake", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "competition_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "event_date", kind: "message", T: () => Timestamp },
            { no: 14, name: "result", kind: "enum", T: () => ["statistico.TradeResultEnum", TradeResultEnum] },
            { no: 15, name: "created_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "updated_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Trade>): Trade {
        const message = { id: "", strategyId: "", exchange: "", exchangeRef: "", market: "", runner: "", exchangePrice: 0, statisticoPrice: 0, stake: 0, eventId: 0n, competitionId: 0n, seasonId: 0n, result: 0, createdAt: 0n, updatedAt: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Trade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Trade): Trade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string strategy_id */ 2:
                    message.strategyId = reader.string();
                    break;
                case /* string exchange */ 3:
                    message.exchange = reader.string();
                    break;
                case /* string exchange_ref */ 4:
                    message.exchangeRef = reader.string();
                    break;
                case /* string market */ 5:
                    message.market = reader.string();
                    break;
                case /* string runner */ 6:
                    message.runner = reader.string();
                    break;
                case /* float exchange_price */ 7:
                    message.exchangePrice = reader.float();
                    break;
                case /* float statistico_price */ 8:
                    message.statisticoPrice = reader.float();
                    break;
                case /* float stake */ 9:
                    message.stake = reader.float();
                    break;
                case /* uint64 event_id */ 10:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                case /* uint64 competition_id */ 11:
                    message.competitionId = reader.uint64().toBigInt();
                    break;
                case /* uint64 season_id */ 12:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp event_date */ 13:
                    message.eventDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.eventDate);
                    break;
                case /* statistico.TradeResultEnum result */ 14:
                    message.result = reader.int32();
                    break;
                case /* uint64 created_at */ 15:
                    message.createdAt = reader.uint64().toBigInt();
                    break;
                case /* uint64 updated_at */ 16:
                    message.updatedAt = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Trade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string strategy_id = 2; */
        if (message.strategyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.strategyId);
        /* string exchange = 3; */
        if (message.exchange !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.exchange);
        /* string exchange_ref = 4; */
        if (message.exchangeRef !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.exchangeRef);
        /* string market = 5; */
        if (message.market !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.market);
        /* string runner = 6; */
        if (message.runner !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.runner);
        /* float exchange_price = 7; */
        if (message.exchangePrice !== 0)
            writer.tag(7, WireType.Bit32).float(message.exchangePrice);
        /* float statistico_price = 8; */
        if (message.statisticoPrice !== 0)
            writer.tag(8, WireType.Bit32).float(message.statisticoPrice);
        /* float stake = 9; */
        if (message.stake !== 0)
            writer.tag(9, WireType.Bit32).float(message.stake);
        /* uint64 event_id = 10; */
        if (message.eventId !== 0n)
            writer.tag(10, WireType.Varint).uint64(message.eventId);
        /* uint64 competition_id = 11; */
        if (message.competitionId !== 0n)
            writer.tag(11, WireType.Varint).uint64(message.competitionId);
        /* uint64 season_id = 12; */
        if (message.seasonId !== 0n)
            writer.tag(12, WireType.Varint).uint64(message.seasonId);
        /* google.protobuf.Timestamp event_date = 13; */
        if (message.eventDate)
            Timestamp.internalBinaryWrite(message.eventDate, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* statistico.TradeResultEnum result = 14; */
        if (message.result !== 0)
            writer.tag(14, WireType.Varint).int32(message.result);
        /* uint64 created_at = 15; */
        if (message.createdAt !== 0n)
            writer.tag(15, WireType.Varint).uint64(message.createdAt);
        /* uint64 updated_at = 16; */
        if (message.updatedAt !== 0n)
            writer.tag(16, WireType.Varint).uint64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Trade
 */
export const Trade = new Trade$Type();
/**
 * @generated ServiceType for protobuf service statistico.TradeService
 */
export const TradeService = new ServiceType("statistico.TradeService", [
    { name: "SearchTrades", serverStreaming: true, options: {}, I: SearchTradesRequest, O: Trade }
]);
