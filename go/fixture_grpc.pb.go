// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: fixture.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FixtureServiceClient interface {
	ListSeasonFixtures(ctx context.Context, in *SeasonFixtureRequest, opts ...grpc.CallOption) (FixtureService_ListSeasonFixturesClient, error)
	FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error)
	Search(ctx context.Context, in *FixtureSearchRequest, opts ...grpc.CallOption) (FixtureService_SearchClient, error)
}

type fixtureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixtureServiceClient(cc grpc.ClientConnInterface) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) ListSeasonFixtures(ctx context.Context, in *SeasonFixtureRequest, opts ...grpc.CallOption) (FixtureService_ListSeasonFixturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FixtureService_ServiceDesc.Streams[0], "/statistico.FixtureService/ListSeasonFixtures", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceListSeasonFixturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FixtureService_ListSeasonFixturesClient interface {
	Recv() (*Fixture, error)
	grpc.ClientStream
}

type fixtureServiceListSeasonFixturesClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceListSeasonFixturesClient) Recv() (*Fixture, error) {
	m := new(Fixture)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fixtureServiceClient) FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error) {
	out := new(Fixture)
	err := c.cc.Invoke(ctx, "/statistico.FixtureService/FixtureByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) Search(ctx context.Context, in *FixtureSearchRequest, opts ...grpc.CallOption) (FixtureService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FixtureService_ServiceDesc.Streams[1], "/statistico.FixtureService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FixtureService_SearchClient interface {
	Recv() (*Fixture, error)
	grpc.ClientStream
}

type fixtureServiceSearchClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceSearchClient) Recv() (*Fixture, error) {
	m := new(Fixture)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FixtureServiceServer is the server API for FixtureService service.
// All implementations must embed UnimplementedFixtureServiceServer
// for forward compatibility
type FixtureServiceServer interface {
	ListSeasonFixtures(*SeasonFixtureRequest, FixtureService_ListSeasonFixturesServer) error
	FixtureByID(context.Context, *FixtureRequest) (*Fixture, error)
	Search(*FixtureSearchRequest, FixtureService_SearchServer) error
	mustEmbedUnimplementedFixtureServiceServer()
}

// UnimplementedFixtureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (UnimplementedFixtureServiceServer) ListSeasonFixtures(*SeasonFixtureRequest, FixtureService_ListSeasonFixturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSeasonFixtures not implemented")
}
func (UnimplementedFixtureServiceServer) FixtureByID(context.Context, *FixtureRequest) (*Fixture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixtureByID not implemented")
}
func (UnimplementedFixtureServiceServer) Search(*FixtureSearchRequest, FixtureService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFixtureServiceServer) mustEmbedUnimplementedFixtureServiceServer() {}

// UnsafeFixtureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FixtureServiceServer will
// result in compilation errors.
type UnsafeFixtureServiceServer interface {
	mustEmbedUnimplementedFixtureServiceServer()
}

func RegisterFixtureServiceServer(s grpc.ServiceRegistrar, srv FixtureServiceServer) {
	s.RegisterService(&FixtureService_ServiceDesc, srv)
}

func _FixtureService_ListSeasonFixtures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeasonFixtureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).ListSeasonFixtures(m, &fixtureServiceListSeasonFixturesServer{stream})
}

type FixtureService_ListSeasonFixturesServer interface {
	Send(*Fixture) error
	grpc.ServerStream
}

type fixtureServiceListSeasonFixturesServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceListSeasonFixturesServer) Send(m *Fixture) error {
	return x.ServerStream.SendMsg(m)
}

func _FixtureService_FixtureByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).FixtureByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistico.FixtureService/FixtureByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).FixtureByID(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FixtureSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).Search(m, &fixtureServiceSearchServer{stream})
}

type FixtureService_SearchServer interface {
	Send(*Fixture) error
	grpc.ServerStream
}

type fixtureServiceSearchServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceSearchServer) Send(m *Fixture) error {
	return x.ServerStream.SendMsg(m)
}

// FixtureService_ServiceDesc is the grpc.ServiceDesc for FixtureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FixtureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FixtureByID",
			Handler:    _FixtureService_FixtureByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSeasonFixtures",
			Handler:       _FixtureService_ListSeasonFixtures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _FixtureService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fixture.proto",
}
