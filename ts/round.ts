/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: round.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace statistico {
    export class Round extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            season_id?: number;
            start_date?: string;
            end_date?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_date() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set end_date(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            season_id?: number;
            start_date?: string;
            end_date?: string;
        }): Round {
            const message = new Round({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_date != null) {
                message.end_date = data.end_date;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                season_id?: number;
                start_date?: string;
                end_date?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_date != null) {
                data.end_date = this.end_date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.season_id != 0)
                writer.writeUint64(3, this.season_id);
            if (this.start_date.length)
                writer.writeString(4, this.start_date);
            if (this.end_date.length)
                writer.writeString(5, this.end_date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Round {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Round();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.season_id = reader.readUint64();
                        break;
                    case 4:
                        message.start_date = reader.readString();
                        break;
                    case 5:
                        message.end_date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Round {
            return Round.deserialize(bytes);
        }
    }
}
