/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace statistico {
    export class Date extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            utc?: number;
            rfc?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("utc" in data && data.utc != undefined) {
                    this.utc = data.utc;
                }
                if ("rfc" in data && data.rfc != undefined) {
                    this.rfc = data.rfc;
                }
            }
        }
        get utc() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set utc(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rfc() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set rfc(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            utc?: number;
            rfc?: string;
        }): Date {
            const message = new Date({});
            if (data.utc != null) {
                message.utc = data.utc;
            }
            if (data.rfc != null) {
                message.rfc = data.rfc;
            }
            return message;
        }
        toObject() {
            const data: {
                utc?: number;
                rfc?: string;
            } = {};
            if (this.utc != null) {
                data.utc = this.utc;
            }
            if (this.rfc != null) {
                data.rfc = this.rfc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.utc != 0)
                writer.writeInt64(1, this.utc);
            if (this.rfc.length)
                writer.writeString(2, this.rfc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Date {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Date();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.utc = reader.readInt64();
                        break;
                    case 2:
                        message.rfc = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Date {
            return Date.deserialize(bytes);
        }
    }
    export class Odds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            price?: number;
            selection?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("selection" in data && data.selection != undefined) {
                    this.selection = data.selection;
                }
            }
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get selection() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set selection(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            price?: number;
            selection?: string;
        }): Odds {
            const message = new Odds({});
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.selection != null) {
                message.selection = data.selection;
            }
            return message;
        }
        toObject() {
            const data: {
                price?: number;
                selection?: string;
            } = {};
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.selection != null) {
                data.selection = this.selection;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.price != 0)
                writer.writeFloat(1, this.price);
            if (this.selection.length)
                writer.writeString(2, this.selection);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Odds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Odds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.price = reader.readFloat();
                        break;
                    case 2:
                        message.selection = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Odds {
            return Odds.deserialize(bytes);
        }
    }
}
