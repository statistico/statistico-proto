// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonServiceClient interface {
	GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForCompetitionClient, error)
	GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForTeamClient, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForCompetitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeasonService_ServiceDesc.Streams[0], "/statistico.SeasonService/GetSeasonsForCompetition", opts...)
	if err != nil {
		return nil, err
	}
	x := &seasonServiceGetSeasonsForCompetitionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeasonService_GetSeasonsForCompetitionClient interface {
	Recv() (*Season, error)
	grpc.ClientStream
}

type seasonServiceGetSeasonsForCompetitionClient struct {
	grpc.ClientStream
}

func (x *seasonServiceGetSeasonsForCompetitionClient) Recv() (*Season, error) {
	m := new(Season)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seasonServiceClient) GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeasonService_ServiceDesc.Streams[1], "/statistico.SeasonService/GetSeasonsForTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &seasonServiceGetSeasonsForTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeasonService_GetSeasonsForTeamClient interface {
	Recv() (*Season, error)
	grpc.ClientStream
}

type seasonServiceGetSeasonsForTeamClient struct {
	grpc.ClientStream
}

func (x *seasonServiceGetSeasonsForTeamClient) Recv() (*Season, error) {
	m := new(Season)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeasonServiceServer is the server API for SeasonService service.
// All implementations must embed UnimplementedSeasonServiceServer
// for forward compatibility
type SeasonServiceServer interface {
	GetSeasonsForCompetition(*SeasonCompetitionRequest, SeasonService_GetSeasonsForCompetitionServer) error
	GetSeasonsForTeam(*TeamSeasonsRequest, SeasonService_GetSeasonsForTeamServer) error
	mustEmbedUnimplementedSeasonServiceServer()
}

// UnimplementedSeasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeasonServiceServer struct {
}

func (UnimplementedSeasonServiceServer) GetSeasonsForCompetition(*SeasonCompetitionRequest, SeasonService_GetSeasonsForCompetitionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSeasonsForCompetition not implemented")
}
func (UnimplementedSeasonServiceServer) GetSeasonsForTeam(*TeamSeasonsRequest, SeasonService_GetSeasonsForTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSeasonsForTeam not implemented")
}
func (UnimplementedSeasonServiceServer) mustEmbedUnimplementedSeasonServiceServer() {}

// UnsafeSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonServiceServer will
// result in compilation errors.
type UnsafeSeasonServiceServer interface {
	mustEmbedUnimplementedSeasonServiceServer()
}

func RegisterSeasonServiceServer(s grpc.ServiceRegistrar, srv SeasonServiceServer) {
	s.RegisterService(&SeasonService_ServiceDesc, srv)
}

func _SeasonService_GetSeasonsForCompetition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeasonCompetitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeasonServiceServer).GetSeasonsForCompetition(m, &seasonServiceGetSeasonsForCompetitionServer{stream})
}

type SeasonService_GetSeasonsForCompetitionServer interface {
	Send(*Season) error
	grpc.ServerStream
}

type seasonServiceGetSeasonsForCompetitionServer struct {
	grpc.ServerStream
}

func (x *seasonServiceGetSeasonsForCompetitionServer) Send(m *Season) error {
	return x.ServerStream.SendMsg(m)
}

func _SeasonService_GetSeasonsForTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeamSeasonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeasonServiceServer).GetSeasonsForTeam(m, &seasonServiceGetSeasonsForTeamServer{stream})
}

type SeasonService_GetSeasonsForTeamServer interface {
	Send(*Season) error
	grpc.ServerStream
}

type seasonServiceGetSeasonsForTeamServer struct {
	grpc.ServerStream
}

func (x *seasonServiceGetSeasonsForTeamServer) Send(m *Season) error {
	return x.ServerStream.SendMsg(m)
}

// SeasonService_ServiceDesc is the grpc.ServiceDesc for SeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeasonsForCompetition",
			Handler:       _SeasonService_GetSeasonsForCompetition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSeasonsForTeam",
			Handler:       _SeasonService_GetSeasonsForTeam_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "season.proto",
}
