// source: performance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var team_pb = require('./team_pb.js');
goog.object.extend(proto, team_pb);
goog.exportSymbol('proto.statistico.TeamStatPerformanceRequest', null, global);
goog.exportSymbol('proto.statistico.TeamStatResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.TeamStatPerformanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.statistico.TeamStatPerformanceRequest.repeatedFields_, null);
};
goog.inherits(proto.statistico.TeamStatPerformanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.statistico.TeamStatPerformanceRequest.displayName = 'proto.statistico.TeamStatPerformanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.TeamStatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.statistico.TeamStatResponse.repeatedFields_, null);
};
goog.inherits(proto.statistico.TeamStatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.statistico.TeamStatResponse.displayName = 'proto.statistico.TeamStatResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.statistico.TeamStatPerformanceRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.TeamStatPerformanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.TeamStatPerformanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.TeamStatPerformanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, ""),
    games: jspb.Message.getFieldWithDefault(msg, 2, 0),
    measure: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metric: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seasonsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    stat: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    venue: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.TeamStatPerformanceRequest}
 */
proto.statistico.TeamStatPerformanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.TeamStatPerformanceRequest;
  return proto.statistico.TeamStatPerformanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.TeamStatPerformanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.TeamStatPerformanceRequest}
 */
proto.statistico.TeamStatPerformanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeasure(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetric(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSeasons(values[i]);
      }
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStat(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.TeamStatPerformanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.TeamStatPerformanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.TeamStatPerformanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGames();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMeasure();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetric();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeasonsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
  f = message.getStat();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getVenue();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 games = 2;
 * @return {number}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getGames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setGames = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string measure = 3;
 * @return {string}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getMeasure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setMeasure = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string metric = 4;
 * @return {string}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setMetric = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated uint64 seasons = 5;
 * @return {!Array<number>}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getSeasonsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setSeasonsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.addSeasons = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.clearSeasonsList = function() {
  return this.setSeasonsList([]);
};


/**
 * optional string stat = 6;
 * @return {string}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getStat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setStat = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional float value = 7;
 * @return {number}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string venue = 8;
 * @return {string}
 */
proto.statistico.TeamStatPerformanceRequest.prototype.getVenue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.statistico.TeamStatPerformanceRequest} returns this
 */
proto.statistico.TeamStatPerformanceRequest.prototype.setVenue = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.statistico.TeamStatResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.TeamStatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.TeamStatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.TeamStatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.TeamStatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamsList: jspb.Message.toObjectList(msg.getTeamsList(),
    team_pb.Team.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.TeamStatResponse}
 */
proto.statistico.TeamStatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.TeamStatResponse;
  return proto.statistico.TeamStatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.TeamStatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.TeamStatResponse}
 */
proto.statistico.TeamStatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new team_pb.Team;
      reader.readMessage(value,team_pb.Team.deserializeBinaryFromReader);
      msg.addTeams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.TeamStatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.TeamStatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.TeamStatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.TeamStatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      team_pb.Team.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Team teams = 1;
 * @return {!Array<!proto.statistico.Team>}
 */
proto.statistico.TeamStatResponse.prototype.getTeamsList = function() {
  return /** @type{!Array<!proto.statistico.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, team_pb.Team, 1));
};


/**
 * @param {!Array<!proto.statistico.Team>} value
 * @return {!proto.statistico.TeamStatResponse} returns this
*/
proto.statistico.TeamStatResponse.prototype.setTeamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.statistico.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.statistico.Team}
 */
proto.statistico.TeamStatResponse.prototype.addTeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.statistico.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.statistico.TeamStatResponse} returns this
 */
proto.statistico.TeamStatResponse.prototype.clearTeamsList = function() {
  return this.setTeamsList([]);
};


goog.object.extend(exports, proto.statistico);
