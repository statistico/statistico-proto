// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "fixture.proto" (package "statistico", syntax proto3)
// tslint:disable
import { FixtureSearchRequest } from "./requests";
import { FixtureRequest } from "./requests";
import { SeasonFixtureRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Date } from "./common";
import { Venue } from "./venue";
import { Round } from "./round";
import { Team } from "./team";
import { Season } from "./season";
import { Competition } from "./competition";
/**
 * @generated from protobuf message statistico.Fixture
 */
export interface Fixture {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: statistico.Competition competition = 2;
     */
    competition?: Competition;
    /**
     * @generated from protobuf field: statistico.Season season = 3;
     */
    season?: Season;
    /**
     * @generated from protobuf field: statistico.Team home_team = 4;
     */
    homeTeam?: Team;
    /**
     * @generated from protobuf field: statistico.Team away_team = 5;
     */
    awayTeam?: Team;
    /**
     * @generated from protobuf field: statistico.Round round = 6;
     */
    round?: Round;
    /**
     * @generated from protobuf field: statistico.Venue venue = 7;
     */
    venue?: Venue;
    /**
     * @generated from protobuf field: statistico.Date date_time = 8;
     */
    dateTime?: Date;
}
// @generated message type with reflection information, may provide speed optimized methods
class Fixture$Type extends MessageType<Fixture> {
    constructor() {
        super("statistico.Fixture", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "competition", kind: "message", T: () => Competition },
            { no: 3, name: "season", kind: "message", T: () => Season },
            { no: 4, name: "home_team", kind: "message", T: () => Team },
            { no: 5, name: "away_team", kind: "message", T: () => Team },
            { no: 6, name: "round", kind: "message", T: () => Round },
            { no: 7, name: "venue", kind: "message", T: () => Venue },
            { no: 8, name: "date_time", kind: "message", T: () => Date }
        ]);
    }
    create(value?: PartialMessage<Fixture>): Fixture {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Fixture>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Fixture): Fixture {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* statistico.Competition competition */ 2:
                    message.competition = Competition.internalBinaryRead(reader, reader.uint32(), options, message.competition);
                    break;
                case /* statistico.Season season */ 3:
                    message.season = Season.internalBinaryRead(reader, reader.uint32(), options, message.season);
                    break;
                case /* statistico.Team home_team */ 4:
                    message.homeTeam = Team.internalBinaryRead(reader, reader.uint32(), options, message.homeTeam);
                    break;
                case /* statistico.Team away_team */ 5:
                    message.awayTeam = Team.internalBinaryRead(reader, reader.uint32(), options, message.awayTeam);
                    break;
                case /* statistico.Round round */ 6:
                    message.round = Round.internalBinaryRead(reader, reader.uint32(), options, message.round);
                    break;
                case /* statistico.Venue venue */ 7:
                    message.venue = Venue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                case /* statistico.Date date_time */ 8:
                    message.dateTime = Date.internalBinaryRead(reader, reader.uint32(), options, message.dateTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Fixture, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* statistico.Competition competition = 2; */
        if (message.competition)
            Competition.internalBinaryWrite(message.competition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Season season = 3; */
        if (message.season)
            Season.internalBinaryWrite(message.season, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Team home_team = 4; */
        if (message.homeTeam)
            Team.internalBinaryWrite(message.homeTeam, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Team away_team = 5; */
        if (message.awayTeam)
            Team.internalBinaryWrite(message.awayTeam, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Round round = 6; */
        if (message.round)
            Round.internalBinaryWrite(message.round, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Venue venue = 7; */
        if (message.venue)
            Venue.internalBinaryWrite(message.venue, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Date date_time = 8; */
        if (message.dateTime)
            Date.internalBinaryWrite(message.dateTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Fixture
 */
export const Fixture = new Fixture$Type();
/**
 * @generated ServiceType for protobuf service statistico.FixtureService
 */
export const FixtureService = new ServiceType("statistico.FixtureService", [
    { name: "ListSeasonFixtures", serverStreaming: true, options: {}, I: SeasonFixtureRequest, O: Fixture },
    { name: "FixtureByID", options: {}, I: FixtureRequest, O: Fixture },
    { name: "Search", serverStreaming: true, options: {}, I: FixtureSearchRequest, O: Fixture }
]);
