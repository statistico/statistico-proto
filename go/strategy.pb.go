// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strategy.proto

package statistico

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BuildStrategyRequest struct {
	Market               string               `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Runner               string               `protobuf:"bytes,2,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds              *wrappers.FloatValue `protobuf:"bytes,3,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds              *wrappers.FloatValue `protobuf:"bytes,4,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	Line                 string               `protobuf:"bytes,5,opt,name=line,proto3" json:"line,omitempty"`
	Side                 SideEnum             `protobuf:"varint,6,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	CompetitionIds       []uint64             `protobuf:"varint,7,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	SeasonIds            []uint64             `protobuf:"varint,8,rep,packed,name=season_ids,json=seasonIds,proto3" json:"season_ids,omitempty"`
	DateFrom             *timestamp.Timestamp `protobuf:"bytes,9,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo               *timestamp.Timestamp `protobuf:"bytes,10,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	ResultFilters        []*ResultFilter      `protobuf:"bytes,11,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters          []*StatFilter        `protobuf:"bytes,12,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BuildStrategyRequest) Reset()         { *m = BuildStrategyRequest{} }
func (m *BuildStrategyRequest) String() string { return proto.CompactTextString(m) }
func (*BuildStrategyRequest) ProtoMessage()    {}
func (*BuildStrategyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{0}
}

func (m *BuildStrategyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildStrategyRequest.Unmarshal(m, b)
}
func (m *BuildStrategyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildStrategyRequest.Marshal(b, m, deterministic)
}
func (m *BuildStrategyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildStrategyRequest.Merge(m, src)
}
func (m *BuildStrategyRequest) XXX_Size() int {
	return xxx_messageInfo_BuildStrategyRequest.Size(m)
}
func (m *BuildStrategyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildStrategyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildStrategyRequest proto.InternalMessageInfo

func (m *BuildStrategyRequest) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *BuildStrategyRequest) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *BuildStrategyRequest) GetMinOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MinOdds
	}
	return nil
}

func (m *BuildStrategyRequest) GetMaxOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MaxOdds
	}
	return nil
}

func (m *BuildStrategyRequest) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *BuildStrategyRequest) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *BuildStrategyRequest) GetCompetitionIds() []uint64 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *BuildStrategyRequest) GetSeasonIds() []uint64 {
	if m != nil {
		return m.SeasonIds
	}
	return nil
}

func (m *BuildStrategyRequest) GetDateFrom() *timestamp.Timestamp {
	if m != nil {
		return m.DateFrom
	}
	return nil
}

func (m *BuildStrategyRequest) GetDateTo() *timestamp.Timestamp {
	if m != nil {
		return m.DateTo
	}
	return nil
}

func (m *BuildStrategyRequest) GetResultFilters() []*ResultFilter {
	if m != nil {
		return m.ResultFilters
	}
	return nil
}

func (m *BuildStrategyRequest) GetStatFilters() []*StatFilter {
	if m != nil {
		return m.StatFilters
	}
	return nil
}

type ListUserStrategiesRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUserStrategiesRequest) Reset()         { *m = ListUserStrategiesRequest{} }
func (m *ListUserStrategiesRequest) String() string { return proto.CompactTextString(m) }
func (*ListUserStrategiesRequest) ProtoMessage()    {}
func (*ListUserStrategiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{1}
}

func (m *ListUserStrategiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUserStrategiesRequest.Unmarshal(m, b)
}
func (m *ListUserStrategiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUserStrategiesRequest.Marshal(b, m, deterministic)
}
func (m *ListUserStrategiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserStrategiesRequest.Merge(m, src)
}
func (m *ListUserStrategiesRequest) XXX_Size() int {
	return xxx_messageInfo_ListUserStrategiesRequest.Size(m)
}
func (m *ListUserStrategiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserStrategiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserStrategiesRequest proto.InternalMessageInfo

func (m *ListUserStrategiesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SaveStrategyRequest struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserId               string               `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market               string               `protobuf:"bytes,4,opt,name=market,proto3" json:"market,omitempty"`
	Runner               string               `protobuf:"bytes,5,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds              *wrappers.FloatValue `protobuf:"bytes,6,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds              *wrappers.FloatValue `protobuf:"bytes,7,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	Side                 SideEnum             `protobuf:"varint,8,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	CompetitionIds       []uint64             `protobuf:"varint,9,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	ResultFilters        []*ResultFilter      `protobuf:"bytes,10,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters          []*StatFilter        `protobuf:"bytes,11,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
	Visibility           VisibilityEnum       `protobuf:"varint,12,opt,name=visibility,proto3,enum=statistico.VisibilityEnum" json:"visibility,omitempty"`
	StakingPlan          *StakingPlan         `protobuf:"bytes,13,opt,name=staking_plan,json=stakingPlan,proto3" json:"staking_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SaveStrategyRequest) Reset()         { *m = SaveStrategyRequest{} }
func (m *SaveStrategyRequest) String() string { return proto.CompactTextString(m) }
func (*SaveStrategyRequest) ProtoMessage()    {}
func (*SaveStrategyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{2}
}

func (m *SaveStrategyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveStrategyRequest.Unmarshal(m, b)
}
func (m *SaveStrategyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveStrategyRequest.Marshal(b, m, deterministic)
}
func (m *SaveStrategyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveStrategyRequest.Merge(m, src)
}
func (m *SaveStrategyRequest) XXX_Size() int {
	return xxx_messageInfo_SaveStrategyRequest.Size(m)
}
func (m *SaveStrategyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveStrategyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveStrategyRequest proto.InternalMessageInfo

func (m *SaveStrategyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaveStrategyRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SaveStrategyRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveStrategyRequest) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *SaveStrategyRequest) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *SaveStrategyRequest) GetMinOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MinOdds
	}
	return nil
}

func (m *SaveStrategyRequest) GetMaxOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MaxOdds
	}
	return nil
}

func (m *SaveStrategyRequest) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *SaveStrategyRequest) GetCompetitionIds() []uint64 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *SaveStrategyRequest) GetResultFilters() []*ResultFilter {
	if m != nil {
		return m.ResultFilters
	}
	return nil
}

func (m *SaveStrategyRequest) GetStatFilters() []*StatFilter {
	if m != nil {
		return m.StatFilters
	}
	return nil
}

func (m *SaveStrategyRequest) GetVisibility() VisibilityEnum {
	if m != nil {
		return m.Visibility
	}
	return VisibilityEnum_PUBLIC
}

func (m *SaveStrategyRequest) GetStakingPlan() *StakingPlan {
	if m != nil {
		return m.StakingPlan
	}
	return nil
}

type Strategy struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserId               string               `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market               string               `protobuf:"bytes,5,opt,name=market,proto3" json:"market,omitempty"`
	Runner               string               `protobuf:"bytes,6,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds              *wrappers.FloatValue `protobuf:"bytes,7,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds              *wrappers.FloatValue `protobuf:"bytes,8,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	CompetitionIds       []uint64             `protobuf:"varint,9,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	Side                 SideEnum             `protobuf:"varint,10,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	Visibility           VisibilityEnum       `protobuf:"varint,11,opt,name=visibility,proto3,enum=statistico.VisibilityEnum" json:"visibility,omitempty"`
	Status               StrategyStatusEnum   `protobuf:"varint,12,opt,name=status,proto3,enum=statistico.StrategyStatusEnum" json:"status,omitempty"`
	StakingPlan          *StakingPlan         `protobuf:"bytes,13,opt,name=staking_plan,json=stakingPlan,proto3" json:"staking_plan,omitempty"`
	ResultFilters        []*ResultFilter      `protobuf:"bytes,14,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters          []*StatFilter        `protobuf:"bytes,15,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Strategy) Reset()         { *m = Strategy{} }
func (m *Strategy) String() string { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()    {}
func (*Strategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{3}
}

func (m *Strategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Strategy.Unmarshal(m, b)
}
func (m *Strategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Strategy.Marshal(b, m, deterministic)
}
func (m *Strategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategy.Merge(m, src)
}
func (m *Strategy) XXX_Size() int {
	return xxx_messageInfo_Strategy.Size(m)
}
func (m *Strategy) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategy.DiscardUnknown(m)
}

var xxx_messageInfo_Strategy proto.InternalMessageInfo

func (m *Strategy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Strategy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Strategy) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Strategy) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *Strategy) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *Strategy) GetMinOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MinOdds
	}
	return nil
}

func (m *Strategy) GetMaxOdds() *wrappers.FloatValue {
	if m != nil {
		return m.MaxOdds
	}
	return nil
}

func (m *Strategy) GetCompetitionIds() []uint64 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *Strategy) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *Strategy) GetVisibility() VisibilityEnum {
	if m != nil {
		return m.Visibility
	}
	return VisibilityEnum_PUBLIC
}

func (m *Strategy) GetStatus() StrategyStatusEnum {
	if m != nil {
		return m.Status
	}
	return StrategyStatusEnum_ARCHIVED
}

func (m *Strategy) GetStakingPlan() *StakingPlan {
	if m != nil {
		return m.StakingPlan
	}
	return nil
}

func (m *Strategy) GetResultFilters() []*ResultFilter {
	if m != nil {
		return m.ResultFilters
	}
	return nil
}

func (m *Strategy) GetStatFilters() []*StatFilter {
	if m != nil {
		return m.StatFilters
	}
	return nil
}

func (m *Strategy) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Strategy) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type StrategyTrade struct {
	MarketName           string               `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	RunnerName           string               `protobuf:"bytes,2,opt,name=runner_name,json=runnerName,proto3" json:"runner_name,omitempty"`
	RunnerPrice          float32              `protobuf:"fixed32,3,opt,name=runner_price,json=runnerPrice,proto3" json:"runner_price,omitempty"`
	Side                 SideEnum             `protobuf:"varint,4,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	EventId              uint64               `protobuf:"varint,5,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CompetitionId        uint64               `protobuf:"varint,6,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	SeasonId             uint64               `protobuf:"varint,7,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	EventDate            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=event_date,json=eventDate,proto3" json:"event_date,omitempty"`
	Result               TradeResultEnum      `protobuf:"varint,9,opt,name=result,proto3,enum=statistico.TradeResultEnum" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StrategyTrade) Reset()         { *m = StrategyTrade{} }
func (m *StrategyTrade) String() string { return proto.CompactTextString(m) }
func (*StrategyTrade) ProtoMessage()    {}
func (*StrategyTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{4}
}

func (m *StrategyTrade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrategyTrade.Unmarshal(m, b)
}
func (m *StrategyTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrategyTrade.Marshal(b, m, deterministic)
}
func (m *StrategyTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyTrade.Merge(m, src)
}
func (m *StrategyTrade) XXX_Size() int {
	return xxx_messageInfo_StrategyTrade.Size(m)
}
func (m *StrategyTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyTrade.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyTrade proto.InternalMessageInfo

func (m *StrategyTrade) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *StrategyTrade) GetRunnerName() string {
	if m != nil {
		return m.RunnerName
	}
	return ""
}

func (m *StrategyTrade) GetRunnerPrice() float32 {
	if m != nil {
		return m.RunnerPrice
	}
	return 0
}

func (m *StrategyTrade) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *StrategyTrade) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *StrategyTrade) GetCompetitionId() uint64 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *StrategyTrade) GetSeasonId() uint64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *StrategyTrade) GetEventDate() *timestamp.Timestamp {
	if m != nil {
		return m.EventDate
	}
	return nil
}

func (m *StrategyTrade) GetResult() TradeResultEnum {
	if m != nil {
		return m.Result
	}
	return TradeResultEnum_FAIL
}

type StakingPlan struct {
	Name                 StakingPlanEnum `protobuf:"varint,1,opt,name=name,proto3,enum=statistico.StakingPlanEnum" json:"name,omitempty"`
	Value                float32         `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StakingPlan) Reset()         { *m = StakingPlan{} }
func (m *StakingPlan) String() string { return proto.CompactTextString(m) }
func (*StakingPlan) ProtoMessage()    {}
func (*StakingPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{5}
}

func (m *StakingPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StakingPlan.Unmarshal(m, b)
}
func (m *StakingPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StakingPlan.Marshal(b, m, deterministic)
}
func (m *StakingPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingPlan.Merge(m, src)
}
func (m *StakingPlan) XXX_Size() int {
	return xxx_messageInfo_StakingPlan.Size(m)
}
func (m *StakingPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingPlan.DiscardUnknown(m)
}

var xxx_messageInfo_StakingPlan proto.InternalMessageInfo

func (m *StakingPlan) GetName() StakingPlanEnum {
	if m != nil {
		return m.Name
	}
	return StakingPlanEnum_PERCENTAGE
}

func (m *StakingPlan) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*BuildStrategyRequest)(nil), "statistico.BuildStrategyRequest")
	proto.RegisterType((*ListUserStrategiesRequest)(nil), "statistico.ListUserStrategiesRequest")
	proto.RegisterType((*SaveStrategyRequest)(nil), "statistico.SaveStrategyRequest")
	proto.RegisterType((*Strategy)(nil), "statistico.Strategy")
	proto.RegisterType((*StrategyTrade)(nil), "statistico.StrategyTrade")
	proto.RegisterType((*StakingPlan)(nil), "statistico.StakingPlan")
}

func init() { proto.RegisterFile("strategy.proto", fileDescriptor_46ec5ce6dd46feab) }

var fileDescriptor_46ec5ce6dd46feab = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x23, 0x89, 0xfa, 0x1a, 0x4a, 0x72, 0xbb, 0x35, 0x12, 0x5a, 0x46, 0x63, 0x55, 0x40,
	0x50, 0x5d, 0x2a, 0xa7, 0x72, 0x11, 0x20, 0xe9, 0xa1, 0x48, 0xd0, 0xba, 0x30, 0x50, 0xb4, 0x06,
	0xed, 0xe4, 0xd0, 0x8b, 0xb0, 0xd6, 0x6e, 0xd4, 0x45, 0xf8, 0xd5, 0xdd, 0xa5, 0x9a, 0x9c, 0xfb,
	0x2a, 0x7d, 0x9b, 0x3e, 0x4b, 0x5f, 0xa1, 0x08, 0x38, 0x4b, 0xd2, 0x2b, 0x5b, 0x8c, 0xfc, 0x71,
	0xdb, 0x19, 0xfe, 0x67, 0x87, 0x3b, 0xfb, 0x1b, 0x0e, 0x61, 0xa0, 0xb4, 0xa4, 0x9a, 0x2f, 0x3f,
	0x4c, 0x13, 0x19, 0xeb, 0x98, 0x80, 0xd2, 0x54, 0x0b, 0xa5, 0xc5, 0x22, 0x1e, 0x02, 0x8f, 0xd2,
	0xd0, 0xf8, 0x87, 0xbd, 0xb7, 0x22, 0xd0, 0x5c, 0xe6, 0xd6, 0xc1, 0x32, 0x8e, 0x97, 0x01, 0x3f,
	0x44, 0xeb, 0x22, 0x7d, 0x7b, 0xa8, 0x45, 0xc8, 0x95, 0xa6, 0x61, 0x92, 0x0b, 0x1e, 0x5f, 0x15,
	0xfc, 0x25, 0x69, 0x92, 0x70, 0xa9, 0xcc, 0xf3, 0xf1, 0x3f, 0x0e, 0xec, 0xbe, 0x4a, 0x45, 0xc0,
	0xce, 0xf2, 0xf4, 0x3e, 0xff, 0x33, 0xe5, 0x4a, 0x93, 0x87, 0xd0, 0x0a, 0xa9, 0x7c, 0xc7, 0xb5,
	0x57, 0x1b, 0xd5, 0x26, 0x5d, 0x3f, 0xb7, 0x32, 0xbf, 0x4c, 0xa3, 0x88, 0x4b, 0xaf, 0x6e, 0xfc,
	0xc6, 0x22, 0xcf, 0xa0, 0x13, 0x8a, 0x68, 0x1e, 0x33, 0xa6, 0xbc, 0xc6, 0xa8, 0x36, 0x71, 0x67,
	0xfb, 0x53, 0x93, 0x7b, 0x5a, 0xe4, 0x9e, 0x1e, 0x07, 0x31, 0xd5, 0x6f, 0x68, 0x90, 0x72, 0xbf,
	0x1d, 0x8a, 0xe8, 0x37, 0xc6, 0x14, 0xc6, 0xd1, 0xf7, 0x26, 0xce, 0xb9, 0x49, 0x1c, 0x7d, 0x8f,
	0x71, 0x04, 0x9c, 0x40, 0x44, 0xdc, 0x6b, 0xe2, 0x5b, 0xe0, 0x9a, 0x4c, 0xc0, 0x51, 0x82, 0x71,
	0xaf, 0x35, 0xaa, 0x4d, 0x06, 0xb3, 0xdd, 0xe9, 0x65, 0x09, 0xa7, 0x67, 0x82, 0xf1, 0x9f, 0xa2,
	0x34, 0xf4, 0x51, 0x41, 0xbe, 0x86, 0x9d, 0x45, 0x1c, 0x26, 0x5c, 0x0b, 0x2d, 0xe2, 0x68, 0x2e,
	0x98, 0xf2, 0xda, 0xa3, 0xc6, 0xc4, 0xf1, 0x07, 0x96, 0xfb, 0x84, 0x29, 0xf2, 0x25, 0x80, 0xe2,
	0x54, 0xe5, 0x9a, 0x0e, 0x6a, 0xba, 0xc6, 0x73, 0x62, 0xde, 0x9e, 0x51, 0xcd, 0x8f, 0x65, 0x1c,
	0x7a, 0x5d, 0x7c, 0xfb, 0xe1, 0xb5, 0xb7, 0x3f, 0x2f, 0xae, 0xc4, 0x2f, 0xb5, 0x64, 0x06, 0xad,
	0x6c, 0x7d, 0x1e, 0x7b, 0xb0, 0x35, 0x2a, 0x57, 0x92, 0x1f, 0x60, 0x20, 0xb9, 0x4a, 0x03, 0x3d,
	0x37, 0x08, 0x28, 0xcf, 0x1d, 0x35, 0x26, 0xee, 0xcc, 0xb3, 0xcf, 0xe9, 0xa3, 0xe2, 0x18, 0x05,
	0x7e, 0x5f, 0x5a, 0x96, 0x22, 0xcf, 0xa1, 0x97, 0x29, 0xcb, 0xf0, 0x1e, 0x86, 0x3f, 0x5c, 0x2b,
	0x93, 0xa6, 0x45, 0xb0, 0xab, 0xca, 0xb5, 0x1a, 0x7f, 0x07, 0x7b, 0xbf, 0x08, 0xa5, 0x5f, 0x2b,
	0x2e, 0x73, 0x50, 0x04, 0x57, 0x05, 0x2a, 0x8f, 0xa0, 0x9d, 0x2a, 0x2e, 0xe7, 0x82, 0x15, 0xac,
	0x64, 0xe6, 0x09, 0x1b, 0xff, 0xeb, 0xc0, 0x17, 0x67, 0x74, 0xc5, 0xaf, 0xb2, 0x45, 0xc0, 0x89,
	0x68, 0xc8, 0x73, 0x35, 0xae, 0xc9, 0x08, 0x5c, 0xc6, 0xd5, 0x42, 0x8a, 0x24, 0x2b, 0x7d, 0x0e,
	0x97, 0xed, 0xb2, 0xd3, 0x34, 0xec, 0x34, 0x16, 0xaa, 0x4e, 0x05, 0xaa, 0xcd, 0x4a, 0x54, 0x5b,
	0x77, 0x44, 0xb5, 0x7d, 0x0b, 0x54, 0x0b, 0x2c, 0x3b, 0x77, 0xc1, 0xb2, 0xbb, 0x11, 0xcb, 0xeb,
	0x2c, 0xc0, 0xfd, 0x58, 0x70, 0x6f, 0xcc, 0x02, 0x79, 0x01, 0xb0, 0x12, 0x4a, 0x5c, 0x88, 0x40,
	0xe8, 0x0f, 0x5e, 0x0f, 0x0f, 0x35, 0xb4, 0x03, 0xdf, 0x94, 0x4f, 0xf1, 0x68, 0x96, 0x9a, 0xbc,
	0xc0, 0xb4, 0xef, 0x44, 0xb4, 0x9c, 0x27, 0x01, 0x8d, 0xbc, 0x3e, 0x96, 0xf1, 0xd1, 0x95, 0xb4,
	0xd9, 0xf3, 0xd3, 0x80, 0x46, 0x98, 0xb7, 0x30, 0xc6, 0xff, 0x37, 0xa1, 0x53, 0x90, 0x44, 0x06,
	0x50, 0x2f, 0x71, 0xab, 0x0b, 0x56, 0x22, 0x55, 0xaf, 0x46, 0xaa, 0xf1, 0x49, 0xa4, 0x9c, 0x0a,
	0xa4, 0x9a, 0x15, 0x48, 0xb5, 0x2a, 0x91, 0x6a, 0xdf, 0x11, 0xa9, 0xce, 0x2d, 0x90, 0xba, 0x31,
	0x28, 0x05, 0x7b, 0xb0, 0x95, 0xbd, 0xf5, 0x6b, 0x75, 0x6f, 0x75, 0xad, 0xcf, 0xa0, 0x95, 0x09,
	0x53, 0x95, 0xe3, 0xf0, 0x78, 0xfd, 0x42, 0xcd, 0x9d, 0x9d, 0xa1, 0x02, 0x63, 0x73, 0xf5, 0x7d,
	0x70, 0xd8, 0xd0, 0x02, 0x83, 0xfb, 0xb5, 0xc0, 0xce, 0xcd, 0x5b, 0xe0, 0x39, 0xc0, 0x42, 0x72,
	0xaa, 0x39, 0x9b, 0x53, 0xed, 0x7d, 0xb6, 0xf5, 0x13, 0xde, 0xcd, 0xd5, 0x2f, 0x75, 0x16, 0x9a,
	0x26, 0xac, 0x08, 0xfd, 0x7c, 0x7b, 0x68, 0xae, 0x7e, 0xa9, 0xc7, 0xff, 0xd5, 0xa1, 0x5f, 0x14,
	0xf3, 0x5c, 0x52, 0xc6, 0xc9, 0x01, 0xb8, 0x06, 0xcc, 0xb9, 0xf5, 0x3d, 0x05, 0xe3, 0xfa, 0x35,
	0x6b, 0x81, 0x03, 0x70, 0x0d, 0xa1, 0x73, 0xab, 0x3b, 0xc0, 0xb8, 0x50, 0xf0, 0x15, 0xf4, 0x72,
	0x41, 0x22, 0xc5, 0x82, 0x63, 0x93, 0xd4, 0xfd, 0x3c, 0xe8, 0x34, 0x73, 0x95, 0x08, 0x39, 0x5b,
	0x11, 0xda, 0x83, 0x0e, 0x5f, 0xf1, 0x48, 0x67, 0xfd, 0x94, 0xf5, 0x8d, 0xe3, 0xb7, 0xd1, 0x3e,
	0x61, 0xe4, 0x09, 0x0c, 0xd6, 0x81, 0xc5, 0x06, 0x72, 0xfc, 0xfe, 0x1a, 0xaf, 0x64, 0x1f, 0xba,
	0xe5, 0xb8, 0xc5, 0x46, 0x72, 0xfc, 0x4e, 0x31, 0x6d, 0xb3, 0xd2, 0x99, 0xed, 0xb3, 0x82, 0xe4,
	0xed, 0xf2, 0xc9, 0xd2, 0xa1, 0xfa, 0x47, 0xaa, 0x39, 0x39, 0x82, 0x96, 0xb9, 0x7c, 0x9c, 0xd2,
	0x83, 0xd9, 0xbe, 0x7d, 0x0a, 0xac, 0xa5, 0x21, 0xc5, 0xd0, 0x69, 0xa4, 0xe3, 0x73, 0x70, 0x2d,
	0xfa, 0xc8, 0xa1, 0x35, 0xb5, 0xae, 0xec, 0x60, 0xc9, 0x4c, 0x39, 0xf0, 0xfb, 0xb3, 0x0b, 0xcd,
	0x55, 0xd6, 0xb6, 0x58, 0xf6, 0xba, 0x6f, 0x8c, 0xd9, 0xdf, 0x75, 0xd8, 0x29, 0x5b, 0x82, 0xcb,
	0x55, 0x56, 0xe2, 0x53, 0xe8, 0xaf, 0xfd, 0x84, 0x91, 0x91, 0xbd, 0xfb, 0xa6, 0xff, 0xb3, 0xe1,
	0xde, 0xa6, 0x16, 0xc3, 0x93, 0x8c, 0x1f, 0x3c, 0xad, 0x91, 0x9f, 0xa1, 0x67, 0x4f, 0x5e, 0x72,
	0xb0, 0x26, 0xbf, 0x3e, 0x93, 0x87, 0xbb, 0x9b, 0xf6, 0x1b, 0x3f, 0x20, 0xaf, 0x81, 0x5c, 0x9f,
	0xfc, 0xe4, 0x89, 0xad, 0xae, 0xfc, 0x33, 0xa8, 0xda, 0xf4, 0x69, 0xed, 0xd5, 0xd1, 0xef, 0xdf,
	0x2e, 0x85, 0xfe, 0x23, 0xbd, 0x98, 0x2e, 0xe2, 0xf0, 0xf0, 0x52, 0x65, 0x2d, 0xbf, 0xc1, 0x2b,
	0xfd, 0xfe, 0xd2, 0x71, 0xd1, 0x42, 0xcf, 0xd1, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x7a,
	0x35, 0x76, 0x2c, 0x0b, 0x00, 0x00,
}
