/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: team_stats.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./common";
import * as dependency_3 from "./requests";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class TeamStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home_team?: TeamStats;
            away_team?: TeamStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home_team" in data && data.home_team != undefined) {
                    this.home_team = data.home_team;
                }
                if ("away_team" in data && data.away_team != undefined) {
                    this.away_team = data.away_team;
                }
            }
        }
        get home_team() {
            return pb_1.Message.getWrapperField(this, TeamStats, 1) as TeamStats;
        }
        set home_team(value: TeamStats) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_home_team() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get away_team() {
            return pb_1.Message.getWrapperField(this, TeamStats, 2) as TeamStats;
        }
        set away_team(value: TeamStats) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_away_team() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            home_team?: ReturnType<typeof TeamStats.prototype.toObject>;
            away_team?: ReturnType<typeof TeamStats.prototype.toObject>;
        }): TeamStatsResponse {
            const message = new TeamStatsResponse({});
            if (data.home_team != null) {
                message.home_team = TeamStats.fromObject(data.home_team);
            }
            if (data.away_team != null) {
                message.away_team = TeamStats.fromObject(data.away_team);
            }
            return message;
        }
        toObject() {
            const data: {
                home_team?: ReturnType<typeof TeamStats.prototype.toObject>;
                away_team?: ReturnType<typeof TeamStats.prototype.toObject>;
            } = {};
            if (this.home_team != null) {
                data.home_team = this.home_team.toObject();
            }
            if (this.away_team != null) {
                data.away_team = this.away_team.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_home_team)
                writer.writeMessage(1, this.home_team, () => this.home_team.serialize(writer));
            if (this.has_away_team)
                writer.writeMessage(2, this.away_team, () => this.away_team.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.home_team, () => message.home_team = TeamStats.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.away_team, () => message.away_team = TeamStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStatsResponse {
            return TeamStatsResponse.deserialize(bytes);
        }
    }
    export class TeamStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            fixture_id?: number;
            assists?: dependency_1.google.protobuf.Int32Value;
            ball_possession?: dependency_1.google.protobuf.Int32Value;
            ball_safe?: dependency_1.google.protobuf.Int32Value;
            challenges?: dependency_1.google.protobuf.Int32Value;
            corners?: dependency_1.google.protobuf.Int32Value;
            duels_won?: dependency_1.google.protobuf.Int32Value;
            free_kicks?: dependency_1.google.protobuf.Int32Value;
            fouls?: dependency_1.google.protobuf.Int32Value;
            goal_kicks?: dependency_1.google.protobuf.Int32Value;
            hit_woodwork?: dependency_1.google.protobuf.Int32Value;
            injuries?: dependency_1.google.protobuf.Int32Value;
            interceptions?: dependency_1.google.protobuf.Int32Value;
            offsides?: dependency_1.google.protobuf.Int32Value;
            penalties?: dependency_1.google.protobuf.Int32Value;
            saves?: dependency_1.google.protobuf.Int32Value;
            substitutions?: dependency_1.google.protobuf.Int32Value;
            tackles?: dependency_1.google.protobuf.Int32Value;
            team_attacks?: TeamAttacks;
            team_cards?: TeamCards;
            team_crosses?: TeamCrosses;
            team_dribbles?: TeamDribbles;
            team_goals?: TeamGoals;
            team_headers?: TeamHeaders;
            team_passes?: TeamPasses;
            team_shots?: TeamShots;
            throw_ins?: dependency_1.google.protobuf.Int32Value;
            treatments?: dependency_1.google.protobuf.Int32Value;
            created_at?: dependency_2.statistico.Date;
            updated_at?: dependency_2.statistico.Date;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("fixture_id" in data && data.fixture_id != undefined) {
                    this.fixture_id = data.fixture_id;
                }
                if ("assists" in data && data.assists != undefined) {
                    this.assists = data.assists;
                }
                if ("ball_possession" in data && data.ball_possession != undefined) {
                    this.ball_possession = data.ball_possession;
                }
                if ("ball_safe" in data && data.ball_safe != undefined) {
                    this.ball_safe = data.ball_safe;
                }
                if ("challenges" in data && data.challenges != undefined) {
                    this.challenges = data.challenges;
                }
                if ("corners" in data && data.corners != undefined) {
                    this.corners = data.corners;
                }
                if ("duels_won" in data && data.duels_won != undefined) {
                    this.duels_won = data.duels_won;
                }
                if ("free_kicks" in data && data.free_kicks != undefined) {
                    this.free_kicks = data.free_kicks;
                }
                if ("fouls" in data && data.fouls != undefined) {
                    this.fouls = data.fouls;
                }
                if ("goal_kicks" in data && data.goal_kicks != undefined) {
                    this.goal_kicks = data.goal_kicks;
                }
                if ("hit_woodwork" in data && data.hit_woodwork != undefined) {
                    this.hit_woodwork = data.hit_woodwork;
                }
                if ("injuries" in data && data.injuries != undefined) {
                    this.injuries = data.injuries;
                }
                if ("interceptions" in data && data.interceptions != undefined) {
                    this.interceptions = data.interceptions;
                }
                if ("offsides" in data && data.offsides != undefined) {
                    this.offsides = data.offsides;
                }
                if ("penalties" in data && data.penalties != undefined) {
                    this.penalties = data.penalties;
                }
                if ("saves" in data && data.saves != undefined) {
                    this.saves = data.saves;
                }
                if ("substitutions" in data && data.substitutions != undefined) {
                    this.substitutions = data.substitutions;
                }
                if ("tackles" in data && data.tackles != undefined) {
                    this.tackles = data.tackles;
                }
                if ("team_attacks" in data && data.team_attacks != undefined) {
                    this.team_attacks = data.team_attacks;
                }
                if ("team_cards" in data && data.team_cards != undefined) {
                    this.team_cards = data.team_cards;
                }
                if ("team_crosses" in data && data.team_crosses != undefined) {
                    this.team_crosses = data.team_crosses;
                }
                if ("team_dribbles" in data && data.team_dribbles != undefined) {
                    this.team_dribbles = data.team_dribbles;
                }
                if ("team_goals" in data && data.team_goals != undefined) {
                    this.team_goals = data.team_goals;
                }
                if ("team_headers" in data && data.team_headers != undefined) {
                    this.team_headers = data.team_headers;
                }
                if ("team_passes" in data && data.team_passes != undefined) {
                    this.team_passes = data.team_passes;
                }
                if ("team_shots" in data && data.team_shots != undefined) {
                    this.team_shots = data.team_shots;
                }
                if ("throw_ins" in data && data.throw_ins != undefined) {
                    this.throw_ins = data.throw_ins;
                }
                if ("treatments" in data && data.treatments != undefined) {
                    this.treatments = data.treatments;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fixture_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fixture_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get assists() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set assists(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_assists() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ball_possession() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 4) as dependency_1.google.protobuf.Int32Value;
        }
        set ball_possession(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_ball_possession() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ball_safe() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 5) as dependency_1.google.protobuf.Int32Value;
        }
        set ball_safe(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_ball_safe() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get challenges() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 6) as dependency_1.google.protobuf.Int32Value;
        }
        set challenges(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_challenges() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get corners() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 7) as dependency_1.google.protobuf.Int32Value;
        }
        set corners(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_corners() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get duels_won() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 8) as dependency_1.google.protobuf.Int32Value;
        }
        set duels_won(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_duels_won() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get free_kicks() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 9) as dependency_1.google.protobuf.Int32Value;
        }
        set free_kicks(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_free_kicks() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get fouls() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 10) as dependency_1.google.protobuf.Int32Value;
        }
        set fouls(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_fouls() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get goal_kicks() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 11) as dependency_1.google.protobuf.Int32Value;
        }
        set goal_kicks(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_goal_kicks() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get hit_woodwork() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 12) as dependency_1.google.protobuf.Int32Value;
        }
        set hit_woodwork(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_hit_woodwork() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get injuries() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 13) as dependency_1.google.protobuf.Int32Value;
        }
        set injuries(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_injuries() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get interceptions() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 14) as dependency_1.google.protobuf.Int32Value;
        }
        set interceptions(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_interceptions() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get offsides() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 15) as dependency_1.google.protobuf.Int32Value;
        }
        set offsides(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_offsides() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get penalties() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 16) as dependency_1.google.protobuf.Int32Value;
        }
        set penalties(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_penalties() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get saves() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 17) as dependency_1.google.protobuf.Int32Value;
        }
        set saves(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_saves() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get substitutions() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 18) as dependency_1.google.protobuf.Int32Value;
        }
        set substitutions(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_substitutions() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get tackles() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 19) as dependency_1.google.protobuf.Int32Value;
        }
        set tackles(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_tackles() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get team_attacks() {
            return pb_1.Message.getWrapperField(this, TeamAttacks, 20) as TeamAttacks;
        }
        set team_attacks(value: TeamAttacks) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get has_team_attacks() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get team_cards() {
            return pb_1.Message.getWrapperField(this, TeamCards, 21) as TeamCards;
        }
        set team_cards(value: TeamCards) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get has_team_cards() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get team_crosses() {
            return pb_1.Message.getWrapperField(this, TeamCrosses, 22) as TeamCrosses;
        }
        set team_crosses(value: TeamCrosses) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get has_team_crosses() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get team_dribbles() {
            return pb_1.Message.getWrapperField(this, TeamDribbles, 23) as TeamDribbles;
        }
        set team_dribbles(value: TeamDribbles) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_team_dribbles() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get team_goals() {
            return pb_1.Message.getWrapperField(this, TeamGoals, 24) as TeamGoals;
        }
        set team_goals(value: TeamGoals) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get has_team_goals() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get team_headers() {
            return pb_1.Message.getWrapperField(this, TeamHeaders, 25) as TeamHeaders;
        }
        set team_headers(value: TeamHeaders) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get has_team_headers() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get team_passes() {
            return pb_1.Message.getWrapperField(this, TeamPasses, 26) as TeamPasses;
        }
        set team_passes(value: TeamPasses) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get has_team_passes() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get team_shots() {
            return pb_1.Message.getWrapperField(this, TeamShots, 27) as TeamShots;
        }
        set team_shots(value: TeamShots) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get has_team_shots() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get throw_ins() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 28) as dependency_1.google.protobuf.Int32Value;
        }
        set throw_ins(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get has_throw_ins() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get treatments() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 29) as dependency_1.google.protobuf.Int32Value;
        }
        set treatments(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 29, value);
        }
        get has_treatments() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.statistico.Date, 30) as dependency_2.statistico.Date;
        }
        set created_at(value: dependency_2.statistico.Date) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.statistico.Date, 31) as dependency_2.statistico.Date;
        }
        set updated_at(value: dependency_2.statistico.Date) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 31) != null;
        }
        static fromObject(data: {
            team_id?: number;
            fixture_id?: number;
            assists?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            ball_possession?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            ball_safe?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            challenges?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            corners?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            duels_won?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            free_kicks?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            fouls?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            goal_kicks?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            hit_woodwork?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            injuries?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            interceptions?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            offsides?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            penalties?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            saves?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            substitutions?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            tackles?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            team_attacks?: ReturnType<typeof TeamAttacks.prototype.toObject>;
            team_cards?: ReturnType<typeof TeamCards.prototype.toObject>;
            team_crosses?: ReturnType<typeof TeamCrosses.prototype.toObject>;
            team_dribbles?: ReturnType<typeof TeamDribbles.prototype.toObject>;
            team_goals?: ReturnType<typeof TeamGoals.prototype.toObject>;
            team_headers?: ReturnType<typeof TeamHeaders.prototype.toObject>;
            team_passes?: ReturnType<typeof TeamPasses.prototype.toObject>;
            team_shots?: ReturnType<typeof TeamShots.prototype.toObject>;
            throw_ins?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            treatments?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            created_at?: ReturnType<typeof dependency_2.statistico.Date.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_2.statistico.Date.prototype.toObject>;
        }): TeamStats {
            const message = new TeamStats({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.fixture_id != null) {
                message.fixture_id = data.fixture_id;
            }
            if (data.assists != null) {
                message.assists = dependency_1.google.protobuf.Int32Value.fromObject(data.assists);
            }
            if (data.ball_possession != null) {
                message.ball_possession = dependency_1.google.protobuf.Int32Value.fromObject(data.ball_possession);
            }
            if (data.ball_safe != null) {
                message.ball_safe = dependency_1.google.protobuf.Int32Value.fromObject(data.ball_safe);
            }
            if (data.challenges != null) {
                message.challenges = dependency_1.google.protobuf.Int32Value.fromObject(data.challenges);
            }
            if (data.corners != null) {
                message.corners = dependency_1.google.protobuf.Int32Value.fromObject(data.corners);
            }
            if (data.duels_won != null) {
                message.duels_won = dependency_1.google.protobuf.Int32Value.fromObject(data.duels_won);
            }
            if (data.free_kicks != null) {
                message.free_kicks = dependency_1.google.protobuf.Int32Value.fromObject(data.free_kicks);
            }
            if (data.fouls != null) {
                message.fouls = dependency_1.google.protobuf.Int32Value.fromObject(data.fouls);
            }
            if (data.goal_kicks != null) {
                message.goal_kicks = dependency_1.google.protobuf.Int32Value.fromObject(data.goal_kicks);
            }
            if (data.hit_woodwork != null) {
                message.hit_woodwork = dependency_1.google.protobuf.Int32Value.fromObject(data.hit_woodwork);
            }
            if (data.injuries != null) {
                message.injuries = dependency_1.google.protobuf.Int32Value.fromObject(data.injuries);
            }
            if (data.interceptions != null) {
                message.interceptions = dependency_1.google.protobuf.Int32Value.fromObject(data.interceptions);
            }
            if (data.offsides != null) {
                message.offsides = dependency_1.google.protobuf.Int32Value.fromObject(data.offsides);
            }
            if (data.penalties != null) {
                message.penalties = dependency_1.google.protobuf.Int32Value.fromObject(data.penalties);
            }
            if (data.saves != null) {
                message.saves = dependency_1.google.protobuf.Int32Value.fromObject(data.saves);
            }
            if (data.substitutions != null) {
                message.substitutions = dependency_1.google.protobuf.Int32Value.fromObject(data.substitutions);
            }
            if (data.tackles != null) {
                message.tackles = dependency_1.google.protobuf.Int32Value.fromObject(data.tackles);
            }
            if (data.team_attacks != null) {
                message.team_attacks = TeamAttacks.fromObject(data.team_attacks);
            }
            if (data.team_cards != null) {
                message.team_cards = TeamCards.fromObject(data.team_cards);
            }
            if (data.team_crosses != null) {
                message.team_crosses = TeamCrosses.fromObject(data.team_crosses);
            }
            if (data.team_dribbles != null) {
                message.team_dribbles = TeamDribbles.fromObject(data.team_dribbles);
            }
            if (data.team_goals != null) {
                message.team_goals = TeamGoals.fromObject(data.team_goals);
            }
            if (data.team_headers != null) {
                message.team_headers = TeamHeaders.fromObject(data.team_headers);
            }
            if (data.team_passes != null) {
                message.team_passes = TeamPasses.fromObject(data.team_passes);
            }
            if (data.team_shots != null) {
                message.team_shots = TeamShots.fromObject(data.team_shots);
            }
            if (data.throw_ins != null) {
                message.throw_ins = dependency_1.google.protobuf.Int32Value.fromObject(data.throw_ins);
            }
            if (data.treatments != null) {
                message.treatments = dependency_1.google.protobuf.Int32Value.fromObject(data.treatments);
            }
            if (data.created_at != null) {
                message.created_at = dependency_2.statistico.Date.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_2.statistico.Date.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                fixture_id?: number;
                assists?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                ball_possession?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                ball_safe?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                challenges?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                corners?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                duels_won?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                free_kicks?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                fouls?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                goal_kicks?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                hit_woodwork?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                injuries?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                interceptions?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                offsides?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                penalties?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                saves?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                substitutions?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                tackles?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                team_attacks?: ReturnType<typeof TeamAttacks.prototype.toObject>;
                team_cards?: ReturnType<typeof TeamCards.prototype.toObject>;
                team_crosses?: ReturnType<typeof TeamCrosses.prototype.toObject>;
                team_dribbles?: ReturnType<typeof TeamDribbles.prototype.toObject>;
                team_goals?: ReturnType<typeof TeamGoals.prototype.toObject>;
                team_headers?: ReturnType<typeof TeamHeaders.prototype.toObject>;
                team_passes?: ReturnType<typeof TeamPasses.prototype.toObject>;
                team_shots?: ReturnType<typeof TeamShots.prototype.toObject>;
                throw_ins?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                treatments?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                created_at?: ReturnType<typeof dependency_2.statistico.Date.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_2.statistico.Date.prototype.toObject>;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.fixture_id != null) {
                data.fixture_id = this.fixture_id;
            }
            if (this.assists != null) {
                data.assists = this.assists.toObject();
            }
            if (this.ball_possession != null) {
                data.ball_possession = this.ball_possession.toObject();
            }
            if (this.ball_safe != null) {
                data.ball_safe = this.ball_safe.toObject();
            }
            if (this.challenges != null) {
                data.challenges = this.challenges.toObject();
            }
            if (this.corners != null) {
                data.corners = this.corners.toObject();
            }
            if (this.duels_won != null) {
                data.duels_won = this.duels_won.toObject();
            }
            if (this.free_kicks != null) {
                data.free_kicks = this.free_kicks.toObject();
            }
            if (this.fouls != null) {
                data.fouls = this.fouls.toObject();
            }
            if (this.goal_kicks != null) {
                data.goal_kicks = this.goal_kicks.toObject();
            }
            if (this.hit_woodwork != null) {
                data.hit_woodwork = this.hit_woodwork.toObject();
            }
            if (this.injuries != null) {
                data.injuries = this.injuries.toObject();
            }
            if (this.interceptions != null) {
                data.interceptions = this.interceptions.toObject();
            }
            if (this.offsides != null) {
                data.offsides = this.offsides.toObject();
            }
            if (this.penalties != null) {
                data.penalties = this.penalties.toObject();
            }
            if (this.saves != null) {
                data.saves = this.saves.toObject();
            }
            if (this.substitutions != null) {
                data.substitutions = this.substitutions.toObject();
            }
            if (this.tackles != null) {
                data.tackles = this.tackles.toObject();
            }
            if (this.team_attacks != null) {
                data.team_attacks = this.team_attacks.toObject();
            }
            if (this.team_cards != null) {
                data.team_cards = this.team_cards.toObject();
            }
            if (this.team_crosses != null) {
                data.team_crosses = this.team_crosses.toObject();
            }
            if (this.team_dribbles != null) {
                data.team_dribbles = this.team_dribbles.toObject();
            }
            if (this.team_goals != null) {
                data.team_goals = this.team_goals.toObject();
            }
            if (this.team_headers != null) {
                data.team_headers = this.team_headers.toObject();
            }
            if (this.team_passes != null) {
                data.team_passes = this.team_passes.toObject();
            }
            if (this.team_shots != null) {
                data.team_shots = this.team_shots.toObject();
            }
            if (this.throw_ins != null) {
                data.throw_ins = this.throw_ins.toObject();
            }
            if (this.treatments != null) {
                data.treatments = this.treatments.toObject();
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeUint64(1, this.team_id);
            if (this.fixture_id != 0)
                writer.writeUint64(2, this.fixture_id);
            if (this.has_assists)
                writer.writeMessage(3, this.assists, () => this.assists.serialize(writer));
            if (this.has_ball_possession)
                writer.writeMessage(4, this.ball_possession, () => this.ball_possession.serialize(writer));
            if (this.has_ball_safe)
                writer.writeMessage(5, this.ball_safe, () => this.ball_safe.serialize(writer));
            if (this.has_challenges)
                writer.writeMessage(6, this.challenges, () => this.challenges.serialize(writer));
            if (this.has_corners)
                writer.writeMessage(7, this.corners, () => this.corners.serialize(writer));
            if (this.has_duels_won)
                writer.writeMessage(8, this.duels_won, () => this.duels_won.serialize(writer));
            if (this.has_free_kicks)
                writer.writeMessage(9, this.free_kicks, () => this.free_kicks.serialize(writer));
            if (this.has_fouls)
                writer.writeMessage(10, this.fouls, () => this.fouls.serialize(writer));
            if (this.has_goal_kicks)
                writer.writeMessage(11, this.goal_kicks, () => this.goal_kicks.serialize(writer));
            if (this.has_hit_woodwork)
                writer.writeMessage(12, this.hit_woodwork, () => this.hit_woodwork.serialize(writer));
            if (this.has_injuries)
                writer.writeMessage(13, this.injuries, () => this.injuries.serialize(writer));
            if (this.has_interceptions)
                writer.writeMessage(14, this.interceptions, () => this.interceptions.serialize(writer));
            if (this.has_offsides)
                writer.writeMessage(15, this.offsides, () => this.offsides.serialize(writer));
            if (this.has_penalties)
                writer.writeMessage(16, this.penalties, () => this.penalties.serialize(writer));
            if (this.has_saves)
                writer.writeMessage(17, this.saves, () => this.saves.serialize(writer));
            if (this.has_substitutions)
                writer.writeMessage(18, this.substitutions, () => this.substitutions.serialize(writer));
            if (this.has_tackles)
                writer.writeMessage(19, this.tackles, () => this.tackles.serialize(writer));
            if (this.has_team_attacks)
                writer.writeMessage(20, this.team_attacks, () => this.team_attacks.serialize(writer));
            if (this.has_team_cards)
                writer.writeMessage(21, this.team_cards, () => this.team_cards.serialize(writer));
            if (this.has_team_crosses)
                writer.writeMessage(22, this.team_crosses, () => this.team_crosses.serialize(writer));
            if (this.has_team_dribbles)
                writer.writeMessage(23, this.team_dribbles, () => this.team_dribbles.serialize(writer));
            if (this.has_team_goals)
                writer.writeMessage(24, this.team_goals, () => this.team_goals.serialize(writer));
            if (this.has_team_headers)
                writer.writeMessage(25, this.team_headers, () => this.team_headers.serialize(writer));
            if (this.has_team_passes)
                writer.writeMessage(26, this.team_passes, () => this.team_passes.serialize(writer));
            if (this.has_team_shots)
                writer.writeMessage(27, this.team_shots, () => this.team_shots.serialize(writer));
            if (this.has_throw_ins)
                writer.writeMessage(28, this.throw_ins, () => this.throw_ins.serialize(writer));
            if (this.has_treatments)
                writer.writeMessage(29, this.treatments, () => this.treatments.serialize(writer));
            if (this.has_created_at)
                writer.writeMessage(30, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(31, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readUint64();
                        break;
                    case 2:
                        message.fixture_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.assists, () => message.assists = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ball_possession, () => message.ball_possession = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ball_safe, () => message.ball_safe = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.challenges, () => message.challenges = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.corners, () => message.corners = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.duels_won, () => message.duels_won = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.free_kicks, () => message.free_kicks = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.fouls, () => message.fouls = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.goal_kicks, () => message.goal_kicks = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.hit_woodwork, () => message.hit_woodwork = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.injuries, () => message.injuries = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.interceptions, () => message.interceptions = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.offsides, () => message.offsides = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.penalties, () => message.penalties = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.saves, () => message.saves = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.substitutions, () => message.substitutions = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.tackles, () => message.tackles = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.team_attacks, () => message.team_attacks = TeamAttacks.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.team_cards, () => message.team_cards = TeamCards.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.team_crosses, () => message.team_crosses = TeamCrosses.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.team_dribbles, () => message.team_dribbles = TeamDribbles.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.team_goals, () => message.team_goals = TeamGoals.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.team_headers, () => message.team_headers = TeamHeaders.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.team_passes, () => message.team_passes = TeamPasses.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.team_shots, () => message.team_shots = TeamShots.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.throw_ins, () => message.throw_ins = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.treatments, () => message.treatments = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_2.statistico.Date.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_2.statistico.Date.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStats {
            return TeamStats.deserialize(bytes);
        }
    }
    export class TeamCards extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            red?: dependency_1.google.protobuf.Int32Value;
            yellow?: dependency_1.google.protobuf.Int32Value;
            yellow_red?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("yellow" in data && data.yellow != undefined) {
                    this.yellow = data.yellow;
                }
                if ("yellow_red" in data && data.yellow_red != undefined) {
                    this.yellow_red = data.yellow_red;
                }
            }
        }
        get red() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set red(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_red() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get yellow() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set yellow(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_yellow() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get yellow_red() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set yellow_red(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_yellow_red() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            red?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            yellow?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            yellow_red?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamCards {
            const message = new TeamCards({});
            if (data.red != null) {
                message.red = dependency_1.google.protobuf.Int32Value.fromObject(data.red);
            }
            if (data.yellow != null) {
                message.yellow = dependency_1.google.protobuf.Int32Value.fromObject(data.yellow);
            }
            if (data.yellow_red != null) {
                message.yellow_red = dependency_1.google.protobuf.Int32Value.fromObject(data.yellow_red);
            }
            return message;
        }
        toObject() {
            const data: {
                red?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                yellow?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                yellow_red?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.red != null) {
                data.red = this.red.toObject();
            }
            if (this.yellow != null) {
                data.yellow = this.yellow.toObject();
            }
            if (this.yellow_red != null) {
                data.yellow_red = this.yellow_red.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_red)
                writer.writeMessage(1, this.red, () => this.red.serialize(writer));
            if (this.has_yellow)
                writer.writeMessage(2, this.yellow, () => this.yellow.serialize(writer));
            if (this.has_yellow_red)
                writer.writeMessage(3, this.yellow_red, () => this.yellow_red.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamCards {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamCards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.red, () => message.red = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.yellow, () => message.yellow = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.yellow_red, () => message.yellow_red = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamCards {
            return TeamCards.deserialize(bytes);
        }
    }
    export class TeamCrosses extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: dependency_1.google.protobuf.Int32Value;
            accurate?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("accurate" in data && data.accurate != undefined) {
                    this.accurate = data.accurate;
                }
            }
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get accurate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set accurate(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_accurate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            accurate?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamCrosses {
            const message = new TeamCrosses({});
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.accurate != null) {
                message.accurate = dependency_1.google.protobuf.Int32Value.fromObject(data.accurate);
            }
            return message;
        }
        toObject() {
            const data: {
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                accurate?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.accurate != null) {
                data.accurate = this.accurate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total)
                writer.writeMessage(1, this.total, () => this.total.serialize(writer));
            if (this.has_accurate)
                writer.writeMessage(2, this.accurate, () => this.accurate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamCrosses {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamCrosses();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.accurate, () => message.accurate = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamCrosses {
            return TeamCrosses.deserialize(bytes);
        }
    }
    export class TeamDribbles extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: dependency_1.google.protobuf.Int32Value;
            success?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get success() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set success(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamDribbles {
            const message = new TeamDribbles({});
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.success != null) {
                message.success = dependency_1.google.protobuf.Int32Value.fromObject(data.success);
            }
            return message;
        }
        toObject() {
            const data: {
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.success != null) {
                data.success = this.success.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total)
                writer.writeMessage(1, this.total, () => this.total.serialize(writer));
            if (this.has_success)
                writer.writeMessage(2, this.success, () => this.success.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamDribbles {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamDribbles();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.success, () => message.success = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamDribbles {
            return TeamDribbles.deserialize(bytes);
        }
    }
    export class TeamGoals extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scored?: dependency_1.google.protobuf.Int32Value;
            scored_half_time?: dependency_1.google.protobuf.Int32Value;
            conceded?: dependency_1.google.protobuf.Int32Value;
            conceded_half_time?: dependency_1.google.protobuf.Int32Value;
            attempts?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scored" in data && data.scored != undefined) {
                    this.scored = data.scored;
                }
                if ("scored_half_time" in data && data.scored_half_time != undefined) {
                    this.scored_half_time = data.scored_half_time;
                }
                if ("conceded" in data && data.conceded != undefined) {
                    this.conceded = data.conceded;
                }
                if ("conceded_half_time" in data && data.conceded_half_time != undefined) {
                    this.conceded_half_time = data.conceded_half_time;
                }
                if ("attempts" in data && data.attempts != undefined) {
                    this.attempts = data.attempts;
                }
            }
        }
        get scored() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set scored(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_scored() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get scored_half_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set scored_half_time(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_scored_half_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get conceded() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set conceded(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_conceded() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get conceded_half_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 4) as dependency_1.google.protobuf.Int32Value;
        }
        set conceded_half_time(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_conceded_half_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get attempts() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 5) as dependency_1.google.protobuf.Int32Value;
        }
        set attempts(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_attempts() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            scored?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            scored_half_time?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            conceded?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            conceded_half_time?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            attempts?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamGoals {
            const message = new TeamGoals({});
            if (data.scored != null) {
                message.scored = dependency_1.google.protobuf.Int32Value.fromObject(data.scored);
            }
            if (data.scored_half_time != null) {
                message.scored_half_time = dependency_1.google.protobuf.Int32Value.fromObject(data.scored_half_time);
            }
            if (data.conceded != null) {
                message.conceded = dependency_1.google.protobuf.Int32Value.fromObject(data.conceded);
            }
            if (data.conceded_half_time != null) {
                message.conceded_half_time = dependency_1.google.protobuf.Int32Value.fromObject(data.conceded_half_time);
            }
            if (data.attempts != null) {
                message.attempts = dependency_1.google.protobuf.Int32Value.fromObject(data.attempts);
            }
            return message;
        }
        toObject() {
            const data: {
                scored?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                scored_half_time?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                conceded?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                conceded_half_time?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                attempts?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.scored != null) {
                data.scored = this.scored.toObject();
            }
            if (this.scored_half_time != null) {
                data.scored_half_time = this.scored_half_time.toObject();
            }
            if (this.conceded != null) {
                data.conceded = this.conceded.toObject();
            }
            if (this.conceded_half_time != null) {
                data.conceded_half_time = this.conceded_half_time.toObject();
            }
            if (this.attempts != null) {
                data.attempts = this.attempts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_scored)
                writer.writeMessage(1, this.scored, () => this.scored.serialize(writer));
            if (this.has_scored_half_time)
                writer.writeMessage(2, this.scored_half_time, () => this.scored_half_time.serialize(writer));
            if (this.has_conceded)
                writer.writeMessage(3, this.conceded, () => this.conceded.serialize(writer));
            if (this.has_conceded_half_time)
                writer.writeMessage(4, this.conceded_half_time, () => this.conceded_half_time.serialize(writer));
            if (this.has_attempts)
                writer.writeMessage(5, this.attempts, () => this.attempts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamGoals {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamGoals();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scored, () => message.scored = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.scored_half_time, () => message.scored_half_time = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.conceded, () => message.conceded = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.conceded_half_time, () => message.conceded_half_time = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.attempts, () => message.attempts = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamGoals {
            return TeamGoals.deserialize(bytes);
        }
    }
    export class TeamHeaders extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: dependency_1.google.protobuf.Int32Value;
            success?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get success() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set success(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamHeaders {
            const message = new TeamHeaders({});
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.success != null) {
                message.success = dependency_1.google.protobuf.Int32Value.fromObject(data.success);
            }
            return message;
        }
        toObject() {
            const data: {
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.success != null) {
                data.success = this.success.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total)
                writer.writeMessage(1, this.total, () => this.total.serialize(writer));
            if (this.has_success)
                writer.writeMessage(2, this.success, () => this.success.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamHeaders {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamHeaders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.success, () => message.success = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamHeaders {
            return TeamHeaders.deserialize(bytes);
        }
    }
    export class TeamShots extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: dependency_1.google.protobuf.Int32Value;
            on_goal?: dependency_1.google.protobuf.Int32Value;
            off_goal?: dependency_1.google.protobuf.Int32Value;
            blocked?: dependency_1.google.protobuf.Int32Value;
            inside_box?: dependency_1.google.protobuf.Int32Value;
            outside_box?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("on_goal" in data && data.on_goal != undefined) {
                    this.on_goal = data.on_goal;
                }
                if ("off_goal" in data && data.off_goal != undefined) {
                    this.off_goal = data.off_goal;
                }
                if ("blocked" in data && data.blocked != undefined) {
                    this.blocked = data.blocked;
                }
                if ("inside_box" in data && data.inside_box != undefined) {
                    this.inside_box = data.inside_box;
                }
                if ("outside_box" in data && data.outside_box != undefined) {
                    this.outside_box = data.outside_box;
                }
            }
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get on_goal() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set on_goal(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_on_goal() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get off_goal() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set off_goal(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_off_goal() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get blocked() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 4) as dependency_1.google.protobuf.Int32Value;
        }
        set blocked(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_blocked() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get inside_box() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 5) as dependency_1.google.protobuf.Int32Value;
        }
        set inside_box(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_inside_box() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get outside_box() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 6) as dependency_1.google.protobuf.Int32Value;
        }
        set outside_box(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_outside_box() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            on_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            off_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            blocked?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            inside_box?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            outside_box?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamShots {
            const message = new TeamShots({});
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.on_goal != null) {
                message.on_goal = dependency_1.google.protobuf.Int32Value.fromObject(data.on_goal);
            }
            if (data.off_goal != null) {
                message.off_goal = dependency_1.google.protobuf.Int32Value.fromObject(data.off_goal);
            }
            if (data.blocked != null) {
                message.blocked = dependency_1.google.protobuf.Int32Value.fromObject(data.blocked);
            }
            if (data.inside_box != null) {
                message.inside_box = dependency_1.google.protobuf.Int32Value.fromObject(data.inside_box);
            }
            if (data.outside_box != null) {
                message.outside_box = dependency_1.google.protobuf.Int32Value.fromObject(data.outside_box);
            }
            return message;
        }
        toObject() {
            const data: {
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                on_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                off_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                blocked?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                inside_box?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                outside_box?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.on_goal != null) {
                data.on_goal = this.on_goal.toObject();
            }
            if (this.off_goal != null) {
                data.off_goal = this.off_goal.toObject();
            }
            if (this.blocked != null) {
                data.blocked = this.blocked.toObject();
            }
            if (this.inside_box != null) {
                data.inside_box = this.inside_box.toObject();
            }
            if (this.outside_box != null) {
                data.outside_box = this.outside_box.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total)
                writer.writeMessage(1, this.total, () => this.total.serialize(writer));
            if (this.has_on_goal)
                writer.writeMessage(2, this.on_goal, () => this.on_goal.serialize(writer));
            if (this.has_off_goal)
                writer.writeMessage(3, this.off_goal, () => this.off_goal.serialize(writer));
            if (this.has_blocked)
                writer.writeMessage(4, this.blocked, () => this.blocked.serialize(writer));
            if (this.has_inside_box)
                writer.writeMessage(5, this.inside_box, () => this.inside_box.serialize(writer));
            if (this.has_outside_box)
                writer.writeMessage(6, this.outside_box, () => this.outside_box.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamShots {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamShots();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.on_goal, () => message.on_goal = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.off_goal, () => message.off_goal = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.blocked, () => message.blocked = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.inside_box, () => message.inside_box = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.outside_box, () => message.outside_box = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamShots {
            return TeamShots.deserialize(bytes);
        }
    }
    export class TeamPasses extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: dependency_1.google.protobuf.Int32Value;
            success?: dependency_1.google.protobuf.Int32Value;
            percentage?: dependency_1.google.protobuf.Int32Value;
            key?: dependency_1.google.protobuf.Int32Value;
            long?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("percentage" in data && data.percentage != undefined) {
                    this.percentage = data.percentage;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("long" in data && data.long != undefined) {
                    this.long = data.long;
                }
            }
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get success() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set success(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get percentage() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set percentage(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_percentage() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 4) as dependency_1.google.protobuf.Int32Value;
        }
        set key(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get long() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 5) as dependency_1.google.protobuf.Int32Value;
        }
        set long(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_long() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            percentage?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            key?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            long?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamPasses {
            const message = new TeamPasses({});
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.success != null) {
                message.success = dependency_1.google.protobuf.Int32Value.fromObject(data.success);
            }
            if (data.percentage != null) {
                message.percentage = dependency_1.google.protobuf.Int32Value.fromObject(data.percentage);
            }
            if (data.key != null) {
                message.key = dependency_1.google.protobuf.Int32Value.fromObject(data.key);
            }
            if (data.long != null) {
                message.long = dependency_1.google.protobuf.Int32Value.fromObject(data.long);
            }
            return message;
        }
        toObject() {
            const data: {
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                success?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                percentage?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                key?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                long?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.success != null) {
                data.success = this.success.toObject();
            }
            if (this.percentage != null) {
                data.percentage = this.percentage.toObject();
            }
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.long != null) {
                data.long = this.long.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total)
                writer.writeMessage(1, this.total, () => this.total.serialize(writer));
            if (this.has_success)
                writer.writeMessage(2, this.success, () => this.success.serialize(writer));
            if (this.has_percentage)
                writer.writeMessage(3, this.percentage, () => this.percentage.serialize(writer));
            if (this.has_key)
                writer.writeMessage(4, this.key, () => this.key.serialize(writer));
            if (this.has_long)
                writer.writeMessage(5, this.long, () => this.long.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamPasses {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamPasses();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.success, () => message.success = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.percentage, () => message.percentage = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.key, () => message.key = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.long, () => message.long = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamPasses {
            return TeamPasses.deserialize(bytes);
        }
    }
    export class TeamAttacks extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            counter?: dependency_1.google.protobuf.Int32Value;
            total?: dependency_1.google.protobuf.Int32Value;
            dangerous?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("counter" in data && data.counter != undefined) {
                    this.counter = data.counter;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("dangerous" in data && data.dangerous != undefined) {
                    this.dangerous = data.dangerous;
                }
            }
        }
        get counter() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set counter(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_counter() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dangerous() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set dangerous(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_dangerous() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            counter?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            dangerous?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): TeamAttacks {
            const message = new TeamAttacks({});
            if (data.counter != null) {
                message.counter = dependency_1.google.protobuf.Int32Value.fromObject(data.counter);
            }
            if (data.total != null) {
                message.total = dependency_1.google.protobuf.Int32Value.fromObject(data.total);
            }
            if (data.dangerous != null) {
                message.dangerous = dependency_1.google.protobuf.Int32Value.fromObject(data.dangerous);
            }
            return message;
        }
        toObject() {
            const data: {
                counter?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                dangerous?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.counter != null) {
                data.counter = this.counter.toObject();
            }
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.dangerous != null) {
                data.dangerous = this.dangerous.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_counter)
                writer.writeMessage(1, this.counter, () => this.counter.serialize(writer));
            if (this.has_total)
                writer.writeMessage(2, this.total, () => this.total.serialize(writer));
            if (this.has_dangerous)
                writer.writeMessage(3, this.dangerous, () => this.dangerous.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamAttacks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamAttacks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.counter, () => message.counter = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.total, () => message.total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dangerous, () => message.dangerous = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamAttacks {
            return TeamAttacks.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTeamStatsServiceService {
        static definition = {
            GetTeamStatsForFixture: {
                path: "/statistico.TeamStatsService/GetTeamStatsForFixture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.statistico.FixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.statistico.FixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TeamStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TeamStatsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTeamStatsForFixture(call: grpc_1.ServerUnaryCall<dependency_3.statistico.FixtureRequest, TeamStatsResponse>, callback: grpc_1.sendUnaryData<TeamStatsResponse>): void;
    }
    export class TeamStatsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTeamStatsServiceService.definition, "TeamStatsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTeamStatsForFixture: GrpcUnaryServiceInterface<dependency_3.statistico.FixtureRequest, TeamStatsResponse> = (message: dependency_3.statistico.FixtureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TeamStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TeamStatsResponse>, callback?: grpc_1.requestCallback<TeamStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTeamStatsForFixture(message, metadata, options, callback);
        };
    }
}
