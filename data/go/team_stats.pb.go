// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.6.1
// source: team_stats.proto

package statistico_proto

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TeamStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeTeam *TeamStats `protobuf:"bytes,1,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam *TeamStats `protobuf:"bytes,2,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	TeamXg   *TeamXG    `protobuf:"bytes,3,opt,name=team_xg,json=teamXg,proto3" json:"team_xg,omitempty"`
}

func (x *TeamStatsResponse) Reset() {
	*x = TeamStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatsResponse) ProtoMessage() {}

func (x *TeamStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatsResponse.ProtoReflect.Descriptor instead.
func (*TeamStatsResponse) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{0}
}

func (x *TeamStatsResponse) GetHomeTeam() *TeamStats {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *TeamStatsResponse) GetAwayTeam() *TeamStats {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *TeamStatsResponse) GetTeamXg() *TeamXG {
	if x != nil {
		return x.TeamXg
	}
	return nil
}

type TeamStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureId uint64                `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	Stat      string                `protobuf:"bytes,2,opt,name=stat,proto3" json:"stat,omitempty"`
	Value     *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TeamStat) Reset() {
	*x = TeamStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStat) ProtoMessage() {}

func (x *TeamStat) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStat.ProtoReflect.Descriptor instead.
func (*TeamStat) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{1}
}

func (x *TeamStat) GetFixtureId() uint64 {
	if x != nil {
		return x.FixtureId
	}
	return 0
}

func (x *TeamStat) GetStat() string {
	if x != nil {
		return x.Stat
	}
	return ""
}

func (x *TeamStat) GetValue() *wrappers.UInt32Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId           uint64                `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ShotsTotal       *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=shots_total,json=shotsTotal,proto3" json:"shots_total,omitempty"`
	ShotsOnGoal      *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=shots_on_goal,json=shotsOnGoal,proto3" json:"shots_on_goal,omitempty"`
	ShotsOffGoal     *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=shots_off_goal,json=shotsOffGoal,proto3" json:"shots_off_goal,omitempty"`
	ShotsBlocked     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=shots_blocked,json=shotsBlocked,proto3" json:"shots_blocked,omitempty"`
	ShotsInsideBox   *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=shots_inside_box,json=shotsInsideBox,proto3" json:"shots_inside_box,omitempty"`
	ShotsOutsideBox  *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=shots_outside_box,json=shotsOutsideBox,proto3" json:"shots_outside_box,omitempty"`
	PassesTotal      *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=passes_total,json=passesTotal,proto3" json:"passes_total,omitempty"`
	PassesAccuracy   *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=passes_accuracy,json=passesAccuracy,proto3" json:"passes_accuracy,omitempty"`
	PassesPercentage *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=passes_percentage,json=passesPercentage,proto3" json:"passes_percentage,omitempty"`
	AttacksTotal     *wrappers.UInt32Value `protobuf:"bytes,11,opt,name=attacks_total,json=attacksTotal,proto3" json:"attacks_total,omitempty"`
	AttacksDangerous *wrappers.UInt32Value `protobuf:"bytes,12,opt,name=attacks_dangerous,json=attacksDangerous,proto3" json:"attacks_dangerous,omitempty"`
	Goals            *wrappers.UInt32Value `protobuf:"bytes,13,opt,name=goals,proto3" json:"goals,omitempty"`
	Fouls            *wrappers.UInt32Value `protobuf:"bytes,14,opt,name=fouls,proto3" json:"fouls,omitempty"`
	Corners          *wrappers.UInt32Value `protobuf:"bytes,15,opt,name=corners,proto3" json:"corners,omitempty"`
	Offsides         *wrappers.UInt32Value `protobuf:"bytes,16,opt,name=offsides,proto3" json:"offsides,omitempty"`
	Possession       *wrappers.UInt32Value `protobuf:"bytes,17,opt,name=possession,proto3" json:"possession,omitempty"`
	YellowCards      *wrappers.UInt32Value `protobuf:"bytes,18,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	RedCards         *wrappers.UInt32Value `protobuf:"bytes,19,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	Saves            *wrappers.UInt32Value `protobuf:"bytes,20,opt,name=saves,proto3" json:"saves,omitempty"`
	Substitutions    *wrappers.UInt32Value `protobuf:"bytes,21,opt,name=substitutions,proto3" json:"substitutions,omitempty"`
	GoalKicks        *wrappers.UInt32Value `protobuf:"bytes,22,opt,name=goal_kicks,json=goalKicks,proto3" json:"goal_kicks,omitempty"`
	GoalAttempts     *wrappers.UInt32Value `protobuf:"bytes,23,opt,name=goal_attempts,json=goalAttempts,proto3" json:"goal_attempts,omitempty"`
	FreeKicks        *wrappers.UInt32Value `protobuf:"bytes,24,opt,name=free_kicks,json=freeKicks,proto3" json:"free_kicks,omitempty"`
	ThrowIns         *wrappers.UInt32Value `protobuf:"bytes,25,opt,name=throw_ins,json=throwIns,proto3" json:"throw_ins,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{2}
}

func (x *TeamStats) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamStats) GetShotsTotal() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsTotal
	}
	return nil
}

func (x *TeamStats) GetShotsOnGoal() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsOnGoal
	}
	return nil
}

func (x *TeamStats) GetShotsOffGoal() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsOffGoal
	}
	return nil
}

func (x *TeamStats) GetShotsBlocked() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsBlocked
	}
	return nil
}

func (x *TeamStats) GetShotsInsideBox() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsInsideBox
	}
	return nil
}

func (x *TeamStats) GetShotsOutsideBox() *wrappers.UInt32Value {
	if x != nil {
		return x.ShotsOutsideBox
	}
	return nil
}

func (x *TeamStats) GetPassesTotal() *wrappers.UInt32Value {
	if x != nil {
		return x.PassesTotal
	}
	return nil
}

func (x *TeamStats) GetPassesAccuracy() *wrappers.UInt32Value {
	if x != nil {
		return x.PassesAccuracy
	}
	return nil
}

func (x *TeamStats) GetPassesPercentage() *wrappers.UInt32Value {
	if x != nil {
		return x.PassesPercentage
	}
	return nil
}

func (x *TeamStats) GetAttacksTotal() *wrappers.UInt32Value {
	if x != nil {
		return x.AttacksTotal
	}
	return nil
}

func (x *TeamStats) GetAttacksDangerous() *wrappers.UInt32Value {
	if x != nil {
		return x.AttacksDangerous
	}
	return nil
}

func (x *TeamStats) GetGoals() *wrappers.UInt32Value {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *TeamStats) GetFouls() *wrappers.UInt32Value {
	if x != nil {
		return x.Fouls
	}
	return nil
}

func (x *TeamStats) GetCorners() *wrappers.UInt32Value {
	if x != nil {
		return x.Corners
	}
	return nil
}

func (x *TeamStats) GetOffsides() *wrappers.UInt32Value {
	if x != nil {
		return x.Offsides
	}
	return nil
}

func (x *TeamStats) GetPossession() *wrappers.UInt32Value {
	if x != nil {
		return x.Possession
	}
	return nil
}

func (x *TeamStats) GetYellowCards() *wrappers.UInt32Value {
	if x != nil {
		return x.YellowCards
	}
	return nil
}

func (x *TeamStats) GetRedCards() *wrappers.UInt32Value {
	if x != nil {
		return x.RedCards
	}
	return nil
}

func (x *TeamStats) GetSaves() *wrappers.UInt32Value {
	if x != nil {
		return x.Saves
	}
	return nil
}

func (x *TeamStats) GetSubstitutions() *wrappers.UInt32Value {
	if x != nil {
		return x.Substitutions
	}
	return nil
}

func (x *TeamStats) GetGoalKicks() *wrappers.UInt32Value {
	if x != nil {
		return x.GoalKicks
	}
	return nil
}

func (x *TeamStats) GetGoalAttempts() *wrappers.UInt32Value {
	if x != nil {
		return x.GoalAttempts
	}
	return nil
}

func (x *TeamStats) GetFreeKicks() *wrappers.UInt32Value {
	if x != nil {
		return x.FreeKicks
	}
	return nil
}

func (x *TeamStats) GetThrowIns() *wrappers.UInt32Value {
	if x != nil {
		return x.ThrowIns
	}
	return nil
}

type TeamXG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home *wrappers.FloatValue `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"`
	Away *wrappers.FloatValue `protobuf:"bytes,2,opt,name=away,proto3" json:"away,omitempty"`
}

func (x *TeamXG) Reset() {
	*x = TeamXG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamXG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamXG) ProtoMessage() {}

func (x *TeamXG) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamXG.ProtoReflect.Descriptor instead.
func (*TeamXG) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{3}
}

func (x *TeamXG) GetHome() *wrappers.FloatValue {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *TeamXG) GetAway() *wrappers.FloatValue {
	if x != nil {
		return x.Away
	}
	return nil
}

var File_team_stats_proto protoreflect.FileDescriptor

var file_team_stats_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x31,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x78, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x58, 0x47, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x58,
	0x67, 0x22, 0x71, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x0c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0e,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x66, 0x66, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x41, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x48, 0x0a, 0x11, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x49, 0x0a,
	0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x11, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x6f,
	0x75, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x06, 0x54, 0x65,
	0x61, 0x6d, 0x58, 0x47, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x32, 0xca, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_team_stats_proto_rawDescOnce sync.Once
	file_team_stats_proto_rawDescData = file_team_stats_proto_rawDesc
)

func file_team_stats_proto_rawDescGZIP() []byte {
	file_team_stats_proto_rawDescOnce.Do(func() {
		file_team_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_team_stats_proto_rawDescData)
	})
	return file_team_stats_proto_rawDescData
}

var file_team_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_team_stats_proto_goTypes = []interface{}{
	(*TeamStatsResponse)(nil),    // 0: statistico_proto.TeamStatsResponse
	(*TeamStat)(nil),             // 1: statistico_proto.TeamStat
	(*TeamStats)(nil),            // 2: statistico_proto.TeamStats
	(*TeamXG)(nil),               // 3: statistico_proto.TeamXG
	(*wrappers.UInt32Value)(nil), // 4: google.protobuf.UInt32Value
	(*wrappers.FloatValue)(nil),  // 5: google.protobuf.FloatValue
	(*FixtureRequest)(nil),       // 6: statistico_proto.FixtureRequest
	(*TeamStatRequest)(nil),      // 7: statistico_proto.TeamStatRequest
}
var file_team_stats_proto_depIdxs = []int32{
	2,  // 0: statistico_proto.TeamStatsResponse.home_team:type_name -> statistico_proto.TeamStats
	2,  // 1: statistico_proto.TeamStatsResponse.away_team:type_name -> statistico_proto.TeamStats
	3,  // 2: statistico_proto.TeamStatsResponse.team_xg:type_name -> statistico_proto.TeamXG
	4,  // 3: statistico_proto.TeamStat.value:type_name -> google.protobuf.UInt32Value
	4,  // 4: statistico_proto.TeamStats.shots_total:type_name -> google.protobuf.UInt32Value
	4,  // 5: statistico_proto.TeamStats.shots_on_goal:type_name -> google.protobuf.UInt32Value
	4,  // 6: statistico_proto.TeamStats.shots_off_goal:type_name -> google.protobuf.UInt32Value
	4,  // 7: statistico_proto.TeamStats.shots_blocked:type_name -> google.protobuf.UInt32Value
	4,  // 8: statistico_proto.TeamStats.shots_inside_box:type_name -> google.protobuf.UInt32Value
	4,  // 9: statistico_proto.TeamStats.shots_outside_box:type_name -> google.protobuf.UInt32Value
	4,  // 10: statistico_proto.TeamStats.passes_total:type_name -> google.protobuf.UInt32Value
	4,  // 11: statistico_proto.TeamStats.passes_accuracy:type_name -> google.protobuf.UInt32Value
	4,  // 12: statistico_proto.TeamStats.passes_percentage:type_name -> google.protobuf.UInt32Value
	4,  // 13: statistico_proto.TeamStats.attacks_total:type_name -> google.protobuf.UInt32Value
	4,  // 14: statistico_proto.TeamStats.attacks_dangerous:type_name -> google.protobuf.UInt32Value
	4,  // 15: statistico_proto.TeamStats.goals:type_name -> google.protobuf.UInt32Value
	4,  // 16: statistico_proto.TeamStats.fouls:type_name -> google.protobuf.UInt32Value
	4,  // 17: statistico_proto.TeamStats.corners:type_name -> google.protobuf.UInt32Value
	4,  // 18: statistico_proto.TeamStats.offsides:type_name -> google.protobuf.UInt32Value
	4,  // 19: statistico_proto.TeamStats.possession:type_name -> google.protobuf.UInt32Value
	4,  // 20: statistico_proto.TeamStats.yellow_cards:type_name -> google.protobuf.UInt32Value
	4,  // 21: statistico_proto.TeamStats.red_cards:type_name -> google.protobuf.UInt32Value
	4,  // 22: statistico_proto.TeamStats.saves:type_name -> google.protobuf.UInt32Value
	4,  // 23: statistico_proto.TeamStats.substitutions:type_name -> google.protobuf.UInt32Value
	4,  // 24: statistico_proto.TeamStats.goal_kicks:type_name -> google.protobuf.UInt32Value
	4,  // 25: statistico_proto.TeamStats.goal_attempts:type_name -> google.protobuf.UInt32Value
	4,  // 26: statistico_proto.TeamStats.free_kicks:type_name -> google.protobuf.UInt32Value
	4,  // 27: statistico_proto.TeamStats.throw_ins:type_name -> google.protobuf.UInt32Value
	5,  // 28: statistico_proto.TeamXG.home:type_name -> google.protobuf.FloatValue
	5,  // 29: statistico_proto.TeamXG.away:type_name -> google.protobuf.FloatValue
	6,  // 30: statistico_proto.TeamStatsService.GetTeamStatsForFixture:input_type -> statistico_proto.FixtureRequest
	7,  // 31: statistico_proto.TeamStatsService.GetStatForTeam:input_type -> statistico_proto.TeamStatRequest
	0,  // 32: statistico_proto.TeamStatsService.GetTeamStatsForFixture:output_type -> statistico_proto.TeamStatsResponse
	1,  // 33: statistico_proto.TeamStatsService.GetStatForTeam:output_type -> statistico_proto.TeamStat
	32, // [32:34] is the sub-list for method output_type
	30, // [30:32] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_team_stats_proto_init() }
func file_team_stats_proto_init() {
	if File_team_stats_proto != nil {
		return
	}
	file_requests_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_team_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamXG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_team_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_team_stats_proto_goTypes,
		DependencyIndexes: file_team_stats_proto_depIdxs,
		MessageInfos:      file_team_stats_proto_msgTypes,
	}.Build()
	File_team_stats_proto = out.File
	file_team_stats_proto_rawDesc = nil
	file_team_stats_proto_goTypes = nil
	file_team_stats_proto_depIdxs = nil
}
