// source: fixture.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var competition_pb = require('./competition_pb.js');
goog.object.extend(proto, competition_pb);
var requests_pb = require('./requests_pb.js');
goog.object.extend(proto, requests_pb);
var round_pb = require('./round_pb.js');
goog.object.extend(proto, round_pb);
var season_pb = require('./season_pb.js');
goog.object.extend(proto, season_pb);
var team_pb = require('./team_pb.js');
goog.object.extend(proto, team_pb);
var venue_pb = require('./venue_pb.js');
goog.object.extend(proto, venue_pb);
goog.exportSymbol('proto.statistico.Fixture', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.Fixture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.statistico.Fixture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.statistico.Fixture.displayName = 'proto.statistico.Fixture';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.Fixture.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.Fixture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.Fixture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.Fixture.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    competition: (f = msg.getCompetition()) && competition_pb.Competition.toObject(includeInstance, f),
    season: (f = msg.getSeason()) && season_pb.Season.toObject(includeInstance, f),
    homeTeam: (f = msg.getHomeTeam()) && team_pb.Team.toObject(includeInstance, f),
    awayTeam: (f = msg.getAwayTeam()) && team_pb.Team.toObject(includeInstance, f),
    round: (f = msg.getRound()) && round_pb.Round.toObject(includeInstance, f),
    venue: (f = msg.getVenue()) && venue_pb.Venue.toObject(includeInstance, f),
    dateTime: (f = msg.getDateTime()) && common_pb.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.Fixture}
 */
proto.statistico.Fixture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.Fixture;
  return proto.statistico.Fixture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.Fixture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.Fixture}
 */
proto.statistico.Fixture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new competition_pb.Competition;
      reader.readMessage(value,competition_pb.Competition.deserializeBinaryFromReader);
      msg.setCompetition(value);
      break;
    case 3:
      var value = new season_pb.Season;
      reader.readMessage(value,season_pb.Season.deserializeBinaryFromReader);
      msg.setSeason(value);
      break;
    case 4:
      var value = new team_pb.Team;
      reader.readMessage(value,team_pb.Team.deserializeBinaryFromReader);
      msg.setHomeTeam(value);
      break;
    case 5:
      var value = new team_pb.Team;
      reader.readMessage(value,team_pb.Team.deserializeBinaryFromReader);
      msg.setAwayTeam(value);
      break;
    case 6:
      var value = new round_pb.Round;
      reader.readMessage(value,round_pb.Round.deserializeBinaryFromReader);
      msg.setRound(value);
      break;
    case 7:
      var value = new venue_pb.Venue;
      reader.readMessage(value,venue_pb.Venue.deserializeBinaryFromReader);
      msg.setVenue(value);
      break;
    case 8:
      var value = new common_pb.Date;
      reader.readMessage(value,common_pb.Date.deserializeBinaryFromReader);
      msg.setDateTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.Fixture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.Fixture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.Fixture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.Fixture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCompetition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      competition_pb.Competition.serializeBinaryToWriter
    );
  }
  f = message.getSeason();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      season_pb.Season.serializeBinaryToWriter
    );
  }
  f = message.getHomeTeam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      team_pb.Team.serializeBinaryToWriter
    );
  }
  f = message.getAwayTeam();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      team_pb.Team.serializeBinaryToWriter
    );
  }
  f = message.getRound();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      round_pb.Round.serializeBinaryToWriter
    );
  }
  f = message.getVenue();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      venue_pb.Venue.serializeBinaryToWriter
    );
  }
  f = message.getDateTime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_pb.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.statistico.Fixture.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Competition competition = 2;
 * @return {?proto.statistico.Competition}
 */
proto.statistico.Fixture.prototype.getCompetition = function() {
  return /** @type{?proto.statistico.Competition} */ (
    jspb.Message.getWrapperField(this, competition_pb.Competition, 2));
};


/**
 * @param {?proto.statistico.Competition|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setCompetition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearCompetition = function() {
  return this.setCompetition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasCompetition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Season season = 3;
 * @return {?proto.statistico.Season}
 */
proto.statistico.Fixture.prototype.getSeason = function() {
  return /** @type{?proto.statistico.Season} */ (
    jspb.Message.getWrapperField(this, season_pb.Season, 3));
};


/**
 * @param {?proto.statistico.Season|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setSeason = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearSeason = function() {
  return this.setSeason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasSeason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Team home_team = 4;
 * @return {?proto.statistico.Team}
 */
proto.statistico.Fixture.prototype.getHomeTeam = function() {
  return /** @type{?proto.statistico.Team} */ (
    jspb.Message.getWrapperField(this, team_pb.Team, 4));
};


/**
 * @param {?proto.statistico.Team|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setHomeTeam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearHomeTeam = function() {
  return this.setHomeTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasHomeTeam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Team away_team = 5;
 * @return {?proto.statistico.Team}
 */
proto.statistico.Fixture.prototype.getAwayTeam = function() {
  return /** @type{?proto.statistico.Team} */ (
    jspb.Message.getWrapperField(this, team_pb.Team, 5));
};


/**
 * @param {?proto.statistico.Team|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setAwayTeam = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearAwayTeam = function() {
  return this.setAwayTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasAwayTeam = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Round round = 6;
 * @return {?proto.statistico.Round}
 */
proto.statistico.Fixture.prototype.getRound = function() {
  return /** @type{?proto.statistico.Round} */ (
    jspb.Message.getWrapperField(this, round_pb.Round, 6));
};


/**
 * @param {?proto.statistico.Round|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setRound = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearRound = function() {
  return this.setRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasRound = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Venue venue = 7;
 * @return {?proto.statistico.Venue}
 */
proto.statistico.Fixture.prototype.getVenue = function() {
  return /** @type{?proto.statistico.Venue} */ (
    jspb.Message.getWrapperField(this, venue_pb.Venue, 7));
};


/**
 * @param {?proto.statistico.Venue|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setVenue = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearVenue = function() {
  return this.setVenue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasVenue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Date date_time = 8;
 * @return {?proto.statistico.Date}
 */
proto.statistico.Fixture.prototype.getDateTime = function() {
  return /** @type{?proto.statistico.Date} */ (
    jspb.Message.getWrapperField(this, common_pb.Date, 8));
};


/**
 * @param {?proto.statistico.Date|undefined} value
 * @return {!proto.statistico.Fixture} returns this
*/
proto.statistico.Fixture.prototype.setDateTime = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.statistico.Fixture} returns this
 */
proto.statistico.Fixture.prototype.clearDateTime = function() {
  return this.setDateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.statistico.Fixture.prototype.hasDateTime = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.statistico);
