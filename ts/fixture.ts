/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: fixture.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./competition";
import * as dependency_3 from "./requests";
import * as dependency_4 from "./round";
import * as dependency_5 from "./season";
import * as dependency_6 from "./team";
import * as dependency_7 from "./venue";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class Fixture extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            competition?: dependency_2.statistico.Competition;
            season?: dependency_5.statistico.Season;
            home_team?: dependency_6.statistico.Team;
            away_team?: dependency_6.statistico.Team;
            round?: dependency_4.statistico.Round;
            venue?: dependency_7.statistico.Venue;
            date_time?: dependency_1.statistico.Date;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("competition" in data && data.competition != undefined) {
                    this.competition = data.competition;
                }
                if ("season" in data && data.season != undefined) {
                    this.season = data.season;
                }
                if ("home_team" in data && data.home_team != undefined) {
                    this.home_team = data.home_team;
                }
                if ("away_team" in data && data.away_team != undefined) {
                    this.away_team = data.away_team;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("date_time" in data && data.date_time != undefined) {
                    this.date_time = data.date_time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get competition() {
            return pb_1.Message.getWrapperField(this, dependency_2.statistico.Competition, 2) as dependency_2.statistico.Competition;
        }
        set competition(value: dependency_2.statistico.Competition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_competition() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get season() {
            return pb_1.Message.getWrapperField(this, dependency_5.statistico.Season, 3) as dependency_5.statistico.Season;
        }
        set season(value: dependency_5.statistico.Season) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_season() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get home_team() {
            return pb_1.Message.getWrapperField(this, dependency_6.statistico.Team, 4) as dependency_6.statistico.Team;
        }
        set home_team(value: dependency_6.statistico.Team) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_home_team() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get away_team() {
            return pb_1.Message.getWrapperField(this, dependency_6.statistico.Team, 5) as dependency_6.statistico.Team;
        }
        set away_team(value: dependency_6.statistico.Team) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_away_team() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get round() {
            return pb_1.Message.getWrapperField(this, dependency_4.statistico.Round, 6) as dependency_4.statistico.Round;
        }
        set round(value: dependency_4.statistico.Round) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_round() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_7.statistico.Venue, 7) as dependency_7.statistico.Venue;
        }
        set venue(value: dependency_7.statistico.Venue) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_venue() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get date_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.statistico.Date, 8) as dependency_1.statistico.Date;
        }
        set date_time(value: dependency_1.statistico.Date) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_date_time() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: number;
            competition?: ReturnType<typeof dependency_2.statistico.Competition.prototype.toObject>;
            season?: ReturnType<typeof dependency_5.statistico.Season.prototype.toObject>;
            home_team?: ReturnType<typeof dependency_6.statistico.Team.prototype.toObject>;
            away_team?: ReturnType<typeof dependency_6.statistico.Team.prototype.toObject>;
            round?: ReturnType<typeof dependency_4.statistico.Round.prototype.toObject>;
            venue?: ReturnType<typeof dependency_7.statistico.Venue.prototype.toObject>;
            date_time?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
        }): Fixture {
            const message = new Fixture({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.competition != null) {
                message.competition = dependency_2.statistico.Competition.fromObject(data.competition);
            }
            if (data.season != null) {
                message.season = dependency_5.statistico.Season.fromObject(data.season);
            }
            if (data.home_team != null) {
                message.home_team = dependency_6.statistico.Team.fromObject(data.home_team);
            }
            if (data.away_team != null) {
                message.away_team = dependency_6.statistico.Team.fromObject(data.away_team);
            }
            if (data.round != null) {
                message.round = dependency_4.statistico.Round.fromObject(data.round);
            }
            if (data.venue != null) {
                message.venue = dependency_7.statistico.Venue.fromObject(data.venue);
            }
            if (data.date_time != null) {
                message.date_time = dependency_1.statistico.Date.fromObject(data.date_time);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                competition?: ReturnType<typeof dependency_2.statistico.Competition.prototype.toObject>;
                season?: ReturnType<typeof dependency_5.statistico.Season.prototype.toObject>;
                home_team?: ReturnType<typeof dependency_6.statistico.Team.prototype.toObject>;
                away_team?: ReturnType<typeof dependency_6.statistico.Team.prototype.toObject>;
                round?: ReturnType<typeof dependency_4.statistico.Round.prototype.toObject>;
                venue?: ReturnType<typeof dependency_7.statistico.Venue.prototype.toObject>;
                date_time?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.competition != null) {
                data.competition = this.competition.toObject();
            }
            if (this.season != null) {
                data.season = this.season.toObject();
            }
            if (this.home_team != null) {
                data.home_team = this.home_team.toObject();
            }
            if (this.away_team != null) {
                data.away_team = this.away_team.toObject();
            }
            if (this.round != null) {
                data.round = this.round.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.date_time != null) {
                data.date_time = this.date_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.has_competition)
                writer.writeMessage(2, this.competition, () => this.competition.serialize(writer));
            if (this.has_season)
                writer.writeMessage(3, this.season, () => this.season.serialize(writer));
            if (this.has_home_team)
                writer.writeMessage(4, this.home_team, () => this.home_team.serialize(writer));
            if (this.has_away_team)
                writer.writeMessage(5, this.away_team, () => this.away_team.serialize(writer));
            if (this.has_round)
                writer.writeMessage(6, this.round, () => this.round.serialize(writer));
            if (this.has_venue)
                writer.writeMessage(7, this.venue, () => this.venue.serialize(writer));
            if (this.has_date_time)
                writer.writeMessage(8, this.date_time, () => this.date_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fixture {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fixture();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.competition, () => message.competition = dependency_2.statistico.Competition.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.season, () => message.season = dependency_5.statistico.Season.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.home_team, () => message.home_team = dependency_6.statistico.Team.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.away_team, () => message.away_team = dependency_6.statistico.Team.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.round, () => message.round = dependency_4.statistico.Round.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.venue, () => message.venue = dependency_7.statistico.Venue.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.date_time, () => message.date_time = dependency_1.statistico.Date.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fixture {
            return Fixture.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFixtureServiceService {
        static definition = {
            ListSeasonFixtures: {
                path: "/statistico.FixtureService/ListSeasonFixtures",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_3.statistico.SeasonFixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.statistico.SeasonFixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Fixture) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Fixture.deserialize(new Uint8Array(bytes))
            },
            FixtureByID: {
                path: "/statistico.FixtureService/FixtureByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.statistico.FixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.statistico.FixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Fixture) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Fixture.deserialize(new Uint8Array(bytes))
            },
            Search: {
                path: "/statistico.FixtureService/Search",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_3.statistico.FixtureSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.statistico.FixtureSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Fixture) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Fixture.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListSeasonFixtures(call: grpc_1.ServerWritableStream<dependency_3.statistico.SeasonFixtureRequest, Fixture>): void;
        abstract FixtureByID(call: grpc_1.ServerUnaryCall<dependency_3.statistico.FixtureRequest, Fixture>, callback: grpc_1.sendUnaryData<Fixture>): void;
        abstract Search(call: grpc_1.ServerWritableStream<dependency_3.statistico.FixtureSearchRequest, Fixture>): void;
    }
    export class FixtureServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedFixtureServiceService.definition, "FixtureService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListSeasonFixtures: GrpcStreamServiceInterface<dependency_3.statistico.SeasonFixtureRequest, Fixture> = (message: dependency_3.statistico.SeasonFixtureRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Fixture> => {
            return super.ListSeasonFixtures(message, metadata, options);
        };
        FixtureByID: GrpcUnaryServiceInterface<dependency_3.statistico.FixtureRequest, Fixture> = (message: dependency_3.statistico.FixtureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Fixture>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Fixture>, callback?: grpc_1.requestCallback<Fixture>): grpc_1.ClientUnaryCall => {
            return super.FixtureByID(message, metadata, options, callback);
        };
        Search: GrpcStreamServiceInterface<dependency_3.statistico.FixtureSearchRequest, Fixture> = (message: dependency_3.statistico.FixtureSearchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Fixture> => {
            return super.Search(message, metadata, options);
        };
    }
}
