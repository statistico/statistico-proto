# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import requests_pb2 as requests__pb2
import team_pb2 as team__pb2


class TeamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTeamByID = channel.unary_unary(
                '/statistico_proto_data.TeamService/GetTeamByID',
                request_serializer=requests__pb2.TeamRequest.SerializeToString,
                response_deserializer=team__pb2.Team.FromString,
                )
        self.GetTeamsBySeasonId = channel.unary_stream(
                '/statistico_proto_data.TeamService/GetTeamsBySeasonId',
                request_serializer=requests__pb2.SeasonTeamsRequest.SerializeToString,
                response_deserializer=team__pb2.Team.FromString,
                )


class TeamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTeamByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTeamsBySeasonId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TeamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTeamByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTeamByID,
                    request_deserializer=requests__pb2.TeamRequest.FromString,
                    response_serializer=team__pb2.Team.SerializeToString,
            ),
            'GetTeamsBySeasonId': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTeamsBySeasonId,
                    request_deserializer=requests__pb2.SeasonTeamsRequest.FromString,
                    response_serializer=team__pb2.Team.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statistico_proto_data.TeamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TeamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTeamByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistico_proto_data.TeamService/GetTeamByID',
            requests__pb2.TeamRequest.SerializeToString,
            team__pb2.Team.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTeamsBySeasonId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/statistico_proto_data.TeamService/GetTeamsBySeasonId',
            requests__pb2.SeasonTeamsRequest.SerializeToString,
            team__pb2.Team.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
