// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OddsWarehouseServiceClient is the client API for OddsWarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OddsWarehouseServiceClient interface {
	MarketRunnerSearch(ctx context.Context, in *MarketRunnerRequest, opts ...grpc.CallOption) (OddsWarehouseService_MarketRunnerSearchClient, error)
}

type oddsWarehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOddsWarehouseServiceClient(cc grpc.ClientConnInterface) OddsWarehouseServiceClient {
	return &oddsWarehouseServiceClient{cc}
}

func (c *oddsWarehouseServiceClient) MarketRunnerSearch(ctx context.Context, in *MarketRunnerRequest, opts ...grpc.CallOption) (OddsWarehouseService_MarketRunnerSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &OddsWarehouseService_ServiceDesc.Streams[0], "/statistico.OddsWarehouseService/MarketRunnerSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &oddsWarehouseServiceMarketRunnerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OddsWarehouseService_MarketRunnerSearchClient interface {
	Recv() (*MarketRunner, error)
	grpc.ClientStream
}

type oddsWarehouseServiceMarketRunnerSearchClient struct {
	grpc.ClientStream
}

func (x *oddsWarehouseServiceMarketRunnerSearchClient) Recv() (*MarketRunner, error) {
	m := new(MarketRunner)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OddsWarehouseServiceServer is the server API for OddsWarehouseService service.
// All implementations must embed UnimplementedOddsWarehouseServiceServer
// for forward compatibility
type OddsWarehouseServiceServer interface {
	MarketRunnerSearch(*MarketRunnerRequest, OddsWarehouseService_MarketRunnerSearchServer) error
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

// UnimplementedOddsWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOddsWarehouseServiceServer struct {
}

func (UnimplementedOddsWarehouseServiceServer) MarketRunnerSearch(*MarketRunnerRequest, OddsWarehouseService_MarketRunnerSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketRunnerSearch not implemented")
}
func (UnimplementedOddsWarehouseServiceServer) mustEmbedUnimplementedOddsWarehouseServiceServer() {}

// UnsafeOddsWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OddsWarehouseServiceServer will
// result in compilation errors.
type UnsafeOddsWarehouseServiceServer interface {
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

func RegisterOddsWarehouseServiceServer(s grpc.ServiceRegistrar, srv OddsWarehouseServiceServer) {
	s.RegisterService(&OddsWarehouseService_ServiceDesc, srv)
}

func _OddsWarehouseService_MarketRunnerSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketRunnerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OddsWarehouseServiceServer).MarketRunnerSearch(m, &oddsWarehouseServiceMarketRunnerSearchServer{stream})
}

type OddsWarehouseService_MarketRunnerSearchServer interface {
	Send(*MarketRunner) error
	grpc.ServerStream
}

type oddsWarehouseServiceMarketRunnerSearchServer struct {
	grpc.ServerStream
}

func (x *oddsWarehouseServiceMarketRunnerSearchServer) Send(m *MarketRunner) error {
	return x.ServerStream.SendMsg(m)
}

// OddsWarehouseService_ServiceDesc is the grpc.ServiceDesc for OddsWarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OddsWarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.OddsWarehouseService",
	HandlerType: (*OddsWarehouseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MarketRunnerSearch",
			Handler:       _OddsWarehouseService_MarketRunnerSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "odds_warehouse.proto",
}
