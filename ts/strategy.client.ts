// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "strategy.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StrategyService } from "./strategy";
import type { ListUserStrategiesRequest } from "./requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Strategy } from "./strategy";
import type { CreateStrategyRequest } from "./requests";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.StrategyService
 */
export interface IStrategyServiceClient {
    /**
     * @generated from protobuf rpc: CreateStrategy(statistico.CreateStrategyRequest) returns (statistico.Strategy);
     */
    createStrategy(input: CreateStrategyRequest, options?: RpcOptions): UnaryCall<CreateStrategyRequest, Strategy>;
    /**
     * @generated from protobuf rpc: ListUserStrategies(statistico.ListUserStrategiesRequest) returns (stream statistico.Strategy);
     */
    listUserStrategies(input: ListUserStrategiesRequest, options?: RpcOptions): ServerStreamingCall<ListUserStrategiesRequest, Strategy>;
}
/**
 * @generated from protobuf service statistico.StrategyService
 */
export class StrategyServiceClient implements IStrategyServiceClient, ServiceInfo {
    typeName = StrategyService.typeName;
    methods = StrategyService.methods;
    options = StrategyService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateStrategy(statistico.CreateStrategyRequest) returns (statistico.Strategy);
     */
    createStrategy(input: CreateStrategyRequest, options?: RpcOptions): UnaryCall<CreateStrategyRequest, Strategy> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateStrategyRequest, Strategy>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUserStrategies(statistico.ListUserStrategiesRequest) returns (stream statistico.Strategy);
     */
    listUserStrategies(input: ListUserStrategiesRequest, options?: RpcOptions): ServerStreamingCall<ListUserStrategiesRequest, Strategy> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUserStrategiesRequest, Strategy>("serverStreaming", this._transport, method, opt, input);
    }
}
