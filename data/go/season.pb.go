// Code generated by protoc-gen-go. DO NOT EDIT.
// source: season.proto

package statisticodata

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Season struct {
	Id                   uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsCurrent            *wrappers.BoolValue `protobuf:"bytes,3,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f802e8f3a685f05, []int{0}
}

func (m *Season) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Season.Unmarshal(m, b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Season.Marshal(b, m, deterministic)
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return xxx_messageInfo_Season.Size(m)
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

func (m *Season) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Season) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Season) GetIsCurrent() *wrappers.BoolValue {
	if m != nil {
		return m.IsCurrent
	}
	return nil
}

func init() {
	proto.RegisterType((*Season)(nil), "statisticodata.Season")
}

func init() {
	proto.RegisterFile("season.proto", fileDescriptor_9f802e8f3a685f05)
}

var fileDescriptor_9f802e8f3a685f05 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x4d, 0x5d, 0x16, 0x36, 0x6a, 0xc1, 0x1c, 0xa4, 0xf4, 0x20, 0xa5, 0xa7, 0x9e, 0xb2,
	0xb2, 0x9e, 0xbc, 0xba, 0xa0, 0xf7, 0x56, 0xbc, 0x6a, 0xb6, 0x1d, 0xcb, 0x40, 0xdb, 0xa9, 0x99,
	0xa9, 0xfe, 0x43, 0x7f, 0x97, 0xd8, 0xac, 0xe0, 0x8a, 0x07, 0x6f, 0xc9, 0xcb, 0x97, 0xf7, 0xf1,
	0xf4, 0x29, 0x83, 0x63, 0x1a, 0xec, 0xe8, 0x49, 0xc8, 0xc4, 0x2c, 0x4e, 0x90, 0x05, 0x6b, 0x6a,
	0x9c, 0xb8, 0xf4, 0xb2, 0x25, 0x6a, 0x3b, 0x58, 0xcf, 0xaf, 0xbb, 0xe9, 0x65, 0xfd, 0xee, 0xdd,
	0x38, 0x82, 0xe7, 0xc0, 0xa7, 0xb1, 0x87, 0xd7, 0x09, 0x58, 0xf6, 0xf7, 0xbc, 0xd5, 0xcb, 0x6a,
	0xee, 0x33, 0xb1, 0x8e, 0xb0, 0x49, 0x54, 0xa6, 0x8a, 0x45, 0x19, 0x61, 0x63, 0x8c, 0x5e, 0x0c,
	0xae, 0x87, 0x24, 0xca, 0x54, 0xb1, 0x2a, 0xe7, 0xb3, 0xb9, 0xd1, 0x1a, 0xf9, 0xa9, 0x9e, 0xbc,
	0x87, 0x41, 0x92, 0xe3, 0x4c, 0x15, 0x27, 0x9b, 0xd4, 0x06, 0xa5, 0xfd, 0x56, 0xda, 0x5b, 0xa2,
	0xee, 0xd1, 0x75, 0x13, 0x94, 0x2b, 0xe4, 0x6d, 0x80, 0x37, 0x1f, 0x4a, 0x9f, 0x05, 0x53, 0x05,
	0xfe, 0x0d, 0x6b, 0x30, 0xcf, 0x3a, 0xb9, 0x07, 0x09, 0x19, 0xdf, 0x91, 0xdf, 0x52, 0x3f, 0x82,
	0xa0, 0x20, 0x0d, 0xa6, 0xb0, 0x87, 0xbb, 0x6c, 0xc0, 0x7e, 0x20, 0x65, 0xd8, 0x91, 0x5e, 0xfc,
	0x4d, 0xe6, 0x47, 0x57, 0xca, 0x54, 0xfa, 0xfc, 0xc0, 0xf0, 0x00, 0xae, 0x37, 0xf9, 0xef, 0x0f,
	0x5f, 0xe9, 0x9e, 0xf9, 0x47, 0xe9, 0x6e, 0x39, 0xef, 0xbc, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0x92, 0x3f, 0x40, 0x88, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SeasonServiceClient interface {
	GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForCompetitionClient, error)
	GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForTeamClient, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForCompetitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SeasonService_serviceDesc.Streams[0], "/statisticodata.SeasonService/GetSeasonsForCompetition", opts...)
	if err != nil {
		return nil, err
	}
	x := &seasonServiceGetSeasonsForCompetitionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeasonService_GetSeasonsForCompetitionClient interface {
	Recv() (*Season, error)
	grpc.ClientStream
}

type seasonServiceGetSeasonsForCompetitionClient struct {
	grpc.ClientStream
}

func (x *seasonServiceGetSeasonsForCompetitionClient) Recv() (*Season, error) {
	m := new(Season)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seasonServiceClient) GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (SeasonService_GetSeasonsForTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SeasonService_serviceDesc.Streams[1], "/statisticodata.SeasonService/GetSeasonsForTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &seasonServiceGetSeasonsForTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeasonService_GetSeasonsForTeamClient interface {
	Recv() (*Season, error)
	grpc.ClientStream
}

type seasonServiceGetSeasonsForTeamClient struct {
	grpc.ClientStream
}

func (x *seasonServiceGetSeasonsForTeamClient) Recv() (*Season, error) {
	m := new(Season)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeasonServiceServer is the server API for SeasonService service.
type SeasonServiceServer interface {
	GetSeasonsForCompetition(*SeasonCompetitionRequest, SeasonService_GetSeasonsForCompetitionServer) error
	GetSeasonsForTeam(*TeamSeasonsRequest, SeasonService_GetSeasonsForTeamServer) error
}

// UnimplementedSeasonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSeasonServiceServer struct {
}

func (*UnimplementedSeasonServiceServer) GetSeasonsForCompetition(req *SeasonCompetitionRequest, srv SeasonService_GetSeasonsForCompetitionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSeasonsForCompetition not implemented")
}
func (*UnimplementedSeasonServiceServer) GetSeasonsForTeam(req *TeamSeasonsRequest, srv SeasonService_GetSeasonsForTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSeasonsForTeam not implemented")
}

func RegisterSeasonServiceServer(s *grpc.Server, srv SeasonServiceServer) {
	s.RegisterService(&_SeasonService_serviceDesc, srv)
}

func _SeasonService_GetSeasonsForCompetition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeasonCompetitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeasonServiceServer).GetSeasonsForCompetition(m, &seasonServiceGetSeasonsForCompetitionServer{stream})
}

type SeasonService_GetSeasonsForCompetitionServer interface {
	Send(*Season) error
	grpc.ServerStream
}

type seasonServiceGetSeasonsForCompetitionServer struct {
	grpc.ServerStream
}

func (x *seasonServiceGetSeasonsForCompetitionServer) Send(m *Season) error {
	return x.ServerStream.SendMsg(m)
}

func _SeasonService_GetSeasonsForTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeamSeasonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeasonServiceServer).GetSeasonsForTeam(m, &seasonServiceGetSeasonsForTeamServer{stream})
}

type SeasonService_GetSeasonsForTeamServer interface {
	Send(*Season) error
	grpc.ServerStream
}

type seasonServiceGetSeasonsForTeamServer struct {
	grpc.ServerStream
}

func (x *seasonServiceGetSeasonsForTeamServer) Send(m *Season) error {
	return x.ServerStream.SendMsg(m)
}

var _SeasonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statisticodata.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeasonsForCompetition",
			Handler:       _SeasonService_GetSeasonsForCompetition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSeasonsForTeam",
			Handler:       _SeasonService_GetSeasonsForTeam_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "season.proto",
}
