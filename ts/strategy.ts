// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "strategy.proto" (package "statistico", syntax proto3)
// tslint:disable
import { ListUserStrategiesRequest } from "./requests";
import { CreateStrategyRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StrategyStatusEnum } from "./enum";
import { StakingPlan } from "./utility";
import { FloatValue } from "./google/protobuf/wrappers";
import { MarketEnum } from "./enum";
/**
 * @generated from protobuf message statistico.Strategy
 */
export interface Strategy {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
    /**
     * @generated from protobuf field: statistico.MarketEnum market = 4;
     */
    market: MarketEnum;
    /**
     * @generated from protobuf field: google.protobuf.FloatValue min_odds = 5;
     */
    minOdds?: FloatValue;
    /**
     * @generated from protobuf field: google.protobuf.FloatValue max_odds = 6;
     */
    maxOdds?: FloatValue;
    /**
     * @generated from protobuf field: repeated uint64 competition_ids = 7;
     */
    competitionIds: bigint[];
    /**
     * @generated from protobuf field: statistico.StakingPlan staking_plan = 8;
     */
    stakingPlan?: StakingPlan;
    /**
     * @generated from protobuf field: statistico.StrategyStatusEnum status = 9;
     */
    status: StrategyStatusEnum;
    /**
     * @generated from protobuf field: float starting_fund = 10;
     */
    startingFund: number;
    /**
     * @generated from protobuf field: uint64 created_at = 11;
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: uint64 updated_at = 12;
     */
    updatedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Strategy$Type extends MessageType<Strategy> {
    constructor() {
        super("statistico.Strategy", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "market", kind: "enum", T: () => ["statistico.MarketEnum", MarketEnum] },
            { no: 5, name: "min_odds", kind: "message", T: () => FloatValue },
            { no: 6, name: "max_odds", kind: "message", T: () => FloatValue },
            { no: 7, name: "competition_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "staking_plan", kind: "message", T: () => StakingPlan },
            { no: 9, name: "status", kind: "enum", T: () => ["statistico.StrategyStatusEnum", StrategyStatusEnum] },
            { no: 10, name: "starting_fund", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "created_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "updated_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Strategy>): Strategy {
        const message = { id: "", name: "", userId: "", market: 0, competitionIds: [], status: 0, startingFund: 0, createdAt: 0n, updatedAt: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Strategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Strategy): Strategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string user_id */ 3:
                    message.userId = reader.string();
                    break;
                case /* statistico.MarketEnum market */ 4:
                    message.market = reader.int32();
                    break;
                case /* google.protobuf.FloatValue min_odds */ 5:
                    message.minOdds = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.minOdds);
                    break;
                case /* google.protobuf.FloatValue max_odds */ 6:
                    message.maxOdds = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOdds);
                    break;
                case /* repeated uint64 competition_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.competitionIds.push(reader.uint64().toBigInt());
                    else
                        message.competitionIds.push(reader.uint64().toBigInt());
                    break;
                case /* statistico.StakingPlan staking_plan */ 8:
                    message.stakingPlan = StakingPlan.internalBinaryRead(reader, reader.uint32(), options, message.stakingPlan);
                    break;
                case /* statistico.StrategyStatusEnum status */ 9:
                    message.status = reader.int32();
                    break;
                case /* float starting_fund */ 10:
                    message.startingFund = reader.float();
                    break;
                case /* uint64 created_at */ 11:
                    message.createdAt = reader.uint64().toBigInt();
                    break;
                case /* uint64 updated_at */ 12:
                    message.updatedAt = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Strategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string user_id = 3; */
        if (message.userId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userId);
        /* statistico.MarketEnum market = 4; */
        if (message.market !== 0)
            writer.tag(4, WireType.Varint).int32(message.market);
        /* google.protobuf.FloatValue min_odds = 5; */
        if (message.minOdds)
            FloatValue.internalBinaryWrite(message.minOdds, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.FloatValue max_odds = 6; */
        if (message.maxOdds)
            FloatValue.internalBinaryWrite(message.maxOdds, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 competition_ids = 7; */
        if (message.competitionIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.competitionIds.length; i++)
                writer.uint64(message.competitionIds[i]);
            writer.join();
        }
        /* statistico.StakingPlan staking_plan = 8; */
        if (message.stakingPlan)
            StakingPlan.internalBinaryWrite(message.stakingPlan, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* statistico.StrategyStatusEnum status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        /* float starting_fund = 10; */
        if (message.startingFund !== 0)
            writer.tag(10, WireType.Bit32).float(message.startingFund);
        /* uint64 created_at = 11; */
        if (message.createdAt !== 0n)
            writer.tag(11, WireType.Varint).uint64(message.createdAt);
        /* uint64 updated_at = 12; */
        if (message.updatedAt !== 0n)
            writer.tag(12, WireType.Varint).uint64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Strategy
 */
export const Strategy = new Strategy$Type();
/**
 * @generated ServiceType for protobuf service statistico.StrategyService
 */
export const StrategyService = new ServiceType("statistico.StrategyService", [
    { name: "CreateStrategy", options: {}, I: CreateStrategyRequest, O: Strategy },
    { name: "ListUserStrategies", serverStreaming: true, options: {}, I: ListUserStrategiesRequest, O: Strategy }
]);
