// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "ratings.proto" (package "statistico", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { StringValue } from "./google/protobuf/wrappers";
import { UInt64Value } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message statistico.FixtureRatingRequest
 */
export interface FixtureRatingRequest {
    /**
     * @generated from protobuf field: uint64 fixture_id = 1;
     */
    fixtureId: bigint;
}
/**
 * @generated from protobuf message statistico.TeamRatingRequest
 */
export interface TeamRatingRequest {
    /**
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.UInt64Value season_id = 2;
     */
    seasonId?: UInt64Value;
    /**
     * @generated from protobuf field: google.protobuf.StringValue date_before = 3;
     */
    dateBefore?: StringValue;
    /**
     * @generated from protobuf field: string sort = 4;
     */
    sort: string;
}
/**
 * @generated from protobuf message statistico.RatingResponse
 */
export interface RatingResponse {
    /**
     * @generated from protobuf field: repeated statistico.TeamRating ratings = 1;
     */
    ratings: TeamRating[];
}
/**
 * @generated from protobuf message statistico.TeamRating
 */
export interface TeamRating {
    /**
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: uint64 fixture_id = 2;
     */
    fixtureId: bigint;
    /**
     * @generated from protobuf field: uint64 season_id = 3;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: statistico.Points attack = 4;
     */
    attack?: Points;
    /**
     * @generated from protobuf field: statistico.Points defence = 5;
     */
    defence?: Points;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp fixture_date = 6;
     */
    fixtureDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 7;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message statistico.Points
 */
export interface Points {
    /**
     * @generated from protobuf field: float points = 1;
     */
    points: number;
    /**
     * @generated from protobuf field: float difference = 2;
     */
    difference: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FixtureRatingRequest$Type extends MessageType<FixtureRatingRequest> {
    constructor() {
        super("statistico.FixtureRatingRequest", [
            { no: 1, name: "fixture_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FixtureRatingRequest>): FixtureRatingRequest {
        const message = { fixtureId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixtureRatingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixtureRatingRequest): FixtureRatingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fixture_id */ 1:
                    message.fixtureId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixtureRatingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fixture_id = 1; */
        if (message.fixtureId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.fixtureId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.FixtureRatingRequest
 */
export const FixtureRatingRequest = new FixtureRatingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRatingRequest$Type extends MessageType<TeamRatingRequest> {
    constructor() {
        super("statistico.TeamRatingRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "season_id", kind: "message", T: () => UInt64Value },
            { no: 3, name: "date_before", kind: "message", T: () => StringValue },
            { no: 4, name: "sort", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamRatingRequest>): TeamRatingRequest {
        const message = { teamId: 0n, sort: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamRatingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRatingRequest): TeamRatingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.UInt64Value season_id */ 2:
                    message.seasonId = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* google.protobuf.StringValue date_before */ 3:
                    message.dateBefore = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateBefore);
                    break;
                case /* string sort */ 4:
                    message.sort = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRatingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* google.protobuf.UInt64Value season_id = 2; */
        if (message.seasonId)
            UInt64Value.internalBinaryWrite(message.seasonId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_before = 3; */
        if (message.dateBefore)
            StringValue.internalBinaryWrite(message.dateBefore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string sort = 4; */
        if (message.sort !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamRatingRequest
 */
export const TeamRatingRequest = new TeamRatingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RatingResponse$Type extends MessageType<RatingResponse> {
    constructor() {
        super("statistico.RatingResponse", [
            { no: 1, name: "ratings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamRating }
        ]);
    }
    create(value?: PartialMessage<RatingResponse>): RatingResponse {
        const message = { ratings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RatingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RatingResponse): RatingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated statistico.TeamRating ratings */ 1:
                    message.ratings.push(TeamRating.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RatingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated statistico.TeamRating ratings = 1; */
        for (let i = 0; i < message.ratings.length; i++)
            TeamRating.internalBinaryWrite(message.ratings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.RatingResponse
 */
export const RatingResponse = new RatingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRating$Type extends MessageType<TeamRating> {
    constructor() {
        super("statistico.TeamRating", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "fixture_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "attack", kind: "message", T: () => Points },
            { no: 5, name: "defence", kind: "message", T: () => Points },
            { no: 6, name: "fixture_date", kind: "message", T: () => Timestamp },
            { no: 7, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TeamRating>): TeamRating {
        const message = { teamId: 0n, fixtureId: 0n, seasonId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamRating>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRating): TeamRating {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* uint64 fixture_id */ 2:
                    message.fixtureId = reader.uint64().toBigInt();
                    break;
                case /* uint64 season_id */ 3:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                case /* statistico.Points attack */ 4:
                    message.attack = Points.internalBinaryRead(reader, reader.uint32(), options, message.attack);
                    break;
                case /* statistico.Points defence */ 5:
                    message.defence = Points.internalBinaryRead(reader, reader.uint32(), options, message.defence);
                    break;
                case /* google.protobuf.Timestamp fixture_date */ 6:
                    message.fixtureDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.fixtureDate);
                    break;
                case /* google.protobuf.Timestamp timestamp */ 7:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRating, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 fixture_id = 2; */
        if (message.fixtureId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.fixtureId);
        /* uint64 season_id = 3; */
        if (message.seasonId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.seasonId);
        /* statistico.Points attack = 4; */
        if (message.attack)
            Points.internalBinaryWrite(message.attack, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* statistico.Points defence = 5; */
        if (message.defence)
            Points.internalBinaryWrite(message.defence, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp fixture_date = 6; */
        if (message.fixtureDate)
            Timestamp.internalBinaryWrite(message.fixtureDate, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timestamp = 7; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamRating
 */
export const TeamRating = new TeamRating$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Points$Type extends MessageType<Points> {
    constructor() {
        super("statistico.Points", [
            { no: 1, name: "points", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "difference", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Points>): Points {
        const message = { points: 0, difference: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Points>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Points): Points {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float points */ 1:
                    message.points = reader.float();
                    break;
                case /* float difference */ 2:
                    message.difference = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Points, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float points = 1; */
        if (message.points !== 0)
            writer.tag(1, WireType.Bit32).float(message.points);
        /* float difference = 2; */
        if (message.difference !== 0)
            writer.tag(2, WireType.Bit32).float(message.difference);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Points
 */
export const Points = new Points$Type();
/**
 * @generated ServiceType for protobuf service statistico.TeamRatingService
 */
export const TeamRatingService = new ServiceType("statistico.TeamRatingService", [
    { name: "GetFixtureRatings", options: {}, I: FixtureRatingRequest, O: RatingResponse },
    { name: "GetTeamRatings", options: {}, I: TeamRatingRequest, O: RatingResponse }
]);
