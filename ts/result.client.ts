// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "result.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ResultService } from "./result";
import type { TeamResultRequest } from "./requests";
import type { SeasonRequest } from "./requests";
import type { HistoricalResultRequest } from "./requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Result } from "./result";
import type { ResultRequest } from "./requests";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.ResultService
 */
export interface IResultServiceClient {
    /**
     * @generated from protobuf rpc: GetById(statistico.ResultRequest) returns (statistico.Result);
     */
    getById(input: ResultRequest, options?: RpcOptions): UnaryCall<ResultRequest, Result>;
    /**
     * @generated from protobuf rpc: GetHistoricalResultsForFixture(statistico.HistoricalResultRequest) returns (stream statistico.Result);
     */
    getHistoricalResultsForFixture(input: HistoricalResultRequest, options?: RpcOptions): ServerStreamingCall<HistoricalResultRequest, Result>;
    /**
     * @generated from protobuf rpc: GetResultsForSeason(statistico.SeasonRequest) returns (stream statistico.Result);
     */
    getResultsForSeason(input: SeasonRequest, options?: RpcOptions): ServerStreamingCall<SeasonRequest, Result>;
    /**
     * @generated from protobuf rpc: GetResultsForTeam(statistico.TeamResultRequest) returns (stream statistico.Result);
     */
    getResultsForTeam(input: TeamResultRequest, options?: RpcOptions): ServerStreamingCall<TeamResultRequest, Result>;
}
/**
 * @generated from protobuf service statistico.ResultService
 */
export class ResultServiceClient implements IResultServiceClient, ServiceInfo {
    typeName = ResultService.typeName;
    methods = ResultService.methods;
    options = ResultService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetById(statistico.ResultRequest) returns (statistico.Result);
     */
    getById(input: ResultRequest, options?: RpcOptions): UnaryCall<ResultRequest, Result> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResultRequest, Result>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetHistoricalResultsForFixture(statistico.HistoricalResultRequest) returns (stream statistico.Result);
     */
    getHistoricalResultsForFixture(input: HistoricalResultRequest, options?: RpcOptions): ServerStreamingCall<HistoricalResultRequest, Result> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HistoricalResultRequest, Result>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetResultsForSeason(statistico.SeasonRequest) returns (stream statistico.Result);
     */
    getResultsForSeason(input: SeasonRequest, options?: RpcOptions): ServerStreamingCall<SeasonRequest, Result> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SeasonRequest, Result>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetResultsForTeam(statistico.TeamResultRequest) returns (stream statistico.Result);
     */
    getResultsForTeam(input: TeamResultRequest, options?: RpcOptions): ServerStreamingCall<TeamResultRequest, Result> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamResultRequest, Result>("serverStreaming", this._transport, method, opt, input);
    }
}
