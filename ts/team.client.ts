// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "team.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TeamService } from "./team";
import type { SeasonTeamsRequest } from "./requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { TeamsResponse } from "./team";
import type { CompetitionTeamsRequest } from "./team";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Team } from "./team";
import type { TeamRequest } from "./requests";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.TeamService
 */
export interface ITeamServiceClient {
    /**
     * @generated from protobuf rpc: GetTeamByID(statistico.TeamRequest) returns (statistico.Team);
     */
    getTeamByID(input: TeamRequest, options?: RpcOptions): UnaryCall<TeamRequest, Team>;
    /**
     * @generated from protobuf rpc: GetTeamsByCompetitionId(statistico.CompetitionTeamsRequest) returns (statistico.TeamsResponse);
     */
    getTeamsByCompetitionId(input: CompetitionTeamsRequest, options?: RpcOptions): UnaryCall<CompetitionTeamsRequest, TeamsResponse>;
    /**
     * @generated from protobuf rpc: GetTeamsBySeasonId(statistico.SeasonTeamsRequest) returns (stream statistico.Team);
     */
    getTeamsBySeasonId(input: SeasonTeamsRequest, options?: RpcOptions): ServerStreamingCall<SeasonTeamsRequest, Team>;
}
/**
 * @generated from protobuf service statistico.TeamService
 */
export class TeamServiceClient implements ITeamServiceClient, ServiceInfo {
    typeName = TeamService.typeName;
    methods = TeamService.methods;
    options = TeamService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTeamByID(statistico.TeamRequest) returns (statistico.Team);
     */
    getTeamByID(input: TeamRequest, options?: RpcOptions): UnaryCall<TeamRequest, Team> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTeamsByCompetitionId(statistico.CompetitionTeamsRequest) returns (statistico.TeamsResponse);
     */
    getTeamsByCompetitionId(input: CompetitionTeamsRequest, options?: RpcOptions): UnaryCall<CompetitionTeamsRequest, TeamsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompetitionTeamsRequest, TeamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTeamsBySeasonId(statistico.SeasonTeamsRequest) returns (stream statistico.Team);
     */
    getTeamsBySeasonId(input: SeasonTeamsRequest, options?: RpcOptions): ServerStreamingCall<SeasonTeamsRequest, Team> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SeasonTeamsRequest, Team>("serverStreaming", this._transport, method, opt, input);
    }
}
