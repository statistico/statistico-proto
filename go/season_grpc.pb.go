// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: season.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeasonService_GetSeasonsForCompetition_FullMethodName = "/statistico.SeasonService/GetSeasonsForCompetition"
	SeasonService_GetSeasonsForTeam_FullMethodName        = "/statistico.SeasonService/GetSeasonsForTeam"
)

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonServiceClient interface {
	GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Season], error)
	GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (*TeamSeasonsResponse, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) GetSeasonsForCompetition(ctx context.Context, in *SeasonCompetitionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Season], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SeasonService_ServiceDesc.Streams[0], SeasonService_GetSeasonsForCompetition_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SeasonCompetitionRequest, Season]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SeasonService_GetSeasonsForCompetitionClient = grpc.ServerStreamingClient[Season]

func (c *seasonServiceClient) GetSeasonsForTeam(ctx context.Context, in *TeamSeasonsRequest, opts ...grpc.CallOption) (*TeamSeasonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamSeasonsResponse)
	err := c.cc.Invoke(ctx, SeasonService_GetSeasonsForTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonServiceServer is the server API for SeasonService service.
// All implementations must embed UnimplementedSeasonServiceServer
// for forward compatibility.
type SeasonServiceServer interface {
	GetSeasonsForCompetition(*SeasonCompetitionRequest, grpc.ServerStreamingServer[Season]) error
	GetSeasonsForTeam(context.Context, *TeamSeasonsRequest) (*TeamSeasonsResponse, error)
	mustEmbedUnimplementedSeasonServiceServer()
}

// UnimplementedSeasonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeasonServiceServer struct{}

func (UnimplementedSeasonServiceServer) GetSeasonsForCompetition(*SeasonCompetitionRequest, grpc.ServerStreamingServer[Season]) error {
	return status.Errorf(codes.Unimplemented, "method GetSeasonsForCompetition not implemented")
}
func (UnimplementedSeasonServiceServer) GetSeasonsForTeam(context.Context, *TeamSeasonsRequest) (*TeamSeasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonsForTeam not implemented")
}
func (UnimplementedSeasonServiceServer) mustEmbedUnimplementedSeasonServiceServer() {}
func (UnimplementedSeasonServiceServer) testEmbeddedByValue()                       {}

// UnsafeSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonServiceServer will
// result in compilation errors.
type UnsafeSeasonServiceServer interface {
	mustEmbedUnimplementedSeasonServiceServer()
}

func RegisterSeasonServiceServer(s grpc.ServiceRegistrar, srv SeasonServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeasonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeasonService_ServiceDesc, srv)
}

func _SeasonService_GetSeasonsForCompetition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeasonCompetitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeasonServiceServer).GetSeasonsForCompetition(m, &grpc.GenericServerStream[SeasonCompetitionRequest, Season]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SeasonService_GetSeasonsForCompetitionServer = grpc.ServerStreamingServer[Season]

func _SeasonService_GetSeasonsForTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamSeasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).GetSeasonsForTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_GetSeasonsForTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).GetSeasonsForTeam(ctx, req.(*TeamSeasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonService_ServiceDesc is the grpc.ServiceDesc for SeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeasonsForTeam",
			Handler:    _SeasonService_GetSeasonsForTeam_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeasonsForCompetition",
			Handler:       _SeasonService_GetSeasonsForCompetition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "season.proto",
}
