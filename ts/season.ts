// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "season.proto" (package "statistico", syntax proto3)
// tslint:disable
import { SeasonCompetitionRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "./google/protobuf/wrappers";
import { StringValue } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message statistico.TeamSeasonsRequest
 */
export interface TeamSeasonsRequest {
    /**
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
    /**
     * Order the name column to return seasons in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 2;
     */
    sort?: StringValue;
    /**
     * Boolean flag to include seasons for cup competitions in response
     *
     * @generated from protobuf field: google.protobuf.BoolValue include_cup = 3;
     */
    includeCup?: BoolValue;
}
/**
 * @generated from protobuf message statistico.TeamSeasonsResponse
 */
export interface TeamSeasonsResponse {
    /**
     * @generated from protobuf field: repeated statistico.Season seasons = 1;
     */
    seasons: Season[];
}
/**
 * @generated from protobuf message statistico.Season
 */
export interface Season {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.BoolValue is_current = 3;
     */
    isCurrent?: BoolValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamSeasonsRequest$Type extends MessageType<TeamSeasonsRequest> {
    constructor() {
        super("statistico.TeamSeasonsRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sort", kind: "message", T: () => StringValue },
            { no: 3, name: "include_cup", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<TeamSeasonsRequest>): TeamSeasonsRequest {
        const message = { teamId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamSeasonsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamSeasonsRequest): TeamSeasonsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.StringValue sort */ 2:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* google.protobuf.BoolValue include_cup */ 3:
                    message.includeCup = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.includeCup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamSeasonsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* google.protobuf.StringValue sort = 2; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue include_cup = 3; */
        if (message.includeCup)
            BoolValue.internalBinaryWrite(message.includeCup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamSeasonsRequest
 */
export const TeamSeasonsRequest = new TeamSeasonsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamSeasonsResponse$Type extends MessageType<TeamSeasonsResponse> {
    constructor() {
        super("statistico.TeamSeasonsResponse", [
            { no: 1, name: "seasons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Season }
        ]);
    }
    create(value?: PartialMessage<TeamSeasonsResponse>): TeamSeasonsResponse {
        const message = { seasons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamSeasonsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamSeasonsResponse): TeamSeasonsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated statistico.Season seasons */ 1:
                    message.seasons.push(Season.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamSeasonsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated statistico.Season seasons = 1; */
        for (let i = 0; i < message.seasons.length; i++)
            Season.internalBinaryWrite(message.seasons[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamSeasonsResponse
 */
export const TeamSeasonsResponse = new TeamSeasonsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Season$Type extends MessageType<Season> {
    constructor() {
        super("statistico.Season", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_current", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<Season>): Season {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Season>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Season): Season {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.BoolValue is_current */ 3:
                    message.isCurrent = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.isCurrent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Season, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.BoolValue is_current = 3; */
        if (message.isCurrent)
            BoolValue.internalBinaryWrite(message.isCurrent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Season
 */
export const Season = new Season$Type();
/**
 * @generated ServiceType for protobuf service statistico.SeasonService
 */
export const SeasonService = new ServiceType("statistico.SeasonService", [
    { name: "GetSeasonsForCompetition", serverStreaming: true, options: {}, I: SeasonCompetitionRequest, O: Season },
    { name: "GetSeasonsForTeam", options: {}, I: TeamSeasonsRequest, O: TeamSeasonsResponse }
]);
