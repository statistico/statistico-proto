/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: player_stats.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./requests";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class TeamSeasonPlayStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            season_id?: number;
            date_before?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get date_before() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set date_before(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            team_id?: number;
            season_id?: number;
            date_before?: number;
        }): TeamSeasonPlayStatsRequest {
            const message = new TeamSeasonPlayStatsRequest({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.date_before != null) {
                message.date_before = data.date_before;
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                season_id?: number;
                date_before?: number;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.date_before != null) {
                data.date_before = this.date_before;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeUint64(1, this.team_id);
            if (this.season_id != 0)
                writer.writeUint64(2, this.season_id);
            if (this.date_before != 0)
                writer.writeUint64(3, this.date_before);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamSeasonPlayStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamSeasonPlayStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readUint64();
                        break;
                    case 2:
                        message.season_id = reader.readUint64();
                        break;
                    case 3:
                        message.date_before = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamSeasonPlayStatsRequest {
            return TeamSeasonPlayStatsRequest.deserialize(bytes);
        }
    }
    export class PlayerStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home_team?: PlayerStats[];
            away_team?: PlayerStats[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home_team" in data && data.home_team != undefined) {
                    this.home_team = data.home_team;
                }
                if ("away_team" in data && data.away_team != undefined) {
                    this.away_team = data.away_team;
                }
            }
        }
        get home_team() {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerStats, 1) as PlayerStats[];
        }
        set home_team(value: PlayerStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get away_team() {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerStats, 2) as PlayerStats[];
        }
        set away_team(value: PlayerStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            home_team?: ReturnType<typeof PlayerStats.prototype.toObject>[];
            away_team?: ReturnType<typeof PlayerStats.prototype.toObject>[];
        }): PlayerStatsResponse {
            const message = new PlayerStatsResponse({});
            if (data.home_team != null) {
                message.home_team = data.home_team.map(item => PlayerStats.fromObject(item));
            }
            if (data.away_team != null) {
                message.away_team = data.away_team.map(item => PlayerStats.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                home_team?: ReturnType<typeof PlayerStats.prototype.toObject>[];
                away_team?: ReturnType<typeof PlayerStats.prototype.toObject>[];
            } = {};
            if (this.home_team != null) {
                data.home_team = this.home_team.map((item: PlayerStats) => item.toObject());
            }
            if (this.away_team != null) {
                data.away_team = this.away_team.map((item: PlayerStats) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.home_team.length)
                writer.writeRepeatedMessage(1, this.home_team, (item: PlayerStats) => item.serialize(writer));
            if (this.away_team.length)
                writer.writeRepeatedMessage(2, this.away_team, (item: PlayerStats) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.home_team, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerStats.deserialize(reader), PlayerStats));
                        break;
                    case 2:
                        reader.readMessage(message.away_team, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PlayerStats.deserialize(reader), PlayerStats));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerStatsResponse {
            return PlayerStatsResponse.deserialize(bytes);
        }
    }
    export class LineupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home_team?: Lineup;
            away_team?: Lineup;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home_team" in data && data.home_team != undefined) {
                    this.home_team = data.home_team;
                }
                if ("away_team" in data && data.away_team != undefined) {
                    this.away_team = data.away_team;
                }
            }
        }
        get home_team() {
            return pb_1.Message.getWrapperField(this, Lineup, 1) as Lineup;
        }
        set home_team(value: Lineup) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_home_team() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get away_team() {
            return pb_1.Message.getWrapperField(this, Lineup, 2) as Lineup;
        }
        set away_team(value: Lineup) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_away_team() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            home_team?: ReturnType<typeof Lineup.prototype.toObject>;
            away_team?: ReturnType<typeof Lineup.prototype.toObject>;
        }): LineupResponse {
            const message = new LineupResponse({});
            if (data.home_team != null) {
                message.home_team = Lineup.fromObject(data.home_team);
            }
            if (data.away_team != null) {
                message.away_team = Lineup.fromObject(data.away_team);
            }
            return message;
        }
        toObject() {
            const data: {
                home_team?: ReturnType<typeof Lineup.prototype.toObject>;
                away_team?: ReturnType<typeof Lineup.prototype.toObject>;
            } = {};
            if (this.home_team != null) {
                data.home_team = this.home_team.toObject();
            }
            if (this.away_team != null) {
                data.away_team = this.away_team.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_home_team)
                writer.writeMessage(1, this.home_team, () => this.home_team.serialize(writer));
            if (this.has_away_team)
                writer.writeMessage(2, this.away_team, () => this.away_team.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.home_team, () => message.home_team = Lineup.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.away_team, () => message.away_team = Lineup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineupResponse {
            return LineupResponse.deserialize(bytes);
        }
    }
    export class PlayerStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
            team_id?: number;
            fixture_id?: number;
            is_substitute?: boolean;
            shots_total?: dependency_1.google.protobuf.Int32Value;
            shots_on_goal?: dependency_1.google.protobuf.Int32Value;
            goals_scored?: dependency_1.google.protobuf.Int32Value;
            goals_conceded?: dependency_1.google.protobuf.Int32Value;
            assists?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("fixture_id" in data && data.fixture_id != undefined) {
                    this.fixture_id = data.fixture_id;
                }
                if ("is_substitute" in data && data.is_substitute != undefined) {
                    this.is_substitute = data.is_substitute;
                }
                if ("shots_total" in data && data.shots_total != undefined) {
                    this.shots_total = data.shots_total;
                }
                if ("shots_on_goal" in data && data.shots_on_goal != undefined) {
                    this.shots_on_goal = data.shots_on_goal;
                }
                if ("goals_scored" in data && data.goals_scored != undefined) {
                    this.goals_scored = data.goals_scored;
                }
                if ("goals_conceded" in data && data.goals_conceded != undefined) {
                    this.goals_conceded = data.goals_conceded;
                }
                if ("assists" in data && data.assists != undefined) {
                    this.assists = data.assists;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fixture_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fixture_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_substitute() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_substitute(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get shots_total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 5) as dependency_1.google.protobuf.Int32Value;
        }
        set shots_total(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_shots_total() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get shots_on_goal() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 6) as dependency_1.google.protobuf.Int32Value;
        }
        set shots_on_goal(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_shots_on_goal() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get goals_scored() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 7) as dependency_1.google.protobuf.Int32Value;
        }
        set goals_scored(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_goals_scored() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get goals_conceded() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 8) as dependency_1.google.protobuf.Int32Value;
        }
        set goals_conceded(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_goals_conceded() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get assists() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 9) as dependency_1.google.protobuf.Int32Value;
        }
        set assists(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_assists() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            player_id?: number;
            team_id?: number;
            fixture_id?: number;
            is_substitute?: boolean;
            shots_total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            shots_on_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            goals_scored?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            goals_conceded?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            assists?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): PlayerStats {
            const message = new PlayerStats({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.fixture_id != null) {
                message.fixture_id = data.fixture_id;
            }
            if (data.is_substitute != null) {
                message.is_substitute = data.is_substitute;
            }
            if (data.shots_total != null) {
                message.shots_total = dependency_1.google.protobuf.Int32Value.fromObject(data.shots_total);
            }
            if (data.shots_on_goal != null) {
                message.shots_on_goal = dependency_1.google.protobuf.Int32Value.fromObject(data.shots_on_goal);
            }
            if (data.goals_scored != null) {
                message.goals_scored = dependency_1.google.protobuf.Int32Value.fromObject(data.goals_scored);
            }
            if (data.goals_conceded != null) {
                message.goals_conceded = dependency_1.google.protobuf.Int32Value.fromObject(data.goals_conceded);
            }
            if (data.assists != null) {
                message.assists = dependency_1.google.protobuf.Int32Value.fromObject(data.assists);
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
                team_id?: number;
                fixture_id?: number;
                is_substitute?: boolean;
                shots_total?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                shots_on_goal?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                goals_scored?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                goals_conceded?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                assists?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.fixture_id != null) {
                data.fixture_id = this.fixture_id;
            }
            if (this.is_substitute != null) {
                data.is_substitute = this.is_substitute;
            }
            if (this.shots_total != null) {
                data.shots_total = this.shots_total.toObject();
            }
            if (this.shots_on_goal != null) {
                data.shots_on_goal = this.shots_on_goal.toObject();
            }
            if (this.goals_scored != null) {
                data.goals_scored = this.goals_scored.toObject();
            }
            if (this.goals_conceded != null) {
                data.goals_conceded = this.goals_conceded.toObject();
            }
            if (this.assists != null) {
                data.assists = this.assists.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeUint64(1, this.player_id);
            if (this.team_id != 0)
                writer.writeUint64(2, this.team_id);
            if (this.fixture_id != 0)
                writer.writeUint64(3, this.fixture_id);
            if (this.is_substitute != false)
                writer.writeBool(4, this.is_substitute);
            if (this.has_shots_total)
                writer.writeMessage(5, this.shots_total, () => this.shots_total.serialize(writer));
            if (this.has_shots_on_goal)
                writer.writeMessage(6, this.shots_on_goal, () => this.shots_on_goal.serialize(writer));
            if (this.has_goals_scored)
                writer.writeMessage(7, this.goals_scored, () => this.goals_scored.serialize(writer));
            if (this.has_goals_conceded)
                writer.writeMessage(8, this.goals_conceded, () => this.goals_conceded.serialize(writer));
            if (this.has_assists)
                writer.writeMessage(9, this.assists, () => this.assists.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readUint64();
                        break;
                    case 2:
                        message.team_id = reader.readUint64();
                        break;
                    case 3:
                        message.fixture_id = reader.readUint64();
                        break;
                    case 4:
                        message.is_substitute = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.shots_total, () => message.shots_total = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.shots_on_goal, () => message.shots_on_goal = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.goals_scored, () => message.goals_scored = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.goals_conceded, () => message.goals_conceded = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.assists, () => message.assists = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerStats {
            return PlayerStats.deserialize(bytes);
        }
    }
    export class Lineup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: LineupPlayer[];
            bench?: LineupPlayer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("bench" in data && data.bench != undefined) {
                    this.bench = data.bench;
                }
            }
        }
        get start() {
            return pb_1.Message.getRepeatedWrapperField(this, LineupPlayer, 1) as LineupPlayer[];
        }
        set start(value: LineupPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get bench() {
            return pb_1.Message.getRepeatedWrapperField(this, LineupPlayer, 2) as LineupPlayer[];
        }
        set bench(value: LineupPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            start?: ReturnType<typeof LineupPlayer.prototype.toObject>[];
            bench?: ReturnType<typeof LineupPlayer.prototype.toObject>[];
        }): Lineup {
            const message = new Lineup({});
            if (data.start != null) {
                message.start = data.start.map(item => LineupPlayer.fromObject(item));
            }
            if (data.bench != null) {
                message.bench = data.bench.map(item => LineupPlayer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                start?: ReturnType<typeof LineupPlayer.prototype.toObject>[];
                bench?: ReturnType<typeof LineupPlayer.prototype.toObject>[];
            } = {};
            if (this.start != null) {
                data.start = this.start.map((item: LineupPlayer) => item.toObject());
            }
            if (this.bench != null) {
                data.bench = this.bench.map((item: LineupPlayer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start.length)
                writer.writeRepeatedMessage(1, this.start, (item: LineupPlayer) => item.serialize(writer));
            if (this.bench.length)
                writer.writeRepeatedMessage(2, this.bench, (item: LineupPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Lineup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Lineup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LineupPlayer.deserialize(reader), LineupPlayer));
                        break;
                    case 2:
                        reader.readMessage(message.bench, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LineupPlayer.deserialize(reader), LineupPlayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Lineup {
            return Lineup.deserialize(bytes);
        }
    }
    export class LineupPlayer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
            position?: string;
            formation_position?: dependency_1.google.protobuf.UInt32Value;
            is_substitute?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("formation_position" in data && data.formation_position != undefined) {
                    this.formation_position = data.formation_position;
                }
                if ("is_substitute" in data && data.is_substitute != undefined) {
                    this.is_substitute = data.is_substitute;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set position(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get formation_position() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 3) as dependency_1.google.protobuf.UInt32Value;
        }
        set formation_position(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_formation_position() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get is_substitute() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_substitute(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            player_id?: number;
            position?: string;
            formation_position?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            is_substitute?: boolean;
        }): LineupPlayer {
            const message = new LineupPlayer({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.position != null) {
                message.position = data.position;
            }
            if (data.formation_position != null) {
                message.formation_position = dependency_1.google.protobuf.UInt32Value.fromObject(data.formation_position);
            }
            if (data.is_substitute != null) {
                message.is_substitute = data.is_substitute;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
                position?: string;
                formation_position?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                is_substitute?: boolean;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.position != null) {
                data.position = this.position;
            }
            if (this.formation_position != null) {
                data.formation_position = this.formation_position.toObject();
            }
            if (this.is_substitute != null) {
                data.is_substitute = this.is_substitute;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeUint64(1, this.player_id);
            if (this.position.length)
                writer.writeString(2, this.position);
            if (this.has_formation_position)
                writer.writeMessage(3, this.formation_position, () => this.formation_position.serialize(writer));
            if (this.is_substitute != false)
                writer.writeBool(4, this.is_substitute);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineupPlayer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineupPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readUint64();
                        break;
                    case 2:
                        message.position = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.formation_position, () => message.formation_position = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 4:
                        message.is_substitute = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineupPlayer {
            return LineupPlayer.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPlayerStatsServiceService {
        static definition = {
            GetPlayerStatsForFixture: {
                path: "/statistico.PlayerStatsService/GetPlayerStatsForFixture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.statistico.FixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.FixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PlayerStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PlayerStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetLineUpForFixture: {
                path: "/statistico.PlayerStatsService/GetLineUpForFixture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.statistico.FixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.FixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LineupResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LineupResponse.deserialize(new Uint8Array(bytes))
            },
            GetTeamSeasonPlayerStats: {
                path: "/statistico.PlayerStatsService/GetTeamSeasonPlayerStats",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TeamSeasonPlayStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TeamSeasonPlayStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PlayerStats) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PlayerStats.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPlayerStatsForFixture(call: grpc_1.ServerUnaryCall<dependency_2.statistico.FixtureRequest, PlayerStatsResponse>, callback: grpc_1.sendUnaryData<PlayerStatsResponse>): void;
        abstract GetLineUpForFixture(call: grpc_1.ServerUnaryCall<dependency_2.statistico.FixtureRequest, LineupResponse>, callback: grpc_1.sendUnaryData<LineupResponse>): void;
        abstract GetTeamSeasonPlayerStats(call: grpc_1.ServerWritableStream<TeamSeasonPlayStatsRequest, PlayerStats>): void;
    }
    export class PlayerStatsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedPlayerStatsServiceService.definition, "PlayerStatsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPlayerStatsForFixture: GrpcUnaryServiceInterface<dependency_2.statistico.FixtureRequest, PlayerStatsResponse> = (message: dependency_2.statistico.FixtureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PlayerStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PlayerStatsResponse>, callback?: grpc_1.requestCallback<PlayerStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPlayerStatsForFixture(message, metadata, options, callback);
        };
        GetLineUpForFixture: GrpcUnaryServiceInterface<dependency_2.statistico.FixtureRequest, LineupResponse> = (message: dependency_2.statistico.FixtureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LineupResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LineupResponse>, callback?: grpc_1.requestCallback<LineupResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLineUpForFixture(message, metadata, options, callback);
        };
        GetTeamSeasonPlayerStats: GrpcStreamServiceInterface<TeamSeasonPlayStatsRequest, PlayerStats> = (message: TeamSeasonPlayStatsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<PlayerStats> => {
            return super.GetTeamSeasonPlayerStats(message, metadata, options);
        };
    }
}
