// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: fixture.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FixtureService_ListSeasonFixtures_FullMethodName = "/statistico.FixtureService/ListSeasonFixtures"
	FixtureService_FixtureByID_FullMethodName        = "/statistico.FixtureService/FixtureByID"
	FixtureService_Search_FullMethodName             = "/statistico.FixtureService/Search"
)

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FixtureServiceClient interface {
	ListSeasonFixtures(ctx context.Context, in *SeasonFixtureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fixture], error)
	FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error)
	Search(ctx context.Context, in *FixtureSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fixture], error)
}

type fixtureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixtureServiceClient(cc grpc.ClientConnInterface) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) ListSeasonFixtures(ctx context.Context, in *SeasonFixtureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fixture], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FixtureService_ServiceDesc.Streams[0], FixtureService_ListSeasonFixtures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SeasonFixtureRequest, Fixture]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FixtureService_ListSeasonFixturesClient = grpc.ServerStreamingClient[Fixture]

func (c *fixtureServiceClient) FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fixture)
	err := c.cc.Invoke(ctx, FixtureService_FixtureByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) Search(ctx context.Context, in *FixtureSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fixture], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FixtureService_ServiceDesc.Streams[1], FixtureService_Search_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FixtureSearchRequest, Fixture]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FixtureService_SearchClient = grpc.ServerStreamingClient[Fixture]

// FixtureServiceServer is the server API for FixtureService service.
// All implementations must embed UnimplementedFixtureServiceServer
// for forward compatibility.
type FixtureServiceServer interface {
	ListSeasonFixtures(*SeasonFixtureRequest, grpc.ServerStreamingServer[Fixture]) error
	FixtureByID(context.Context, *FixtureRequest) (*Fixture, error)
	Search(*FixtureSearchRequest, grpc.ServerStreamingServer[Fixture]) error
	mustEmbedUnimplementedFixtureServiceServer()
}

// UnimplementedFixtureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFixtureServiceServer struct{}

func (UnimplementedFixtureServiceServer) ListSeasonFixtures(*SeasonFixtureRequest, grpc.ServerStreamingServer[Fixture]) error {
	return status.Errorf(codes.Unimplemented, "method ListSeasonFixtures not implemented")
}
func (UnimplementedFixtureServiceServer) FixtureByID(context.Context, *FixtureRequest) (*Fixture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixtureByID not implemented")
}
func (UnimplementedFixtureServiceServer) Search(*FixtureSearchRequest, grpc.ServerStreamingServer[Fixture]) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFixtureServiceServer) mustEmbedUnimplementedFixtureServiceServer() {}
func (UnimplementedFixtureServiceServer) testEmbeddedByValue()                        {}

// UnsafeFixtureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FixtureServiceServer will
// result in compilation errors.
type UnsafeFixtureServiceServer interface {
	mustEmbedUnimplementedFixtureServiceServer()
}

func RegisterFixtureServiceServer(s grpc.ServiceRegistrar, srv FixtureServiceServer) {
	// If the following call pancis, it indicates UnimplementedFixtureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FixtureService_ServiceDesc, srv)
}

func _FixtureService_ListSeasonFixtures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeasonFixtureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).ListSeasonFixtures(m, &grpc.GenericServerStream[SeasonFixtureRequest, Fixture]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FixtureService_ListSeasonFixturesServer = grpc.ServerStreamingServer[Fixture]

func _FixtureService_FixtureByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).FixtureByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixtureService_FixtureByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).FixtureByID(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FixtureSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).Search(m, &grpc.GenericServerStream[FixtureSearchRequest, Fixture]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FixtureService_SearchServer = grpc.ServerStreamingServer[Fixture]

// FixtureService_ServiceDesc is the grpc.ServiceDesc for FixtureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FixtureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FixtureByID",
			Handler:    _FixtureService_FixtureByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSeasonFixtures",
			Handler:       _FixtureService_ListSeasonFixtures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _FixtureService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fixture.proto",
}
