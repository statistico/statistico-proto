// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "common.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message statistico.Date
 */
export interface Date {
    /**
     * @generated from protobuf field: int64 utc = 1;
     */
    utc: bigint;
    /**
     * @generated from protobuf field: string rfc = 2;
     */
    rfc: string;
}
/**
 * @generated from protobuf message statistico.Odds
 */
export interface Odds {
    /**
     * @generated from protobuf field: float price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: string selection = 2;
     */
    selection: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Date$Type extends MessageType<Date> {
    constructor() {
        super("statistico.Date", [
            { no: 1, name: "utc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rfc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Date>): Date {
        const message = { utc: 0n, rfc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Date>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Date): Date {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 utc */ 1:
                    message.utc = reader.int64().toBigInt();
                    break;
                case /* string rfc */ 2:
                    message.rfc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Date, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 utc = 1; */
        if (message.utc !== 0n)
            writer.tag(1, WireType.Varint).int64(message.utc);
        /* string rfc = 2; */
        if (message.rfc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rfc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Date
 */
export const Date = new Date$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Odds$Type extends MessageType<Odds> {
    constructor() {
        super("statistico.Odds", [
            { no: 1, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "selection", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Odds>): Odds {
        const message = { price: 0, selection: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Odds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Odds): Odds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float price */ 1:
                    message.price = reader.float();
                    break;
                case /* string selection */ 2:
                    message.selection = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Odds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit32).float(message.price);
        /* string selection = 2; */
        if (message.selection !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.selection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Odds
 */
export const Odds = new Odds$Type();
