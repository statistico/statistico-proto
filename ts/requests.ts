// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "requests.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { UInt64Value } from "./google/protobuf/wrappers";
import { StakingPlan } from "./utility";
import { FloatValue } from "./google/protobuf/wrappers";
import { ExchangeEnum } from "./enum";
import { MarketEnum } from "./enum";
import { BoolValue } from "./google/protobuf/wrappers";
import { StringValue } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message statistico.CompetitionRequest
 */
export interface CompetitionRequest {
    /**
     * A filter to limit the competitions returned associated to a specific countries
     *
     * @generated from protobuf field: repeated uint64 country_ids = 1;
     */
    countryIds: bigint[];
    /**
     * Order the ID column to return competitions in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 2;
     */
    sort?: StringValue;
    /**
     * A filter to limit the competitions returned depending on if they are a cup competition or not
     *
     * @generated from protobuf field: google.protobuf.BoolValue is_cup = 3;
     */
    isCup?: BoolValue;
}
/**
 * @generated from protobuf message statistico.CreateStrategyRequest
 */
export interface CreateStrategyRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: statistico.MarketEnum market = 2;
     */
    market: MarketEnum;
    /**
     * @generated from protobuf field: statistico.ExchangeEnum exchange = 3;
     */
    exchange: ExchangeEnum;
    /**
     * @generated from protobuf field: google.protobuf.FloatValue min_odds = 4;
     */
    minOdds?: FloatValue;
    /**
     * @generated from protobuf field: google.protobuf.FloatValue max_odds = 5;
     */
    maxOdds?: FloatValue;
    /**
     * @generated from protobuf field: statistico.StakingPlan staking_plan = 6;
     */
    stakingPlan?: StakingPlan;
    /**
     * @generated from protobuf field: repeated uint64 competition_ids = 7;
     */
    competitionIds: bigint[];
    /**
     * @generated from protobuf field: float bankroll = 8;
     */
    bankroll: number;
}
/**
 * @generated from protobuf message statistico.FixtureRequest
 */
export interface FixtureRequest {
    /**
     * @generated from protobuf field: uint64 fixture_id = 1;
     */
    fixtureId: bigint;
}
/**
 * @generated from protobuf message statistico.FixtureSearchRequest
 */
export interface FixtureSearchRequest {
    /**
     * A filter to limit the results returned associated to a specific season
     *
     * @generated from protobuf field: repeated uint64 season_ids = 1;
     */
    seasonIds: bigint[];
    /**
     * The number of results to return.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value limit = 2;
     */
    limit?: UInt64Value;
    /**
     * A filter to return Results before a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_before = 3;
     */
    dateBefore?: StringValue;
    /**
     * A filter to return Results after a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_after = 4;
     */
    dateAfter?: StringValue;
    /**
     * Order the date column to return results in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 5;
     */
    sort?: StringValue;
}
/**
 * @generated from protobuf message statistico.HistoricalResultRequest
 */
export interface HistoricalResultRequest {
    /**
     * The Home Team ID that the Result set relates to
     *
     * @generated from protobuf field: uint64 home_team_id = 1;
     */
    homeTeamId: bigint;
    /**
     * The Away Team ID that the Result set relates to
     *
     * @generated from protobuf field: uint64 away_team_id = 2;
     */
    awayTeamId: bigint;
    /**
     * The number of results to return
     *
     * @generated from protobuf field: uint32 limit = 3;
     */
    limit: number;
    /**
     * A filter to return Results before a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: string date_before = 4;
     */
    dateBefore: string;
}
/**
 * @generated from protobuf message statistico.ListUserStrategiesRequest
 */
export interface ListUserStrategiesRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message statistico.ResultRequest
 */
export interface ResultRequest {
    /**
     * @generated from protobuf field: uint64 fixture_id = 1;
     */
    fixtureId: bigint;
}
/**
 * @generated from protobuf message statistico.SearchTradesRequest
 */
export interface SearchTradesRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue strategy_id = 1;
     */
    strategyId?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue market = 2;
     */
    market?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.UInt64Value competition_id = 3;
     */
    competitionId?: UInt64Value;
    /**
     * @generated from protobuf field: google.protobuf.StringValue status = 4;
     */
    status?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue exchange = 5;
     */
    exchange?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date_from = 6;
     */
    dateFrom?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date_to = 7;
     */
    dateTo?: Timestamp;
}
/**
 * @generated from protobuf message statistico.SeasonCompetitionRequest
 */
export interface SeasonCompetitionRequest {
    /**
     * @generated from protobuf field: uint64 competition_id = 1;
     */
    competitionId: bigint;
    /**
     * Order the name column to return seasons in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 2;
     */
    sort?: StringValue;
}
/**
 * @generated from protobuf message statistico.SeasonFixtureRequest
 */
export interface SeasonFixtureRequest {
    /**
     * @generated from protobuf field: uint64 season_id = 1;
     */
    seasonId: bigint;
    /**
     * RFC3339 formatted string i.e. "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: string date_from = 2;
     */
    dateFrom: string;
    /**
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: string date_to = 3;
     */
    dateTo: string;
}
/**
 * @generated from protobuf message statistico.SeasonRequest
 */
export interface SeasonRequest {
    /**
     * The Season ID that the Result set relates to
     *
     * @generated from protobuf field: int64 season_id = 1;
     */
    seasonId: bigint;
    /**
     * A filter to return Results before a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: string date_before = 2;
     */
    dateBefore: string;
}
/**
 * @generated from protobuf message statistico.SeasonTeamsRequest
 */
export interface SeasonTeamsRequest {
    /**
     * @generated from protobuf field: uint64 season_id = 1;
     */
    seasonId: bigint;
}
/**
 * @generated from protobuf message statistico.TeamRequest
 */
export interface TeamRequest {
    /**
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
}
/**
 * @generated from protobuf message statistico.TeamResultRequest
 */
export interface TeamResultRequest {
    /**
     * The Team ID that the Result set relates to
     *
     * @generated from protobuf field: uint64 team_id = 1;
     */
    teamId: bigint;
    /**
     * The number of results to return. If limit is not set the whole Result set for the Team
     * will be returned
     *
     * @generated from protobuf field: google.protobuf.UInt64Value limit = 2;
     */
    limit?: UInt64Value;
    /**
     * A filter to return Results before a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_before = 3;
     */
    dateBefore?: StringValue;
    /**
     * A filter to return Results after a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_after = 4;
     */
    dateAfter?: StringValue;
    /**
     * A filter to return based limited to either home or away results
     *
     * @generated from protobuf field: google.protobuf.StringValue venue = 5;
     */
    venue?: StringValue;
    /**
     * A filter to limit the results returned associated to a specific season
     *
     * @generated from protobuf field: repeated uint64 season_ids = 6;
     */
    seasonIds: bigint[];
    /**
     * Order the date column to return results in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 7;
     */
    sort?: StringValue;
}
/**
 * @generated from protobuf message statistico.TeamStatRequest
 */
export interface TeamStatRequest {
    /**
     * @generated from protobuf field: string stat = 1;
     */
    stat: string;
    /**
     * The Team ID that the Result set relates to
     *
     * @generated from protobuf field: uint64 team_id = 2;
     */
    teamId: bigint;
    /**
     * The number of results to return. If limit is not set the whole Result set for the Team
     * will be returned
     *
     * @generated from protobuf field: google.protobuf.UInt64Value limit = 3;
     */
    limit?: UInt64Value;
    /**
     * A filter to return stats before a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_before = 4;
     */
    dateBefore?: StringValue;
    /**
     * A filter to return stats after a specific date
     * RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
     *
     * @generated from protobuf field: google.protobuf.StringValue date_after = 5;
     */
    dateAfter?: StringValue;
    /**
     * A filter to return based stats limited to match being played either home or away
     *
     * @generated from protobuf field: google.protobuf.StringValue venue = 6;
     */
    venue?: StringValue;
    /**
     * A filter to limit the results returned associated to a specific season
     *
     * @generated from protobuf field: repeated uint64 season_ids = 7;
     */
    seasonIds: bigint[];
    /**
     * Order the date column to return stats in specific order
     *
     * @generated from protobuf field: google.protobuf.StringValue sort = 8;
     */
    sort?: StringValue;
    /**
     * Return stats for opposing team
     *
     * @generated from protobuf field: google.protobuf.BoolValue opponent = 9;
     */
    opponent?: BoolValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class CompetitionRequest$Type extends MessageType<CompetitionRequest> {
    constructor() {
        super("statistico.CompetitionRequest", [
            { no: 1, name: "country_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sort", kind: "message", T: () => StringValue },
            { no: 3, name: "is_cup", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<CompetitionRequest>): CompetitionRequest {
        const message = { countryIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompetitionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompetitionRequest): CompetitionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 country_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.countryIds.push(reader.uint64().toBigInt());
                    else
                        message.countryIds.push(reader.uint64().toBigInt());
                    break;
                case /* google.protobuf.StringValue sort */ 2:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* google.protobuf.BoolValue is_cup */ 3:
                    message.isCup = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.isCup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompetitionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 country_ids = 1; */
        if (message.countryIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.countryIds.length; i++)
                writer.uint64(message.countryIds[i]);
            writer.join();
        }
        /* google.protobuf.StringValue sort = 2; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue is_cup = 3; */
        if (message.isCup)
            BoolValue.internalBinaryWrite(message.isCup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.CompetitionRequest
 */
export const CompetitionRequest = new CompetitionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStrategyRequest$Type extends MessageType<CreateStrategyRequest> {
    constructor() {
        super("statistico.CreateStrategyRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "market", kind: "enum", T: () => ["statistico.MarketEnum", MarketEnum] },
            { no: 3, name: "exchange", kind: "enum", T: () => ["statistico.ExchangeEnum", ExchangeEnum] },
            { no: 4, name: "min_odds", kind: "message", T: () => FloatValue },
            { no: 5, name: "max_odds", kind: "message", T: () => FloatValue },
            { no: 6, name: "staking_plan", kind: "message", T: () => StakingPlan },
            { no: 7, name: "competition_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "bankroll", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStrategyRequest>): CreateStrategyRequest {
        const message = { name: "", market: 0, exchange: 0, competitionIds: [], bankroll: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStrategyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStrategyRequest): CreateStrategyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* statistico.MarketEnum market */ 2:
                    message.market = reader.int32();
                    break;
                case /* statistico.ExchangeEnum exchange */ 3:
                    message.exchange = reader.int32();
                    break;
                case /* google.protobuf.FloatValue min_odds */ 4:
                    message.minOdds = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.minOdds);
                    break;
                case /* google.protobuf.FloatValue max_odds */ 5:
                    message.maxOdds = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOdds);
                    break;
                case /* statistico.StakingPlan staking_plan */ 6:
                    message.stakingPlan = StakingPlan.internalBinaryRead(reader, reader.uint32(), options, message.stakingPlan);
                    break;
                case /* repeated uint64 competition_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.competitionIds.push(reader.uint64().toBigInt());
                    else
                        message.competitionIds.push(reader.uint64().toBigInt());
                    break;
                case /* float bankroll */ 8:
                    message.bankroll = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStrategyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* statistico.MarketEnum market = 2; */
        if (message.market !== 0)
            writer.tag(2, WireType.Varint).int32(message.market);
        /* statistico.ExchangeEnum exchange = 3; */
        if (message.exchange !== 0)
            writer.tag(3, WireType.Varint).int32(message.exchange);
        /* google.protobuf.FloatValue min_odds = 4; */
        if (message.minOdds)
            FloatValue.internalBinaryWrite(message.minOdds, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.FloatValue max_odds = 5; */
        if (message.maxOdds)
            FloatValue.internalBinaryWrite(message.maxOdds, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* statistico.StakingPlan staking_plan = 6; */
        if (message.stakingPlan)
            StakingPlan.internalBinaryWrite(message.stakingPlan, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 competition_ids = 7; */
        if (message.competitionIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.competitionIds.length; i++)
                writer.uint64(message.competitionIds[i]);
            writer.join();
        }
        /* float bankroll = 8; */
        if (message.bankroll !== 0)
            writer.tag(8, WireType.Bit32).float(message.bankroll);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.CreateStrategyRequest
 */
export const CreateStrategyRequest = new CreateStrategyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FixtureRequest$Type extends MessageType<FixtureRequest> {
    constructor() {
        super("statistico.FixtureRequest", [
            { no: 1, name: "fixture_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FixtureRequest>): FixtureRequest {
        const message = { fixtureId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixtureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixtureRequest): FixtureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fixture_id */ 1:
                    message.fixtureId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixtureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fixture_id = 1; */
        if (message.fixtureId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.fixtureId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.FixtureRequest
 */
export const FixtureRequest = new FixtureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FixtureSearchRequest$Type extends MessageType<FixtureSearchRequest> {
    constructor() {
        super("statistico.FixtureSearchRequest", [
            { no: 1, name: "season_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limit", kind: "message", T: () => UInt64Value },
            { no: 3, name: "date_before", kind: "message", T: () => StringValue },
            { no: 4, name: "date_after", kind: "message", T: () => StringValue },
            { no: 5, name: "sort", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<FixtureSearchRequest>): FixtureSearchRequest {
        const message = { seasonIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixtureSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixtureSearchRequest): FixtureSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 season_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.seasonIds.push(reader.uint64().toBigInt());
                    else
                        message.seasonIds.push(reader.uint64().toBigInt());
                    break;
                case /* google.protobuf.UInt64Value limit */ 2:
                    message.limit = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.StringValue date_before */ 3:
                    message.dateBefore = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateBefore);
                    break;
                case /* google.protobuf.StringValue date_after */ 4:
                    message.dateAfter = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateAfter);
                    break;
                case /* google.protobuf.StringValue sort */ 5:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixtureSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 season_ids = 1; */
        if (message.seasonIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.seasonIds.length; i++)
                writer.uint64(message.seasonIds[i]);
            writer.join();
        }
        /* google.protobuf.UInt64Value limit = 2; */
        if (message.limit)
            UInt64Value.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_before = 3; */
        if (message.dateBefore)
            StringValue.internalBinaryWrite(message.dateBefore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_after = 4; */
        if (message.dateAfter)
            StringValue.internalBinaryWrite(message.dateAfter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue sort = 5; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.FixtureSearchRequest
 */
export const FixtureSearchRequest = new FixtureSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoricalResultRequest$Type extends MessageType<HistoricalResultRequest> {
    constructor() {
        super("statistico.HistoricalResultRequest", [
            { no: 1, name: "home_team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "away_team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "date_before", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HistoricalResultRequest>): HistoricalResultRequest {
        const message = { homeTeamId: 0n, awayTeamId: 0n, limit: 0, dateBefore: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HistoricalResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoricalResultRequest): HistoricalResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 home_team_id */ 1:
                    message.homeTeamId = reader.uint64().toBigInt();
                    break;
                case /* uint64 away_team_id */ 2:
                    message.awayTeamId = reader.uint64().toBigInt();
                    break;
                case /* uint32 limit */ 3:
                    message.limit = reader.uint32();
                    break;
                case /* string date_before */ 4:
                    message.dateBefore = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoricalResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 home_team_id = 1; */
        if (message.homeTeamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.homeTeamId);
        /* uint64 away_team_id = 2; */
        if (message.awayTeamId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.awayTeamId);
        /* uint32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).uint32(message.limit);
        /* string date_before = 4; */
        if (message.dateBefore !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dateBefore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.HistoricalResultRequest
 */
export const HistoricalResultRequest = new HistoricalResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserStrategiesRequest$Type extends MessageType<ListUserStrategiesRequest> {
    constructor() {
        super("statistico.ListUserStrategiesRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserStrategiesRequest>): ListUserStrategiesRequest {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUserStrategiesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserStrategiesRequest): ListUserStrategiesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserStrategiesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.ListUserStrategiesRequest
 */
export const ListUserStrategiesRequest = new ListUserStrategiesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResultRequest$Type extends MessageType<ResultRequest> {
    constructor() {
        super("statistico.ResultRequest", [
            { no: 1, name: "fixture_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResultRequest>): ResultRequest {
        const message = { fixtureId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResultRequest): ResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fixture_id */ 1:
                    message.fixtureId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fixture_id = 1; */
        if (message.fixtureId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.fixtureId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.ResultRequest
 */
export const ResultRequest = new ResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTradesRequest$Type extends MessageType<SearchTradesRequest> {
    constructor() {
        super("statistico.SearchTradesRequest", [
            { no: 1, name: "strategy_id", kind: "message", T: () => StringValue },
            { no: 2, name: "market", kind: "message", T: () => StringValue },
            { no: 3, name: "competition_id", kind: "message", T: () => UInt64Value },
            { no: 4, name: "status", kind: "message", T: () => StringValue },
            { no: 5, name: "exchange", kind: "message", T: () => StringValue },
            { no: 6, name: "date_from", kind: "message", T: () => Timestamp },
            { no: 7, name: "date_to", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SearchTradesRequest>): SearchTradesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchTradesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTradesRequest): SearchTradesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue strategy_id */ 1:
                    message.strategyId = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.strategyId);
                    break;
                case /* google.protobuf.StringValue market */ 2:
                    message.market = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.market);
                    break;
                case /* google.protobuf.UInt64Value competition_id */ 3:
                    message.competitionId = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.competitionId);
                    break;
                case /* google.protobuf.StringValue status */ 4:
                    message.status = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* google.protobuf.StringValue exchange */ 5:
                    message.exchange = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.exchange);
                    break;
                case /* google.protobuf.Timestamp date_from */ 6:
                    message.dateFrom = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dateFrom);
                    break;
                case /* google.protobuf.Timestamp date_to */ 7:
                    message.dateTo = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dateTo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTradesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue strategy_id = 1; */
        if (message.strategyId)
            StringValue.internalBinaryWrite(message.strategyId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue market = 2; */
        if (message.market)
            StringValue.internalBinaryWrite(message.market, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value competition_id = 3; */
        if (message.competitionId)
            UInt64Value.internalBinaryWrite(message.competitionId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue status = 4; */
        if (message.status)
            StringValue.internalBinaryWrite(message.status, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue exchange = 5; */
        if (message.exchange)
            StringValue.internalBinaryWrite(message.exchange, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp date_from = 6; */
        if (message.dateFrom)
            Timestamp.internalBinaryWrite(message.dateFrom, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp date_to = 7; */
        if (message.dateTo)
            Timestamp.internalBinaryWrite(message.dateTo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.SearchTradesRequest
 */
export const SearchTradesRequest = new SearchTradesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonCompetitionRequest$Type extends MessageType<SeasonCompetitionRequest> {
    constructor() {
        super("statistico.SeasonCompetitionRequest", [
            { no: 1, name: "competition_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sort", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<SeasonCompetitionRequest>): SeasonCompetitionRequest {
        const message = { competitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonCompetitionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonCompetitionRequest): SeasonCompetitionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 competition_id */ 1:
                    message.competitionId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.StringValue sort */ 2:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonCompetitionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 competition_id = 1; */
        if (message.competitionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.competitionId);
        /* google.protobuf.StringValue sort = 2; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.SeasonCompetitionRequest
 */
export const SeasonCompetitionRequest = new SeasonCompetitionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonFixtureRequest$Type extends MessageType<SeasonFixtureRequest> {
    constructor() {
        super("statistico.SeasonFixtureRequest", [
            { no: 1, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date_from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "date_to", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonFixtureRequest>): SeasonFixtureRequest {
        const message = { seasonId: 0n, dateFrom: "", dateTo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonFixtureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonFixtureRequest): SeasonFixtureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 season_id */ 1:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                case /* string date_from */ 2:
                    message.dateFrom = reader.string();
                    break;
                case /* string date_to */ 3:
                    message.dateTo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonFixtureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.seasonId);
        /* string date_from = 2; */
        if (message.dateFrom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dateFrom);
        /* string date_to = 3; */
        if (message.dateTo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dateTo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.SeasonFixtureRequest
 */
export const SeasonFixtureRequest = new SeasonFixtureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonRequest$Type extends MessageType<SeasonRequest> {
    constructor() {
        super("statistico.SeasonRequest", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date_before", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonRequest>): SeasonRequest {
        const message = { seasonId: 0n, dateBefore: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonRequest): SeasonRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* string date_before */ 2:
                    message.dateBefore = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* string date_before = 2; */
        if (message.dateBefore !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dateBefore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.SeasonRequest
 */
export const SeasonRequest = new SeasonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTeamsRequest$Type extends MessageType<SeasonTeamsRequest> {
    constructor() {
        super("statistico.SeasonTeamsRequest", [
            { no: 1, name: "season_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonTeamsRequest>): SeasonTeamsRequest {
        const message = { seasonId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTeamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTeamsRequest): SeasonTeamsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 season_id */ 1:
                    message.seasonId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTeamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.SeasonTeamsRequest
 */
export const SeasonTeamsRequest = new SeasonTeamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRequest$Type extends MessageType<TeamRequest> {
    constructor() {
        super("statistico.TeamRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamRequest>): TeamRequest {
        const message = { teamId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRequest): TeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamRequest
 */
export const TeamRequest = new TeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamResultRequest$Type extends MessageType<TeamResultRequest> {
    constructor() {
        super("statistico.TeamResultRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limit", kind: "message", T: () => UInt64Value },
            { no: 3, name: "date_before", kind: "message", T: () => StringValue },
            { no: 4, name: "date_after", kind: "message", T: () => StringValue },
            { no: 5, name: "venue", kind: "message", T: () => StringValue },
            { no: 6, name: "season_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "sort", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<TeamResultRequest>): TeamResultRequest {
        const message = { teamId: 0n, seasonIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamResultRequest): TeamResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 team_id */ 1:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.UInt64Value limit */ 2:
                    message.limit = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.StringValue date_before */ 3:
                    message.dateBefore = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateBefore);
                    break;
                case /* google.protobuf.StringValue date_after */ 4:
                    message.dateAfter = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateAfter);
                    break;
                case /* google.protobuf.StringValue venue */ 5:
                    message.venue = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                case /* repeated uint64 season_ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.seasonIds.push(reader.uint64().toBigInt());
                    else
                        message.seasonIds.push(reader.uint64().toBigInt());
                    break;
                case /* google.protobuf.StringValue sort */ 7:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* google.protobuf.UInt64Value limit = 2; */
        if (message.limit)
            UInt64Value.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_before = 3; */
        if (message.dateBefore)
            StringValue.internalBinaryWrite(message.dateBefore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_after = 4; */
        if (message.dateAfter)
            StringValue.internalBinaryWrite(message.dateAfter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue venue = 5; */
        if (message.venue)
            StringValue.internalBinaryWrite(message.venue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 season_ids = 6; */
        if (message.seasonIds.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.seasonIds.length; i++)
                writer.uint64(message.seasonIds[i]);
            writer.join();
        }
        /* google.protobuf.StringValue sort = 7; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamResultRequest
 */
export const TeamResultRequest = new TeamResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamStatRequest$Type extends MessageType<TeamStatRequest> {
    constructor() {
        super("statistico.TeamStatRequest", [
            { no: 1, name: "stat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "team_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "message", T: () => UInt64Value },
            { no: 4, name: "date_before", kind: "message", T: () => StringValue },
            { no: 5, name: "date_after", kind: "message", T: () => StringValue },
            { no: 6, name: "venue", kind: "message", T: () => StringValue },
            { no: 7, name: "season_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "sort", kind: "message", T: () => StringValue },
            { no: 9, name: "opponent", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<TeamStatRequest>): TeamStatRequest {
        const message = { stat: "", teamId: 0n, seasonIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamStatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamStatRequest): TeamStatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat */ 1:
                    message.stat = reader.string();
                    break;
                case /* uint64 team_id */ 2:
                    message.teamId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.UInt64Value limit */ 3:
                    message.limit = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.StringValue date_before */ 4:
                    message.dateBefore = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateBefore);
                    break;
                case /* google.protobuf.StringValue date_after */ 5:
                    message.dateAfter = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.dateAfter);
                    break;
                case /* google.protobuf.StringValue venue */ 6:
                    message.venue = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                case /* repeated uint64 season_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.seasonIds.push(reader.uint64().toBigInt());
                    else
                        message.seasonIds.push(reader.uint64().toBigInt());
                    break;
                case /* google.protobuf.StringValue sort */ 8:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* google.protobuf.BoolValue opponent */ 9:
                    message.opponent = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.opponent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamStatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat = 1; */
        if (message.stat !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stat);
        /* uint64 team_id = 2; */
        if (message.teamId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.teamId);
        /* google.protobuf.UInt64Value limit = 3; */
        if (message.limit)
            UInt64Value.internalBinaryWrite(message.limit, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_before = 4; */
        if (message.dateBefore)
            StringValue.internalBinaryWrite(message.dateBefore, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue date_after = 5; */
        if (message.dateAfter)
            StringValue.internalBinaryWrite(message.dateAfter, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue venue = 6; */
        if (message.venue)
            StringValue.internalBinaryWrite(message.venue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 season_ids = 7; */
        if (message.seasonIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.seasonIds.length; i++)
                writer.uint64(message.seasonIds[i]);
            writer.join();
        }
        /* google.protobuf.StringValue sort = 8; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue opponent = 9; */
        if (message.opponent)
            BoolValue.internalBinaryWrite(message.opponent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.TeamStatRequest
 */
export const TeamStatRequest = new TeamStatRequest$Type();
