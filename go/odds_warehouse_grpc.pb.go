// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: odds_warehouse.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OddsWarehouseService_GetExchangeOdds_FullMethodName = "/statistico.OddsWarehouseService/GetExchangeOdds"
	OddsWarehouseService_GetEventMarkets_FullMethodName = "/statistico.OddsWarehouseService/GetEventMarkets"
)

// OddsWarehouseServiceClient is the client API for OddsWarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OddsWarehouseServiceClient interface {
	GetExchangeOdds(ctx context.Context, in *ExchangeOddsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExchangeOdds], error)
	GetEventMarkets(ctx context.Context, in *EventMarketRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Market], error)
}

type oddsWarehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOddsWarehouseServiceClient(cc grpc.ClientConnInterface) OddsWarehouseServiceClient {
	return &oddsWarehouseServiceClient{cc}
}

func (c *oddsWarehouseServiceClient) GetExchangeOdds(ctx context.Context, in *ExchangeOddsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExchangeOdds], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OddsWarehouseService_ServiceDesc.Streams[0], OddsWarehouseService_GetExchangeOdds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExchangeOddsRequest, ExchangeOdds]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OddsWarehouseService_GetExchangeOddsClient = grpc.ServerStreamingClient[ExchangeOdds]

func (c *oddsWarehouseServiceClient) GetEventMarkets(ctx context.Context, in *EventMarketRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Market], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OddsWarehouseService_ServiceDesc.Streams[1], OddsWarehouseService_GetEventMarkets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventMarketRequest, Market]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OddsWarehouseService_GetEventMarketsClient = grpc.ServerStreamingClient[Market]

// OddsWarehouseServiceServer is the server API for OddsWarehouseService service.
// All implementations must embed UnimplementedOddsWarehouseServiceServer
// for forward compatibility.
type OddsWarehouseServiceServer interface {
	GetExchangeOdds(*ExchangeOddsRequest, grpc.ServerStreamingServer[ExchangeOdds]) error
	GetEventMarkets(*EventMarketRequest, grpc.ServerStreamingServer[Market]) error
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

// UnimplementedOddsWarehouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOddsWarehouseServiceServer struct{}

func (UnimplementedOddsWarehouseServiceServer) GetExchangeOdds(*ExchangeOddsRequest, grpc.ServerStreamingServer[ExchangeOdds]) error {
	return status.Errorf(codes.Unimplemented, "method GetExchangeOdds not implemented")
}
func (UnimplementedOddsWarehouseServiceServer) GetEventMarkets(*EventMarketRequest, grpc.ServerStreamingServer[Market]) error {
	return status.Errorf(codes.Unimplemented, "method GetEventMarkets not implemented")
}
func (UnimplementedOddsWarehouseServiceServer) mustEmbedUnimplementedOddsWarehouseServiceServer() {}
func (UnimplementedOddsWarehouseServiceServer) testEmbeddedByValue()                              {}

// UnsafeOddsWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OddsWarehouseServiceServer will
// result in compilation errors.
type UnsafeOddsWarehouseServiceServer interface {
	mustEmbedUnimplementedOddsWarehouseServiceServer()
}

func RegisterOddsWarehouseServiceServer(s grpc.ServiceRegistrar, srv OddsWarehouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedOddsWarehouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OddsWarehouseService_ServiceDesc, srv)
}

func _OddsWarehouseService_GetExchangeOdds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExchangeOddsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OddsWarehouseServiceServer).GetExchangeOdds(m, &grpc.GenericServerStream[ExchangeOddsRequest, ExchangeOdds]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OddsWarehouseService_GetExchangeOddsServer = grpc.ServerStreamingServer[ExchangeOdds]

func _OddsWarehouseService_GetEventMarkets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventMarketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OddsWarehouseServiceServer).GetEventMarkets(m, &grpc.GenericServerStream[EventMarketRequest, Market]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OddsWarehouseService_GetEventMarketsServer = grpc.ServerStreamingServer[Market]

// OddsWarehouseService_ServiceDesc is the grpc.ServiceDesc for OddsWarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OddsWarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.OddsWarehouseService",
	HandlerType: (*OddsWarehouseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExchangeOdds",
			Handler:       _OddsWarehouseService_GetExchangeOdds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventMarkets",
			Handler:       _OddsWarehouseService_GetEventMarkets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "odds_warehouse.proto",
}
