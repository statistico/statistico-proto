// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "competition.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CompetitionService } from "./competition";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Competition } from "./competition";
import type { CompetitionRequest } from "./requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.CompetitionService
 */
export interface ICompetitionServiceClient {
    /**
     * @generated from protobuf rpc: ListCompetitions(statistico.CompetitionRequest) returns (stream statistico.Competition);
     */
    listCompetitions(input: CompetitionRequest, options?: RpcOptions): ServerStreamingCall<CompetitionRequest, Competition>;
}
/**
 * @generated from protobuf service statistico.CompetitionService
 */
export class CompetitionServiceClient implements ICompetitionServiceClient, ServiceInfo {
    typeName = CompetitionService.typeName;
    methods = CompetitionService.methods;
    options = CompetitionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListCompetitions(statistico.CompetitionRequest) returns (stream statistico.Competition);
     */
    listCompetitions(input: CompetitionRequest, options?: RpcOptions): ServerStreamingCall<CompetitionRequest, Competition> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompetitionRequest, Competition>("serverStreaming", this._transport, method, opt, input);
    }
}
