// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "season.proto" (package "statistico", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SeasonService } from "./season";
import type { TeamSeasonsResponse } from "./season";
import type { TeamSeasonsRequest } from "./season";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Season } from "./season";
import type { SeasonCompetitionRequest } from "./requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service statistico.SeasonService
 */
export interface ISeasonServiceClient {
    /**
     * @generated from protobuf rpc: GetSeasonsForCompetition(statistico.SeasonCompetitionRequest) returns (stream statistico.Season);
     */
    getSeasonsForCompetition(input: SeasonCompetitionRequest, options?: RpcOptions): ServerStreamingCall<SeasonCompetitionRequest, Season>;
    /**
     * @generated from protobuf rpc: GetSeasonsForTeam(statistico.TeamSeasonsRequest) returns (statistico.TeamSeasonsResponse);
     */
    getSeasonsForTeam(input: TeamSeasonsRequest, options?: RpcOptions): UnaryCall<TeamSeasonsRequest, TeamSeasonsResponse>;
}
/**
 * @generated from protobuf service statistico.SeasonService
 */
export class SeasonServiceClient implements ISeasonServiceClient, ServiceInfo {
    typeName = SeasonService.typeName;
    methods = SeasonService.methods;
    options = SeasonService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSeasonsForCompetition(statistico.SeasonCompetitionRequest) returns (stream statistico.Season);
     */
    getSeasonsForCompetition(input: SeasonCompetitionRequest, options?: RpcOptions): ServerStreamingCall<SeasonCompetitionRequest, Season> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SeasonCompetitionRequest, Season>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSeasonsForTeam(statistico.TeamSeasonsRequest) returns (statistico.TeamSeasonsResponse);
     */
    getSeasonsForTeam(input: TeamSeasonsRequest, options?: RpcOptions): UnaryCall<TeamSeasonsRequest, TeamSeasonsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamSeasonsRequest, TeamSeasonsResponse>("unary", this._transport, method, opt, input);
    }
}
