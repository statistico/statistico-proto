// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServiceClient interface {
	MarketRunnerSearch(ctx context.Context, in *MarketRunnerRequest, opts ...grpc.CallOption) (MarketService_MarketRunnerSearchClient, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) MarketRunnerSearch(ctx context.Context, in *MarketRunnerRequest, opts ...grpc.CallOption) (MarketService_MarketRunnerSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MarketService_serviceDesc.Streams[0], "/statistico.MarketService/MarketRunnerSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketServiceMarketRunnerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketService_MarketRunnerSearchClient interface {
	Recv() (*MarketRunner, error)
	grpc.ClientStream
}

type marketServiceMarketRunnerSearchClient struct {
	grpc.ClientStream
}

func (x *marketServiceMarketRunnerSearchClient) Recv() (*MarketRunner, error) {
	m := new(MarketRunner)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations must embed UnimplementedMarketServiceServer
// for forward compatibility
type MarketServiceServer interface {
	MarketRunnerSearch(*MarketRunnerRequest, MarketService_MarketRunnerSearchServer) error
	mustEmbedUnimplementedMarketServiceServer()
}

// UnimplementedMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (UnimplementedMarketServiceServer) MarketRunnerSearch(*MarketRunnerRequest, MarketService_MarketRunnerSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketRunnerSearch not implemented")
}
func (UnimplementedMarketServiceServer) mustEmbedUnimplementedMarketServiceServer() {}

// UnsafeMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServiceServer will
// result in compilation errors.
type UnsafeMarketServiceServer interface {
	mustEmbedUnimplementedMarketServiceServer()
}

func RegisterMarketServiceServer(s grpc.ServiceRegistrar, srv MarketServiceServer) {
	s.RegisterService(&_MarketService_serviceDesc, srv)
}

func _MarketService_MarketRunnerSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketRunnerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServiceServer).MarketRunnerSearch(m, &marketServiceMarketRunnerSearchServer{stream})
}

type MarketService_MarketRunnerSearchServer interface {
	Send(*MarketRunner) error
	grpc.ServerStream
}

type marketServiceMarketRunnerSearchServer struct {
	grpc.ServerStream
}

func (x *marketServiceMarketRunnerSearchServer) Send(m *MarketRunner) error {
	return x.ServerStream.SendMsg(m)
}

var _MarketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MarketRunnerSearch",
			Handler:       _MarketService_MarketRunnerSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "market.proto",
}
