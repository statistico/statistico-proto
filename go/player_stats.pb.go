// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.21.12
// source: player_stats.proto

package statistico

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamSeasonPlayStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId     uint64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	SeasonId   uint64 `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	DateBefore uint64 `protobuf:"varint,3,opt,name=date_before,json=dateBefore,proto3" json:"date_before,omitempty"`
}

func (x *TeamSeasonPlayStatsRequest) Reset() {
	*x = TeamSeasonPlayStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSeasonPlayStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSeasonPlayStatsRequest) ProtoMessage() {}

func (x *TeamSeasonPlayStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSeasonPlayStatsRequest.ProtoReflect.Descriptor instead.
func (*TeamSeasonPlayStatsRequest) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{0}
}

func (x *TeamSeasonPlayStatsRequest) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamSeasonPlayStatsRequest) GetSeasonId() uint64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *TeamSeasonPlayStatsRequest) GetDateBefore() uint64 {
	if x != nil {
		return x.DateBefore
	}
	return 0
}

type PlayerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeTeam []*PlayerStats `protobuf:"bytes,1,rep,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam []*PlayerStats `protobuf:"bytes,2,rep,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
}

func (x *PlayerStatsResponse) Reset() {
	*x = PlayerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatsResponse) ProtoMessage() {}

func (x *PlayerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatsResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatsResponse) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerStatsResponse) GetHomeTeam() []*PlayerStats {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *PlayerStatsResponse) GetAwayTeam() []*PlayerStats {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

type LineupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeTeam *Lineup `protobuf:"bytes,1,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam *Lineup `protobuf:"bytes,2,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
}

func (x *LineupResponse) Reset() {
	*x = LineupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupResponse) ProtoMessage() {}

func (x *LineupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupResponse.ProtoReflect.Descriptor instead.
func (*LineupResponse) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{2}
}

func (x *LineupResponse) GetHomeTeam() *Lineup {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *LineupResponse) GetAwayTeam() *Lineup {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

type PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId          uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SeasonId          uint64                 `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	TeamId            uint64                 `protobuf:"varint,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	FixtureId         uint64                 `protobuf:"varint,4,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	PlayerName        string                 `protobuf:"bytes,5,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	AerialsWon        *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=aerials_won,json=aerialsWon,proto3" json:"aerials_won,omitempty"`
	Shots             *Shots                 `protobuf:"bytes,7,opt,name=shots,proto3" json:"shots,omitempty"`
	Goals             *Goals                 `protobuf:"bytes,8,opt,name=goals,proto3" json:"goals,omitempty"`
	Fouls             *Fouls                 `protobuf:"bytes,9,opt,name=fouls,proto3" json:"fouls,omitempty"`
	GoalKeeper        *GoalKeeper            `protobuf:"bytes,10,opt,name=goal_keeper,json=goalKeeper,proto3" json:"goal_keeper,omitempty"`
	BigChancesCreated *wrapperspb.Int32Value `protobuf:"bytes,11,opt,name=big_chances_created,json=bigChancesCreated,proto3" json:"big_chances_created,omitempty"`
	BigChancesMissed  *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=big_chances_missed,json=bigChancesMissed,proto3" json:"big_chances_missed,omitempty"`
	Assists           *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=assists,proto3" json:"assists,omitempty"`
	Dispossessed      *wrapperspb.Int32Value `protobuf:"bytes,14,opt,name=dispossessed,proto3" json:"dispossessed,omitempty"`
	YellowCards       *wrapperspb.Int32Value `protobuf:"bytes,15,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	RedCard           *wrapperspb.Int32Value `protobuf:"bytes,16,opt,name=red_card,json=redCard,proto3" json:"red_card,omitempty"`
	YellowRedCard     *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=yellow_red_card,json=yellowRedCard,proto3" json:"yellow_red_card,omitempty"`
	Penalties         *Penalties             `protobuf:"bytes,18,opt,name=penalties,proto3" json:"penalties,omitempty"`
	Crosses           *Crosses               `protobuf:"bytes,19,opt,name=crosses,proto3" json:"crosses,omitempty"`
	Passes            *Passes                `protobuf:"bytes,20,opt,name=passes,proto3" json:"passes,omitempty"`
	ThroughBalls      *ThroughBalls          `protobuf:"bytes,21,opt,name=through_balls,json=throughBalls,proto3" json:"through_balls,omitempty"`
	Duels             *Duels                 `protobuf:"bytes,22,opt,name=duels,proto3" json:"duels,omitempty"`
	Dribbles          *Dribbles              `protobuf:"bytes,23,opt,name=dribbles,proto3" json:"dribbles,omitempty"`
	LongBallsWon      *wrapperspb.Int32Value `protobuf:"bytes,24,opt,name=long_balls_won,json=longBallsWon,proto3" json:"long_balls_won,omitempty"`
	Offsides          *wrapperspb.Int32Value `protobuf:"bytes,25,opt,name=offsides,proto3" json:"offsides,omitempty"`
	HitWoodwork       *wrapperspb.Int32Value `protobuf:"bytes,26,opt,name=hit_woodwork,json=hitWoodwork,proto3" json:"hit_woodwork,omitempty"`
	Tackles           *wrapperspb.Int32Value `protobuf:"bytes,27,opt,name=tackles,proto3" json:"tackles,omitempty"`
	Interceptions     *wrapperspb.Int32Value `protobuf:"bytes,28,opt,name=interceptions,proto3" json:"interceptions,omitempty"`
	Clearances        *wrapperspb.Int32Value `protobuf:"bytes,29,opt,name=clearances,proto3" json:"clearances,omitempty"`
	ClearancesOffLine *wrapperspb.Int32Value `protobuf:"bytes,30,opt,name=clearances_off_line,json=clearancesOffLine,proto3" json:"clearances_off_line,omitempty"`
	Touches           *wrapperspb.Int32Value `protobuf:"bytes,31,opt,name=touches,proto3" json:"touches,omitempty"`
	MinutesPlayed     *wrapperspb.Int32Value `protobuf:"bytes,32,opt,name=minutes_played,json=minutesPlayed,proto3" json:"minutes_played,omitempty"`
	Rating            *wrapperspb.FloatValue `protobuf:"bytes,33,opt,name=rating,proto3" json:"rating,omitempty"`
	OwnGoals          *wrapperspb.Int32Value `protobuf:"bytes,34,opt,name=own_goals,json=ownGoals,proto3" json:"own_goals,omitempty"`
	ErrorLedToGoal    *wrapperspb.Int32Value `protobuf:"bytes,35,opt,name=error_led_to_goal,json=errorLedToGoal,proto3" json:"error_led_to_goal,omitempty"`
	CreatedAt         *Date                  `protobuf:"bytes,36,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *Date                  `protobuf:"bytes,37,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStats) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerStats) GetSeasonId() uint64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *PlayerStats) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *PlayerStats) GetFixtureId() uint64 {
	if x != nil {
		return x.FixtureId
	}
	return 0
}

func (x *PlayerStats) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PlayerStats) GetAerialsWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.AerialsWon
	}
	return nil
}

func (x *PlayerStats) GetShots() *Shots {
	if x != nil {
		return x.Shots
	}
	return nil
}

func (x *PlayerStats) GetGoals() *Goals {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *PlayerStats) GetFouls() *Fouls {
	if x != nil {
		return x.Fouls
	}
	return nil
}

func (x *PlayerStats) GetGoalKeeper() *GoalKeeper {
	if x != nil {
		return x.GoalKeeper
	}
	return nil
}

func (x *PlayerStats) GetBigChancesCreated() *wrapperspb.Int32Value {
	if x != nil {
		return x.BigChancesCreated
	}
	return nil
}

func (x *PlayerStats) GetBigChancesMissed() *wrapperspb.Int32Value {
	if x != nil {
		return x.BigChancesMissed
	}
	return nil
}

func (x *PlayerStats) GetAssists() *wrapperspb.Int32Value {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *PlayerStats) GetDispossessed() *wrapperspb.Int32Value {
	if x != nil {
		return x.Dispossessed
	}
	return nil
}

func (x *PlayerStats) GetYellowCards() *wrapperspb.Int32Value {
	if x != nil {
		return x.YellowCards
	}
	return nil
}

func (x *PlayerStats) GetRedCard() *wrapperspb.Int32Value {
	if x != nil {
		return x.RedCard
	}
	return nil
}

func (x *PlayerStats) GetYellowRedCard() *wrapperspb.Int32Value {
	if x != nil {
		return x.YellowRedCard
	}
	return nil
}

func (x *PlayerStats) GetPenalties() *Penalties {
	if x != nil {
		return x.Penalties
	}
	return nil
}

func (x *PlayerStats) GetCrosses() *Crosses {
	if x != nil {
		return x.Crosses
	}
	return nil
}

func (x *PlayerStats) GetPasses() *Passes {
	if x != nil {
		return x.Passes
	}
	return nil
}

func (x *PlayerStats) GetThroughBalls() *ThroughBalls {
	if x != nil {
		return x.ThroughBalls
	}
	return nil
}

func (x *PlayerStats) GetDuels() *Duels {
	if x != nil {
		return x.Duels
	}
	return nil
}

func (x *PlayerStats) GetDribbles() *Dribbles {
	if x != nil {
		return x.Dribbles
	}
	return nil
}

func (x *PlayerStats) GetLongBallsWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.LongBallsWon
	}
	return nil
}

func (x *PlayerStats) GetOffsides() *wrapperspb.Int32Value {
	if x != nil {
		return x.Offsides
	}
	return nil
}

func (x *PlayerStats) GetHitWoodwork() *wrapperspb.Int32Value {
	if x != nil {
		return x.HitWoodwork
	}
	return nil
}

func (x *PlayerStats) GetTackles() *wrapperspb.Int32Value {
	if x != nil {
		return x.Tackles
	}
	return nil
}

func (x *PlayerStats) GetInterceptions() *wrapperspb.Int32Value {
	if x != nil {
		return x.Interceptions
	}
	return nil
}

func (x *PlayerStats) GetClearances() *wrapperspb.Int32Value {
	if x != nil {
		return x.Clearances
	}
	return nil
}

func (x *PlayerStats) GetClearancesOffLine() *wrapperspb.Int32Value {
	if x != nil {
		return x.ClearancesOffLine
	}
	return nil
}

func (x *PlayerStats) GetTouches() *wrapperspb.Int32Value {
	if x != nil {
		return x.Touches
	}
	return nil
}

func (x *PlayerStats) GetMinutesPlayed() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinutesPlayed
	}
	return nil
}

func (x *PlayerStats) GetRating() *wrapperspb.FloatValue {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *PlayerStats) GetOwnGoals() *wrapperspb.Int32Value {
	if x != nil {
		return x.OwnGoals
	}
	return nil
}

func (x *PlayerStats) GetErrorLedToGoal() *wrapperspb.Int32Value {
	if x != nil {
		return x.ErrorLedToGoal
	}
	return nil
}

func (x *PlayerStats) GetCreatedAt() *Date {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlayerStats) GetUpdatedAt() *Date {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Shots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	OnTarget  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=on_target,json=onTarget,proto3" json:"on_target,omitempty"`
	OffTarget *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=off_target,json=offTarget,proto3" json:"off_target,omitempty"`
	Blocked   *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Stopped   *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=stopped,proto3" json:"stopped,omitempty"`
}

func (x *Shots) Reset() {
	*x = Shots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shots) ProtoMessage() {}

func (x *Shots) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shots.ProtoReflect.Descriptor instead.
func (*Shots) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{4}
}

func (x *Shots) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Shots) GetOnTarget() *wrapperspb.Int32Value {
	if x != nil {
		return x.OnTarget
	}
	return nil
}

func (x *Shots) GetOffTarget() *wrapperspb.Int32Value {
	if x != nil {
		return x.OffTarget
	}
	return nil
}

func (x *Shots) GetBlocked() *wrapperspb.Int32Value {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *Shots) GetStopped() *wrapperspb.Int32Value {
	if x != nil {
		return x.Stopped
	}
	return nil
}

type Goals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scored   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=scored,proto3" json:"scored,omitempty"`
	Conceded *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=conceded,proto3" json:"conceded,omitempty"`
}

func (x *Goals) Reset() {
	*x = Goals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goals) ProtoMessage() {}

func (x *Goals) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goals.ProtoReflect.Descriptor instead.
func (*Goals) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{5}
}

func (x *Goals) GetScored() *wrapperspb.Int32Value {
	if x != nil {
		return x.Scored
	}
	return nil
}

func (x *Goals) GetConceded() *wrapperspb.Int32Value {
	if x != nil {
		return x.Conceded
	}
	return nil
}

type Fouls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawn     *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=drawn,proto3" json:"drawn,omitempty"`
	Committed *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *Fouls) Reset() {
	*x = Fouls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fouls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fouls) ProtoMessage() {}

func (x *Fouls) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fouls.ProtoReflect.Descriptor instead.
func (*Fouls) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{6}
}

func (x *Fouls) GetDrawn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Drawn
	}
	return nil
}

func (x *Fouls) GetCommitted() *wrapperspb.Int32Value {
	if x != nil {
		return x.Committed
	}
	return nil
}

type GoalKeeper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavesTotal     *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=saves_total,json=savesTotal,proto3" json:"saves_total,omitempty"`
	SavesInsideBox *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=saves_inside_box,json=savesInsideBox,proto3" json:"saves_inside_box,omitempty"`
	GoalsConceded  *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=goals_conceded,json=goalsConceded,proto3" json:"goals_conceded,omitempty"`
	Punches        *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=punches,proto3" json:"punches,omitempty"`
}

func (x *GoalKeeper) Reset() {
	*x = GoalKeeper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalKeeper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalKeeper) ProtoMessage() {}

func (x *GoalKeeper) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalKeeper.ProtoReflect.Descriptor instead.
func (*GoalKeeper) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{7}
}

func (x *GoalKeeper) GetSavesTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.SavesTotal
	}
	return nil
}

func (x *GoalKeeper) GetSavesInsideBox() *wrapperspb.Int32Value {
	if x != nil {
		return x.SavesInsideBox
	}
	return nil
}

func (x *GoalKeeper) GetGoalsConceded() *wrapperspb.Int32Value {
	if x != nil {
		return x.GoalsConceded
	}
	return nil
}

func (x *GoalKeeper) GetPunches() *wrapperspb.Int32Value {
	if x != nil {
		return x.Punches
	}
	return nil
}

type Penalties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scored    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=scored,proto3" json:"scored,omitempty"`
	Missed    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=missed,proto3" json:"missed,omitempty"`
	Saved     *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=saved,proto3" json:"saved,omitempty"`
	Committed *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=committed,proto3" json:"committed,omitempty"`
	Won       *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=won,proto3" json:"won,omitempty"`
}

func (x *Penalties) Reset() {
	*x = Penalties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Penalties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Penalties) ProtoMessage() {}

func (x *Penalties) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Penalties.ProtoReflect.Descriptor instead.
func (*Penalties) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{8}
}

func (x *Penalties) GetScored() *wrapperspb.Int32Value {
	if x != nil {
		return x.Scored
	}
	return nil
}

func (x *Penalties) GetMissed() *wrapperspb.Int32Value {
	if x != nil {
		return x.Missed
	}
	return nil
}

func (x *Penalties) GetSaved() *wrapperspb.Int32Value {
	if x != nil {
		return x.Saved
	}
	return nil
}

func (x *Penalties) GetCommitted() *wrapperspb.Int32Value {
	if x != nil {
		return x.Committed
	}
	return nil
}

func (x *Penalties) GetWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.Won
	}
	return nil
}

type Crosses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Accurate *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=accurate,proto3" json:"accurate,omitempty"`
}

func (x *Crosses) Reset() {
	*x = Crosses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crosses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crosses) ProtoMessage() {}

func (x *Crosses) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crosses.ProtoReflect.Descriptor instead.
func (*Crosses) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{9}
}

func (x *Crosses) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Crosses) GetAccurate() *wrapperspb.Int32Value {
	if x != nil {
		return x.Accurate
	}
	return nil
}

type Passes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Accurate *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=accurate,proto3" json:"accurate,omitempty"`
	Accuracy *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Key      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Long     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *Passes) Reset() {
	*x = Passes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passes) ProtoMessage() {}

func (x *Passes) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passes.ProtoReflect.Descriptor instead.
func (*Passes) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{10}
}

func (x *Passes) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Passes) GetAccurate() *wrapperspb.Int32Value {
	if x != nil {
		return x.Accurate
	}
	return nil
}

func (x *Passes) GetAccuracy() *wrapperspb.Int32Value {
	if x != nil {
		return x.Accuracy
	}
	return nil
}

func (x *Passes) GetKey() *wrapperspb.Int32Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Passes) GetLong() *wrapperspb.Int32Value {
	if x != nil {
		return x.Long
	}
	return nil
}

type ThroughBalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Won   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=won,proto3" json:"won,omitempty"`
}

func (x *ThroughBalls) Reset() {
	*x = ThroughBalls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThroughBalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThroughBalls) ProtoMessage() {}

func (x *ThroughBalls) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThroughBalls.ProtoReflect.Descriptor instead.
func (*ThroughBalls) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{11}
}

func (x *ThroughBalls) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *ThroughBalls) GetWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.Won
	}
	return nil
}

type Duels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Won   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=won,proto3" json:"won,omitempty"`
	Lost  *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=lost,proto3" json:"lost,omitempty"`
}

func (x *Duels) Reset() {
	*x = Duels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duels) ProtoMessage() {}

func (x *Duels) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duels.ProtoReflect.Descriptor instead.
func (*Duels) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{12}
}

func (x *Duels) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Duels) GetWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.Won
	}
	return nil
}

func (x *Duels) GetLost() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lost
	}
	return nil
}

type Dribbles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attempts *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Success  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
	Past     *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=past,proto3" json:"past,omitempty"`
}

func (x *Dribbles) Reset() {
	*x = Dribbles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dribbles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dribbles) ProtoMessage() {}

func (x *Dribbles) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dribbles.ProtoReflect.Descriptor instead.
func (*Dribbles) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{13}
}

func (x *Dribbles) GetAttempts() *wrapperspb.Int32Value {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *Dribbles) GetSuccess() *wrapperspb.Int32Value {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *Dribbles) GetPast() *wrapperspb.Int32Value {
	if x != nil {
		return x.Past
	}
	return nil
}

type Lineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start []*LineupPlayer `protobuf:"bytes,1,rep,name=start,proto3" json:"start,omitempty"`
	Bench []*LineupPlayer `protobuf:"bytes,2,rep,name=bench,proto3" json:"bench,omitempty"`
}

func (x *Lineup) Reset() {
	*x = Lineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lineup) ProtoMessage() {}

func (x *Lineup) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lineup.ProtoReflect.Descriptor instead.
func (*Lineup) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{14}
}

func (x *Lineup) GetStart() []*LineupPlayer {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Lineup) GetBench() []*LineupPlayer {
	if x != nil {
		return x.Bench
	}
	return nil
}

type LineupPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId          uint64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Position          string                  `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	FormationPosition *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=formation_position,json=formationPosition,proto3" json:"formation_position,omitempty"`
	IsSubstitute      bool                    `protobuf:"varint,4,opt,name=is_substitute,json=isSubstitute,proto3" json:"is_substitute,omitempty"`
}

func (x *LineupPlayer) Reset() {
	*x = LineupPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_stats_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupPlayer) ProtoMessage() {}

func (x *LineupPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_player_stats_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupPlayer.ProtoReflect.Descriptor instead.
func (*LineupPlayer) Descriptor() ([]byte, []int) {
	return file_player_stats_proto_rawDescGZIP(), []int{15}
}

func (x *LineupPlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *LineupPlayer) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *LineupPlayer) GetFormationPosition() *wrapperspb.UInt32Value {
	if x != nil {
		return x.FormationPosition
	}
	return nil
}

func (x *LineupPlayer) GetIsSubstitute() bool {
	if x != nil {
		return x.IsSubstitute
	}
	return false
}

var File_player_stats_proto protoreflect.FileDescriptor

var file_player_stats_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73,
	0x0a, 0x1a, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x61,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x72, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x22, 0xdd, 0x0f, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x46, 0x6f, 0x75, 0x6c, 0x73,
	0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x12, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x3e, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a,
	0x09, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x52, 0x09, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0d, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x0c,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x64, 0x75, 0x65, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x52, 0x05,
	0x64, 0x75, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x64,
	0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x66,
	0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x68, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x68, 0x69, 0x74, 0x57, 0x6f, 0x6f, 0x64, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4c, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x05,
	0x53, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x05,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x64, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x05, 0x46, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12,
	0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x47,
	0x6f, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x42,
	0x0a, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x22, 0x75,
	0x0a, 0x07, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x70, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x44, 0x75, 0x65, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x77, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x05,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22, 0xb9, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x32, 0xa1, 0x02, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x46,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_player_stats_proto_rawDescOnce sync.Once
	file_player_stats_proto_rawDescData = file_player_stats_proto_rawDesc
)

func file_player_stats_proto_rawDescGZIP() []byte {
	file_player_stats_proto_rawDescOnce.Do(func() {
		file_player_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_player_stats_proto_rawDescData)
	})
	return file_player_stats_proto_rawDescData
}

var file_player_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_player_stats_proto_goTypes = []interface{}{
	(*TeamSeasonPlayStatsRequest)(nil), // 0: statistico.TeamSeasonPlayStatsRequest
	(*PlayerStatsResponse)(nil),        // 1: statistico.PlayerStatsResponse
	(*LineupResponse)(nil),             // 2: statistico.LineupResponse
	(*PlayerStats)(nil),                // 3: statistico.PlayerStats
	(*Shots)(nil),                      // 4: statistico.Shots
	(*Goals)(nil),                      // 5: statistico.Goals
	(*Fouls)(nil),                      // 6: statistico.Fouls
	(*GoalKeeper)(nil),                 // 7: statistico.GoalKeeper
	(*Penalties)(nil),                  // 8: statistico.Penalties
	(*Crosses)(nil),                    // 9: statistico.Crosses
	(*Passes)(nil),                     // 10: statistico.Passes
	(*ThroughBalls)(nil),               // 11: statistico.ThroughBalls
	(*Duels)(nil),                      // 12: statistico.Duels
	(*Dribbles)(nil),                   // 13: statistico.Dribbles
	(*Lineup)(nil),                     // 14: statistico.Lineup
	(*LineupPlayer)(nil),               // 15: statistico.LineupPlayer
	(*wrapperspb.Int32Value)(nil),      // 16: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),      // 17: google.protobuf.FloatValue
	(*Date)(nil),                       // 18: statistico.Date
	(*wrapperspb.UInt32Value)(nil),     // 19: google.protobuf.UInt32Value
	(*FixtureRequest)(nil),             // 20: statistico.FixtureRequest
}
var file_player_stats_proto_depIdxs = []int32{
	3,  // 0: statistico.PlayerStatsResponse.home_team:type_name -> statistico.PlayerStats
	3,  // 1: statistico.PlayerStatsResponse.away_team:type_name -> statistico.PlayerStats
	14, // 2: statistico.LineupResponse.home_team:type_name -> statistico.Lineup
	14, // 3: statistico.LineupResponse.away_team:type_name -> statistico.Lineup
	16, // 4: statistico.PlayerStats.aerials_won:type_name -> google.protobuf.Int32Value
	4,  // 5: statistico.PlayerStats.shots:type_name -> statistico.Shots
	5,  // 6: statistico.PlayerStats.goals:type_name -> statistico.Goals
	6,  // 7: statistico.PlayerStats.fouls:type_name -> statistico.Fouls
	7,  // 8: statistico.PlayerStats.goal_keeper:type_name -> statistico.GoalKeeper
	16, // 9: statistico.PlayerStats.big_chances_created:type_name -> google.protobuf.Int32Value
	16, // 10: statistico.PlayerStats.big_chances_missed:type_name -> google.protobuf.Int32Value
	16, // 11: statistico.PlayerStats.assists:type_name -> google.protobuf.Int32Value
	16, // 12: statistico.PlayerStats.dispossessed:type_name -> google.protobuf.Int32Value
	16, // 13: statistico.PlayerStats.yellow_cards:type_name -> google.protobuf.Int32Value
	16, // 14: statistico.PlayerStats.red_card:type_name -> google.protobuf.Int32Value
	16, // 15: statistico.PlayerStats.yellow_red_card:type_name -> google.protobuf.Int32Value
	8,  // 16: statistico.PlayerStats.penalties:type_name -> statistico.Penalties
	9,  // 17: statistico.PlayerStats.crosses:type_name -> statistico.Crosses
	10, // 18: statistico.PlayerStats.passes:type_name -> statistico.Passes
	11, // 19: statistico.PlayerStats.through_balls:type_name -> statistico.ThroughBalls
	12, // 20: statistico.PlayerStats.duels:type_name -> statistico.Duels
	13, // 21: statistico.PlayerStats.dribbles:type_name -> statistico.Dribbles
	16, // 22: statistico.PlayerStats.long_balls_won:type_name -> google.protobuf.Int32Value
	16, // 23: statistico.PlayerStats.offsides:type_name -> google.protobuf.Int32Value
	16, // 24: statistico.PlayerStats.hit_woodwork:type_name -> google.protobuf.Int32Value
	16, // 25: statistico.PlayerStats.tackles:type_name -> google.protobuf.Int32Value
	16, // 26: statistico.PlayerStats.interceptions:type_name -> google.protobuf.Int32Value
	16, // 27: statistico.PlayerStats.clearances:type_name -> google.protobuf.Int32Value
	16, // 28: statistico.PlayerStats.clearances_off_line:type_name -> google.protobuf.Int32Value
	16, // 29: statistico.PlayerStats.touches:type_name -> google.protobuf.Int32Value
	16, // 30: statistico.PlayerStats.minutes_played:type_name -> google.protobuf.Int32Value
	17, // 31: statistico.PlayerStats.rating:type_name -> google.protobuf.FloatValue
	16, // 32: statistico.PlayerStats.own_goals:type_name -> google.protobuf.Int32Value
	16, // 33: statistico.PlayerStats.error_led_to_goal:type_name -> google.protobuf.Int32Value
	18, // 34: statistico.PlayerStats.created_at:type_name -> statistico.Date
	18, // 35: statistico.PlayerStats.updated_at:type_name -> statistico.Date
	16, // 36: statistico.Shots.total:type_name -> google.protobuf.Int32Value
	16, // 37: statistico.Shots.on_target:type_name -> google.protobuf.Int32Value
	16, // 38: statistico.Shots.off_target:type_name -> google.protobuf.Int32Value
	16, // 39: statistico.Shots.blocked:type_name -> google.protobuf.Int32Value
	16, // 40: statistico.Shots.stopped:type_name -> google.protobuf.Int32Value
	16, // 41: statistico.Goals.scored:type_name -> google.protobuf.Int32Value
	16, // 42: statistico.Goals.conceded:type_name -> google.protobuf.Int32Value
	16, // 43: statistico.Fouls.drawn:type_name -> google.protobuf.Int32Value
	16, // 44: statistico.Fouls.committed:type_name -> google.protobuf.Int32Value
	16, // 45: statistico.GoalKeeper.saves_total:type_name -> google.protobuf.Int32Value
	16, // 46: statistico.GoalKeeper.saves_inside_box:type_name -> google.protobuf.Int32Value
	16, // 47: statistico.GoalKeeper.goals_conceded:type_name -> google.protobuf.Int32Value
	16, // 48: statistico.GoalKeeper.punches:type_name -> google.protobuf.Int32Value
	16, // 49: statistico.Penalties.scored:type_name -> google.protobuf.Int32Value
	16, // 50: statistico.Penalties.missed:type_name -> google.protobuf.Int32Value
	16, // 51: statistico.Penalties.saved:type_name -> google.protobuf.Int32Value
	16, // 52: statistico.Penalties.committed:type_name -> google.protobuf.Int32Value
	16, // 53: statistico.Penalties.won:type_name -> google.protobuf.Int32Value
	16, // 54: statistico.Crosses.total:type_name -> google.protobuf.Int32Value
	16, // 55: statistico.Crosses.accurate:type_name -> google.protobuf.Int32Value
	16, // 56: statistico.Passes.total:type_name -> google.protobuf.Int32Value
	16, // 57: statistico.Passes.accurate:type_name -> google.protobuf.Int32Value
	16, // 58: statistico.Passes.accuracy:type_name -> google.protobuf.Int32Value
	16, // 59: statistico.Passes.key:type_name -> google.protobuf.Int32Value
	16, // 60: statistico.Passes.long:type_name -> google.protobuf.Int32Value
	16, // 61: statistico.ThroughBalls.total:type_name -> google.protobuf.Int32Value
	16, // 62: statistico.ThroughBalls.won:type_name -> google.protobuf.Int32Value
	16, // 63: statistico.Duels.total:type_name -> google.protobuf.Int32Value
	16, // 64: statistico.Duels.won:type_name -> google.protobuf.Int32Value
	16, // 65: statistico.Duels.lost:type_name -> google.protobuf.Int32Value
	16, // 66: statistico.Dribbles.attempts:type_name -> google.protobuf.Int32Value
	16, // 67: statistico.Dribbles.success:type_name -> google.protobuf.Int32Value
	16, // 68: statistico.Dribbles.past:type_name -> google.protobuf.Int32Value
	15, // 69: statistico.Lineup.start:type_name -> statistico.LineupPlayer
	15, // 70: statistico.Lineup.bench:type_name -> statistico.LineupPlayer
	19, // 71: statistico.LineupPlayer.formation_position:type_name -> google.protobuf.UInt32Value
	20, // 72: statistico.PlayerStatsService.GetPlayerStatsForFixture:input_type -> statistico.FixtureRequest
	20, // 73: statistico.PlayerStatsService.GetLineUpForFixture:input_type -> statistico.FixtureRequest
	0,  // 74: statistico.PlayerStatsService.GetTeamSeasonPlayerStats:input_type -> statistico.TeamSeasonPlayStatsRequest
	1,  // 75: statistico.PlayerStatsService.GetPlayerStatsForFixture:output_type -> statistico.PlayerStatsResponse
	2,  // 76: statistico.PlayerStatsService.GetLineUpForFixture:output_type -> statistico.LineupResponse
	3,  // 77: statistico.PlayerStatsService.GetTeamSeasonPlayerStats:output_type -> statistico.PlayerStats
	75, // [75:78] is the sub-list for method output_type
	72, // [72:75] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_player_stats_proto_init() }
func file_player_stats_proto_init() {
	if File_player_stats_proto != nil {
		return
	}
	file_common_proto_init()
	file_requests_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_player_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSeasonPlayStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fouls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalKeeper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Penalties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crosses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThroughBalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dribbles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_stats_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_player_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_player_stats_proto_goTypes,
		DependencyIndexes: file_player_stats_proto_depIdxs,
		MessageInfos:      file_player_stats_proto_msgTypes,
	}.Build()
	File_player_stats_proto = out.File
	file_player_stats_proto_rawDesc = nil
	file_player_stats_proto_goTypes = nil
	file_player_stats_proto_depIdxs = nil
}
