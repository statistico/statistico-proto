// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamStatsServiceClient is the client API for TeamStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamStatsServiceClient interface {
	GetTeamStatsForFixture(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*TeamStatsResponse, error)
	GetStatForTeam(ctx context.Context, in *TeamStatRequest, opts ...grpc.CallOption) (TeamStatsService_GetStatForTeamClient, error)
}

type teamStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamStatsServiceClient(cc grpc.ClientConnInterface) TeamStatsServiceClient {
	return &teamStatsServiceClient{cc}
}

func (c *teamStatsServiceClient) GetTeamStatsForFixture(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*TeamStatsResponse, error) {
	out := new(TeamStatsResponse)
	err := c.cc.Invoke(ctx, "/statistico.TeamStatsService/GetTeamStatsForFixture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamStatsServiceClient) GetStatForTeam(ctx context.Context, in *TeamStatRequest, opts ...grpc.CallOption) (TeamStatsService_GetStatForTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TeamStatsService_ServiceDesc.Streams[0], "/statistico.TeamStatsService/GetStatForTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamStatsServiceGetStatForTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TeamStatsService_GetStatForTeamClient interface {
	Recv() (*TeamStat, error)
	grpc.ClientStream
}

type teamStatsServiceGetStatForTeamClient struct {
	grpc.ClientStream
}

func (x *teamStatsServiceGetStatForTeamClient) Recv() (*TeamStat, error) {
	m := new(TeamStat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TeamStatsServiceServer is the server API for TeamStatsService service.
// All implementations must embed UnimplementedTeamStatsServiceServer
// for forward compatibility
type TeamStatsServiceServer interface {
	GetTeamStatsForFixture(context.Context, *FixtureRequest) (*TeamStatsResponse, error)
	GetStatForTeam(*TeamStatRequest, TeamStatsService_GetStatForTeamServer) error
	mustEmbedUnimplementedTeamStatsServiceServer()
}

// UnimplementedTeamStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamStatsServiceServer struct {
}

func (UnimplementedTeamStatsServiceServer) GetTeamStatsForFixture(context.Context, *FixtureRequest) (*TeamStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamStatsForFixture not implemented")
}
func (UnimplementedTeamStatsServiceServer) GetStatForTeam(*TeamStatRequest, TeamStatsService_GetStatForTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatForTeam not implemented")
}
func (UnimplementedTeamStatsServiceServer) mustEmbedUnimplementedTeamStatsServiceServer() {}

// UnsafeTeamStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamStatsServiceServer will
// result in compilation errors.
type UnsafeTeamStatsServiceServer interface {
	mustEmbedUnimplementedTeamStatsServiceServer()
}

func RegisterTeamStatsServiceServer(s grpc.ServiceRegistrar, srv TeamStatsServiceServer) {
	s.RegisterService(&TeamStatsService_ServiceDesc, srv)
}

func _TeamStatsService_GetTeamStatsForFixture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamStatsServiceServer).GetTeamStatsForFixture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistico.TeamStatsService/GetTeamStatsForFixture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamStatsServiceServer).GetTeamStatsForFixture(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamStatsService_GetStatForTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeamStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TeamStatsServiceServer).GetStatForTeam(m, &teamStatsServiceGetStatForTeamServer{stream})
}

type TeamStatsService_GetStatForTeamServer interface {
	Send(*TeamStat) error
	grpc.ServerStream
}

type teamStatsServiceGetStatForTeamServer struct {
	grpc.ServerStream
}

func (x *teamStatsServiceGetStatForTeamServer) Send(m *TeamStat) error {
	return x.ServerStream.SendMsg(m)
}

// TeamStatsService_ServiceDesc is the grpc.ServiceDesc for TeamStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.TeamStatsService",
	HandlerType: (*TeamStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamStatsForFixture",
			Handler:    _TeamStatsService_GetTeamStatsForFixture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStatForTeam",
			Handler:       _TeamStatsService_GetStatForTeam_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "team_stats.proto",
}
