// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.21.12
// source: team_stats.proto

package statistico

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeTeam *TeamStats `protobuf:"bytes,1,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam *TeamStats `protobuf:"bytes,2,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
}

func (x *TeamStatsResponse) Reset() {
	*x = TeamStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatsResponse) ProtoMessage() {}

func (x *TeamStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatsResponse.ProtoReflect.Descriptor instead.
func (*TeamStatsResponse) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{0}
}

func (x *TeamStatsResponse) GetHomeTeam() *TeamStats {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *TeamStatsResponse) GetAwayTeam() *TeamStats {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         uint64                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	FixtureId      uint64                 `protobuf:"varint,2,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	Assists        *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=assists,proto3" json:"assists,omitempty"`
	BallPossession *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=ball_possession,json=ballPossession,proto3" json:"ball_possession,omitempty"`
	BallSafe       *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=ball_safe,json=ballSafe,proto3" json:"ball_safe,omitempty"`
	Challenges     *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=challenges,proto3" json:"challenges,omitempty"`
	Corners        *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=corners,proto3" json:"corners,omitempty"`
	DuelsWon       *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=duels_won,json=duelsWon,proto3" json:"duels_won,omitempty"`
	FreeKicks      *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=free_kicks,json=freeKicks,proto3" json:"free_kicks,omitempty"`
	Fouls          *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=fouls,proto3" json:"fouls,omitempty"`
	GoalKicks      *wrapperspb.Int32Value `protobuf:"bytes,11,opt,name=goal_kicks,json=goalKicks,proto3" json:"goal_kicks,omitempty"`
	HitWoodwork    *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=hit_woodwork,json=hitWoodwork,proto3" json:"hit_woodwork,omitempty"`
	Injuries       *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=injuries,proto3" json:"injuries,omitempty"`
	Interceptions  *wrapperspb.Int32Value `protobuf:"bytes,14,opt,name=interceptions,proto3" json:"interceptions,omitempty"`
	Offsides       *wrapperspb.Int32Value `protobuf:"bytes,15,opt,name=offsides,proto3" json:"offsides,omitempty"`
	Penalties      *wrapperspb.Int32Value `protobuf:"bytes,16,opt,name=penalties,proto3" json:"penalties,omitempty"`
	Saves          *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=saves,proto3" json:"saves,omitempty"`
	Substitutions  *wrapperspb.Int32Value `protobuf:"bytes,18,opt,name=substitutions,proto3" json:"substitutions,omitempty"`
	Tackles        *wrapperspb.Int32Value `protobuf:"bytes,19,opt,name=tackles,proto3" json:"tackles,omitempty"`
	TeamAttacks    *TeamAttacks           `protobuf:"bytes,20,opt,name=team_attacks,json=teamAttacks,proto3" json:"team_attacks,omitempty"`
	TeamCards      *TeamCards             `protobuf:"bytes,21,opt,name=team_cards,json=teamCards,proto3" json:"team_cards,omitempty"`
	TeamCrosses    *TeamCrosses           `protobuf:"bytes,22,opt,name=team_crosses,json=teamCrosses,proto3" json:"team_crosses,omitempty"`
	TeamDribbles   *TeamDribbles          `protobuf:"bytes,23,opt,name=team_dribbles,json=teamDribbles,proto3" json:"team_dribbles,omitempty"`
	TeamGoals      *TeamGoals             `protobuf:"bytes,24,opt,name=team_goals,json=teamGoals,proto3" json:"team_goals,omitempty"`
	TeamHeaders    *TeamHeaders           `protobuf:"bytes,25,opt,name=team_headers,json=teamHeaders,proto3" json:"team_headers,omitempty"`
	TeamPasses     *TeamPasses            `protobuf:"bytes,26,opt,name=team_passes,json=teamPasses,proto3" json:"team_passes,omitempty"`
	TeamShots      *TeamShots             `protobuf:"bytes,27,opt,name=team_shots,json=teamShots,proto3" json:"team_shots,omitempty"`
	ThrowIns       *wrapperspb.Int32Value `protobuf:"bytes,28,opt,name=throw_ins,json=throwIns,proto3" json:"throw_ins,omitempty"`
	Treatments     *wrapperspb.Int32Value `protobuf:"bytes,29,opt,name=treatments,proto3" json:"treatments,omitempty"`
	CreatedAt      *Date                  `protobuf:"bytes,30,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *Date                  `protobuf:"bytes,31,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{1}
}

func (x *TeamStats) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamStats) GetFixtureId() uint64 {
	if x != nil {
		return x.FixtureId
	}
	return 0
}

func (x *TeamStats) GetAssists() *wrapperspb.Int32Value {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *TeamStats) GetBallPossession() *wrapperspb.Int32Value {
	if x != nil {
		return x.BallPossession
	}
	return nil
}

func (x *TeamStats) GetBallSafe() *wrapperspb.Int32Value {
	if x != nil {
		return x.BallSafe
	}
	return nil
}

func (x *TeamStats) GetChallenges() *wrapperspb.Int32Value {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *TeamStats) GetCorners() *wrapperspb.Int32Value {
	if x != nil {
		return x.Corners
	}
	return nil
}

func (x *TeamStats) GetDuelsWon() *wrapperspb.Int32Value {
	if x != nil {
		return x.DuelsWon
	}
	return nil
}

func (x *TeamStats) GetFreeKicks() *wrapperspb.Int32Value {
	if x != nil {
		return x.FreeKicks
	}
	return nil
}

func (x *TeamStats) GetFouls() *wrapperspb.Int32Value {
	if x != nil {
		return x.Fouls
	}
	return nil
}

func (x *TeamStats) GetGoalKicks() *wrapperspb.Int32Value {
	if x != nil {
		return x.GoalKicks
	}
	return nil
}

func (x *TeamStats) GetHitWoodwork() *wrapperspb.Int32Value {
	if x != nil {
		return x.HitWoodwork
	}
	return nil
}

func (x *TeamStats) GetInjuries() *wrapperspb.Int32Value {
	if x != nil {
		return x.Injuries
	}
	return nil
}

func (x *TeamStats) GetInterceptions() *wrapperspb.Int32Value {
	if x != nil {
		return x.Interceptions
	}
	return nil
}

func (x *TeamStats) GetOffsides() *wrapperspb.Int32Value {
	if x != nil {
		return x.Offsides
	}
	return nil
}

func (x *TeamStats) GetPenalties() *wrapperspb.Int32Value {
	if x != nil {
		return x.Penalties
	}
	return nil
}

func (x *TeamStats) GetSaves() *wrapperspb.Int32Value {
	if x != nil {
		return x.Saves
	}
	return nil
}

func (x *TeamStats) GetSubstitutions() *wrapperspb.Int32Value {
	if x != nil {
		return x.Substitutions
	}
	return nil
}

func (x *TeamStats) GetTackles() *wrapperspb.Int32Value {
	if x != nil {
		return x.Tackles
	}
	return nil
}

func (x *TeamStats) GetTeamAttacks() *TeamAttacks {
	if x != nil {
		return x.TeamAttacks
	}
	return nil
}

func (x *TeamStats) GetTeamCards() *TeamCards {
	if x != nil {
		return x.TeamCards
	}
	return nil
}

func (x *TeamStats) GetTeamCrosses() *TeamCrosses {
	if x != nil {
		return x.TeamCrosses
	}
	return nil
}

func (x *TeamStats) GetTeamDribbles() *TeamDribbles {
	if x != nil {
		return x.TeamDribbles
	}
	return nil
}

func (x *TeamStats) GetTeamGoals() *TeamGoals {
	if x != nil {
		return x.TeamGoals
	}
	return nil
}

func (x *TeamStats) GetTeamHeaders() *TeamHeaders {
	if x != nil {
		return x.TeamHeaders
	}
	return nil
}

func (x *TeamStats) GetTeamPasses() *TeamPasses {
	if x != nil {
		return x.TeamPasses
	}
	return nil
}

func (x *TeamStats) GetTeamShots() *TeamShots {
	if x != nil {
		return x.TeamShots
	}
	return nil
}

func (x *TeamStats) GetThrowIns() *wrapperspb.Int32Value {
	if x != nil {
		return x.ThrowIns
	}
	return nil
}

func (x *TeamStats) GetTreatments() *wrapperspb.Int32Value {
	if x != nil {
		return x.Treatments
	}
	return nil
}

func (x *TeamStats) GetCreatedAt() *Date {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TeamStats) GetUpdatedAt() *Date {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TeamCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red       *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=red,proto3" json:"red,omitempty"`
	Yellow    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=yellow,proto3" json:"yellow,omitempty"`
	YellowRed *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=yellow_red,json=yellowRed,proto3" json:"yellow_red,omitempty"`
}

func (x *TeamCards) Reset() {
	*x = TeamCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamCards) ProtoMessage() {}

func (x *TeamCards) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamCards.ProtoReflect.Descriptor instead.
func (*TeamCards) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{2}
}

func (x *TeamCards) GetRed() *wrapperspb.Int32Value {
	if x != nil {
		return x.Red
	}
	return nil
}

func (x *TeamCards) GetYellow() *wrapperspb.Int32Value {
	if x != nil {
		return x.Yellow
	}
	return nil
}

func (x *TeamCards) GetYellowRed() *wrapperspb.Int32Value {
	if x != nil {
		return x.YellowRed
	}
	return nil
}

type TeamCrosses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Accurate *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=accurate,proto3" json:"accurate,omitempty"`
}

func (x *TeamCrosses) Reset() {
	*x = TeamCrosses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamCrosses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamCrosses) ProtoMessage() {}

func (x *TeamCrosses) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamCrosses.ProtoReflect.Descriptor instead.
func (*TeamCrosses) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{3}
}

func (x *TeamCrosses) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamCrosses) GetAccurate() *wrapperspb.Int32Value {
	if x != nil {
		return x.Accurate
	}
	return nil
}

type TeamDribbles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Success *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TeamDribbles) Reset() {
	*x = TeamDribbles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamDribbles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamDribbles) ProtoMessage() {}

func (x *TeamDribbles) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamDribbles.ProtoReflect.Descriptor instead.
func (*TeamDribbles) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{4}
}

func (x *TeamDribbles) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamDribbles) GetSuccess() *wrapperspb.Int32Value {
	if x != nil {
		return x.Success
	}
	return nil
}

type TeamGoals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scored           *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=scored,proto3" json:"scored,omitempty"`
	ScoredHalfTime   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=scored_half_time,json=scoredHalfTime,proto3" json:"scored_half_time,omitempty"`
	Conceded         *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=conceded,proto3" json:"conceded,omitempty"`
	ConcededHalfTime *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=conceded_half_time,json=concededHalfTime,proto3" json:"conceded_half_time,omitempty"`
	Attempts         *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *TeamGoals) Reset() {
	*x = TeamGoals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGoals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGoals) ProtoMessage() {}

func (x *TeamGoals) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGoals.ProtoReflect.Descriptor instead.
func (*TeamGoals) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{5}
}

func (x *TeamGoals) GetScored() *wrapperspb.Int32Value {
	if x != nil {
		return x.Scored
	}
	return nil
}

func (x *TeamGoals) GetScoredHalfTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScoredHalfTime
	}
	return nil
}

func (x *TeamGoals) GetConceded() *wrapperspb.Int32Value {
	if x != nil {
		return x.Conceded
	}
	return nil
}

func (x *TeamGoals) GetConcededHalfTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConcededHalfTime
	}
	return nil
}

func (x *TeamGoals) GetAttempts() *wrapperspb.Int32Value {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type TeamHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Success *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TeamHeaders) Reset() {
	*x = TeamHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamHeaders) ProtoMessage() {}

func (x *TeamHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamHeaders.ProtoReflect.Descriptor instead.
func (*TeamHeaders) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{6}
}

func (x *TeamHeaders) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamHeaders) GetSuccess() *wrapperspb.Int32Value {
	if x != nil {
		return x.Success
	}
	return nil
}

type TeamShots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	OnGoal     *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=on_goal,json=onGoal,proto3" json:"on_goal,omitempty"`
	OffGoal    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=off_goal,json=offGoal,proto3" json:"off_goal,omitempty"`
	Blocked    *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	InsideBox  *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=inside_box,json=insideBox,proto3" json:"inside_box,omitempty"`
	OutsideBox *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=outside_box,json=outsideBox,proto3" json:"outside_box,omitempty"`
}

func (x *TeamShots) Reset() {
	*x = TeamShots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamShots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamShots) ProtoMessage() {}

func (x *TeamShots) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamShots.ProtoReflect.Descriptor instead.
func (*TeamShots) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{7}
}

func (x *TeamShots) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamShots) GetOnGoal() *wrapperspb.Int32Value {
	if x != nil {
		return x.OnGoal
	}
	return nil
}

func (x *TeamShots) GetOffGoal() *wrapperspb.Int32Value {
	if x != nil {
		return x.OffGoal
	}
	return nil
}

func (x *TeamShots) GetBlocked() *wrapperspb.Int32Value {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *TeamShots) GetInsideBox() *wrapperspb.Int32Value {
	if x != nil {
		return x.InsideBox
	}
	return nil
}

func (x *TeamShots) GetOutsideBox() *wrapperspb.Int32Value {
	if x != nil {
		return x.OutsideBox
	}
	return nil
}

type TeamPasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Success    *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
	Percentage *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Key        *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Long       *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *TeamPasses) Reset() {
	*x = TeamPasses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPasses) ProtoMessage() {}

func (x *TeamPasses) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPasses.ProtoReflect.Descriptor instead.
func (*TeamPasses) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{8}
}

func (x *TeamPasses) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamPasses) GetSuccess() *wrapperspb.Int32Value {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *TeamPasses) GetPercentage() *wrapperspb.Int32Value {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *TeamPasses) GetKey() *wrapperspb.Int32Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TeamPasses) GetLong() *wrapperspb.Int32Value {
	if x != nil {
		return x.Long
	}
	return nil
}

type TeamAttacks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=counter,proto3" json:"counter,omitempty"`
	Total     *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Dangerous *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=dangerous,proto3" json:"dangerous,omitempty"`
}

func (x *TeamAttacks) Reset() {
	*x = TeamAttacks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_team_stats_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamAttacks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamAttacks) ProtoMessage() {}

func (x *TeamAttacks) ProtoReflect() protoreflect.Message {
	mi := &file_team_stats_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamAttacks.ProtoReflect.Descriptor instead.
func (*TeamAttacks) Descriptor() ([]byte, []int) {
	return file_team_stats_proto_rawDescGZIP(), []int{9}
}

func (x *TeamAttacks) GetCounter() *wrapperspb.Int32Value {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *TeamAttacks) GetTotal() *wrapperspb.Int32Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TeamAttacks) GetDangerous() *wrapperspb.Int32Value {
	if x != nil {
		return x.Dangerous
	}
	return nil
}

var File_team_stats_proto protoreflect.FileDescriptor

var file_team_stats_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x11,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x22, 0xd7, 0x0d, 0x0a, 0x09, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x75,
	0x65, 0x6c, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x75, 0x65, 0x6c,
	0x73, 0x57, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6f,
	0x75, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x3e, 0x0a, 0x0c, 0x68, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x68, 0x69, 0x74, 0x57, 0x6f, 0x6f, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x37, 0x0a, 0x08, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x69, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f,
	0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a,
	0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12,
	0x3a, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0b,
	0x74, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x68, 0x72, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x72, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x0a, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x22, 0x79, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x0c,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x35, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x77, 0x0a,
	0x0b, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x35, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x67, 0x6f,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x36, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x22, 0x93, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6c,
	0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0xb2, 0x01, 0x0a,
	0x0b, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75,
	0x73, 0x32, 0x69, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x46, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x6f,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_team_stats_proto_rawDescOnce sync.Once
	file_team_stats_proto_rawDescData = file_team_stats_proto_rawDesc
)

func file_team_stats_proto_rawDescGZIP() []byte {
	file_team_stats_proto_rawDescOnce.Do(func() {
		file_team_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_team_stats_proto_rawDescData)
	})
	return file_team_stats_proto_rawDescData
}

var file_team_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_team_stats_proto_goTypes = []interface{}{
	(*TeamStatsResponse)(nil),     // 0: statistico.TeamStatsResponse
	(*TeamStats)(nil),             // 1: statistico.TeamStats
	(*TeamCards)(nil),             // 2: statistico.TeamCards
	(*TeamCrosses)(nil),           // 3: statistico.TeamCrosses
	(*TeamDribbles)(nil),          // 4: statistico.TeamDribbles
	(*TeamGoals)(nil),             // 5: statistico.TeamGoals
	(*TeamHeaders)(nil),           // 6: statistico.TeamHeaders
	(*TeamShots)(nil),             // 7: statistico.TeamShots
	(*TeamPasses)(nil),            // 8: statistico.TeamPasses
	(*TeamAttacks)(nil),           // 9: statistico.TeamAttacks
	(*wrapperspb.Int32Value)(nil), // 10: google.protobuf.Int32Value
	(*Date)(nil),                  // 11: statistico.Date
	(*FixtureRequest)(nil),        // 12: statistico.FixtureRequest
}
var file_team_stats_proto_depIdxs = []int32{
	1,  // 0: statistico.TeamStatsResponse.home_team:type_name -> statistico.TeamStats
	1,  // 1: statistico.TeamStatsResponse.away_team:type_name -> statistico.TeamStats
	10, // 2: statistico.TeamStats.assists:type_name -> google.protobuf.Int32Value
	10, // 3: statistico.TeamStats.ball_possession:type_name -> google.protobuf.Int32Value
	10, // 4: statistico.TeamStats.ball_safe:type_name -> google.protobuf.Int32Value
	10, // 5: statistico.TeamStats.challenges:type_name -> google.protobuf.Int32Value
	10, // 6: statistico.TeamStats.corners:type_name -> google.protobuf.Int32Value
	10, // 7: statistico.TeamStats.duels_won:type_name -> google.protobuf.Int32Value
	10, // 8: statistico.TeamStats.free_kicks:type_name -> google.protobuf.Int32Value
	10, // 9: statistico.TeamStats.fouls:type_name -> google.protobuf.Int32Value
	10, // 10: statistico.TeamStats.goal_kicks:type_name -> google.protobuf.Int32Value
	10, // 11: statistico.TeamStats.hit_woodwork:type_name -> google.protobuf.Int32Value
	10, // 12: statistico.TeamStats.injuries:type_name -> google.protobuf.Int32Value
	10, // 13: statistico.TeamStats.interceptions:type_name -> google.protobuf.Int32Value
	10, // 14: statistico.TeamStats.offsides:type_name -> google.protobuf.Int32Value
	10, // 15: statistico.TeamStats.penalties:type_name -> google.protobuf.Int32Value
	10, // 16: statistico.TeamStats.saves:type_name -> google.protobuf.Int32Value
	10, // 17: statistico.TeamStats.substitutions:type_name -> google.protobuf.Int32Value
	10, // 18: statistico.TeamStats.tackles:type_name -> google.protobuf.Int32Value
	9,  // 19: statistico.TeamStats.team_attacks:type_name -> statistico.TeamAttacks
	2,  // 20: statistico.TeamStats.team_cards:type_name -> statistico.TeamCards
	3,  // 21: statistico.TeamStats.team_crosses:type_name -> statistico.TeamCrosses
	4,  // 22: statistico.TeamStats.team_dribbles:type_name -> statistico.TeamDribbles
	5,  // 23: statistico.TeamStats.team_goals:type_name -> statistico.TeamGoals
	6,  // 24: statistico.TeamStats.team_headers:type_name -> statistico.TeamHeaders
	8,  // 25: statistico.TeamStats.team_passes:type_name -> statistico.TeamPasses
	7,  // 26: statistico.TeamStats.team_shots:type_name -> statistico.TeamShots
	10, // 27: statistico.TeamStats.throw_ins:type_name -> google.protobuf.Int32Value
	10, // 28: statistico.TeamStats.treatments:type_name -> google.protobuf.Int32Value
	11, // 29: statistico.TeamStats.created_at:type_name -> statistico.Date
	11, // 30: statistico.TeamStats.updated_at:type_name -> statistico.Date
	10, // 31: statistico.TeamCards.red:type_name -> google.protobuf.Int32Value
	10, // 32: statistico.TeamCards.yellow:type_name -> google.protobuf.Int32Value
	10, // 33: statistico.TeamCards.yellow_red:type_name -> google.protobuf.Int32Value
	10, // 34: statistico.TeamCrosses.total:type_name -> google.protobuf.Int32Value
	10, // 35: statistico.TeamCrosses.accurate:type_name -> google.protobuf.Int32Value
	10, // 36: statistico.TeamDribbles.total:type_name -> google.protobuf.Int32Value
	10, // 37: statistico.TeamDribbles.success:type_name -> google.protobuf.Int32Value
	10, // 38: statistico.TeamGoals.scored:type_name -> google.protobuf.Int32Value
	10, // 39: statistico.TeamGoals.scored_half_time:type_name -> google.protobuf.Int32Value
	10, // 40: statistico.TeamGoals.conceded:type_name -> google.protobuf.Int32Value
	10, // 41: statistico.TeamGoals.conceded_half_time:type_name -> google.protobuf.Int32Value
	10, // 42: statistico.TeamGoals.attempts:type_name -> google.protobuf.Int32Value
	10, // 43: statistico.TeamHeaders.total:type_name -> google.protobuf.Int32Value
	10, // 44: statistico.TeamHeaders.success:type_name -> google.protobuf.Int32Value
	10, // 45: statistico.TeamShots.total:type_name -> google.protobuf.Int32Value
	10, // 46: statistico.TeamShots.on_goal:type_name -> google.protobuf.Int32Value
	10, // 47: statistico.TeamShots.off_goal:type_name -> google.protobuf.Int32Value
	10, // 48: statistico.TeamShots.blocked:type_name -> google.protobuf.Int32Value
	10, // 49: statistico.TeamShots.inside_box:type_name -> google.protobuf.Int32Value
	10, // 50: statistico.TeamShots.outside_box:type_name -> google.protobuf.Int32Value
	10, // 51: statistico.TeamPasses.total:type_name -> google.protobuf.Int32Value
	10, // 52: statistico.TeamPasses.success:type_name -> google.protobuf.Int32Value
	10, // 53: statistico.TeamPasses.percentage:type_name -> google.protobuf.Int32Value
	10, // 54: statistico.TeamPasses.key:type_name -> google.protobuf.Int32Value
	10, // 55: statistico.TeamPasses.long:type_name -> google.protobuf.Int32Value
	10, // 56: statistico.TeamAttacks.counter:type_name -> google.protobuf.Int32Value
	10, // 57: statistico.TeamAttacks.total:type_name -> google.protobuf.Int32Value
	10, // 58: statistico.TeamAttacks.dangerous:type_name -> google.protobuf.Int32Value
	12, // 59: statistico.TeamStatsService.GetTeamStatsForFixture:input_type -> statistico.FixtureRequest
	0,  // 60: statistico.TeamStatsService.GetTeamStatsForFixture:output_type -> statistico.TeamStatsResponse
	60, // [60:61] is the sub-list for method output_type
	59, // [59:60] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_team_stats_proto_init() }
func file_team_stats_proto_init() {
	if File_team_stats_proto != nil {
		return
	}
	file_common_proto_init()
	file_requests_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_team_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamCrosses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamDribbles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGoals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamShots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPasses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_team_stats_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamAttacks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_team_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_team_stats_proto_goTypes,
		DependencyIndexes: file_team_stats_proto_depIdxs,
		MessageInfos:      file_team_stats_proto_msgTypes,
	}.Build()
	File_team_stats_proto = out.File
	file_team_stats_proto_rawDesc = nil
	file_team_stats_proto_goTypes = nil
	file_team_stats_proto_depIdxs = nil
}
