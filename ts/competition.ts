// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "competition.proto" (package "statistico", syntax proto3)
// tslint:disable
import { CompetitionRequest } from "./requests";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message statistico.Competition
 */
export interface Competition {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool is_cup = 3;
     */
    isCup: boolean;
    /**
     * @generated from protobuf field: uint64 country_id = 4;
     */
    countryId: bigint;
    /**
     * @generated from protobuf field: string logo = 5;
     */
    logo: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Competition$Type extends MessageType<Competition> {
    constructor() {
        super("statistico.Competition", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_cup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "country_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Competition>): Competition {
        const message = { id: 0n, name: "", isCup: false, countryId: 0n, logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Competition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Competition): Competition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool is_cup */ 3:
                    message.isCup = reader.bool();
                    break;
                case /* uint64 country_id */ 4:
                    message.countryId = reader.uint64().toBigInt();
                    break;
                case /* string logo */ 5:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Competition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool is_cup = 3; */
        if (message.isCup !== false)
            writer.tag(3, WireType.Varint).bool(message.isCup);
        /* uint64 country_id = 4; */
        if (message.countryId !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.countryId);
        /* string logo = 5; */
        if (message.logo !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message statistico.Competition
 */
export const Competition = new Competition$Type();
/**
 * @generated ServiceType for protobuf service statistico.CompetitionService
 */
export const CompetitionService = new ServiceType("statistico.CompetitionService", [
    { name: "ListCompetitions", serverStreaming: true, options: {}, I: CompetitionRequest, O: Competition }
]);
