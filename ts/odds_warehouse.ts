/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: odds_warehouse.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class ExchangeOddsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_id?: number;
            market?: string;
            exchange?: string;
            runner?: string;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("market" in data && data.market != undefined) {
                    this.market = data.market;
                }
                if ("exchange" in data && data.exchange != undefined) {
                    this.exchange = data.exchange;
                }
                if ("runner" in data && data.runner != undefined) {
                    this.runner = data.runner;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set event_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get market() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set market(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get exchange() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set exchange(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get runner() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set runner(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_id?: number;
            market?: string;
            exchange?: string;
            runner?: string;
            limit?: number;
        }): ExchangeOddsRequest {
            const message = new ExchangeOddsRequest({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.market != null) {
                message.market = data.market;
            }
            if (data.exchange != null) {
                message.exchange = data.exchange;
            }
            if (data.runner != null) {
                message.runner = data.runner;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: number;
                market?: string;
                exchange?: string;
                runner?: string;
                limit?: number;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.market != null) {
                data.market = this.market;
            }
            if (this.exchange != null) {
                data.exchange = this.exchange;
            }
            if (this.runner != null) {
                data.runner = this.runner;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_id != 0)
                writer.writeUint64(1, this.event_id);
            if (this.market.length)
                writer.writeString(2, this.market);
            if (this.exchange.length)
                writer.writeString(3, this.exchange);
            if (this.runner.length)
                writer.writeString(4, this.runner);
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeOddsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeOddsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readUint64();
                        break;
                    case 2:
                        message.market = reader.readString();
                        break;
                    case 3:
                        message.exchange = reader.readString();
                        break;
                    case 4:
                        message.runner = reader.readString();
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeOddsRequest {
            return ExchangeOddsRequest.deserialize(bytes);
        }
    }
    export class ExchangeOdds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            price?: number;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            price?: number;
            timestamp?: number;
        }): ExchangeOdds {
            const message = new ExchangeOdds({});
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                price?: number;
                timestamp?: number;
            } = {};
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.price != 0)
                writer.writeFloat(1, this.price);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeOdds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeOdds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.price = reader.readFloat();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeOdds {
            return ExchangeOdds.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOddsWarehouseServiceService {
        static definition = {
            GetExchangeOdds: {
                path: "/statistico.OddsWarehouseService/GetExchangeOdds",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ExchangeOddsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExchangeOddsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeOdds) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeOdds.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetExchangeOdds(call: grpc_1.ServerWritableStream<ExchangeOddsRequest, ExchangeOdds>): void;
    }
    export class OddsWarehouseServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOddsWarehouseServiceService.definition, "OddsWarehouseService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetExchangeOdds: GrpcStreamServiceInterface<ExchangeOddsRequest, ExchangeOddsRequest> = (message: ExchangeOddsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ExchangeOddsRequest> => {
            return super.GetExchangeOdds(message, metadata, options);
        };
    }
}
