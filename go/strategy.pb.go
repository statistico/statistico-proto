// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strategy.proto

package statistico

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Strategy struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserId               string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market               string                 `protobuf:"bytes,5,opt,name=market,proto3" json:"market,omitempty"`
	Runner               string                 `protobuf:"bytes,6,opt,name=runner,proto3" json:"runner,omitempty"`
	MinOdds              *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=min_odds,json=minOdds,proto3" json:"min_odds,omitempty"`
	MaxOdds              *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=max_odds,json=maxOdds,proto3" json:"max_odds,omitempty"`
	CompetitionIds       []uint64               `protobuf:"varint,9,rep,packed,name=competition_ids,json=competitionIds,proto3" json:"competition_ids,omitempty"`
	Side                 SideEnum               `protobuf:"varint,10,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	Visibility           VisibilityEnum         `protobuf:"varint,11,opt,name=visibility,proto3,enum=statistico.VisibilityEnum" json:"visibility,omitempty"`
	Status               StrategyStatusEnum     `protobuf:"varint,12,opt,name=status,proto3,enum=statistico.StrategyStatusEnum" json:"status,omitempty"`
	ResultFilters        []*ResultFilter        `protobuf:"bytes,13,rep,name=result_filters,json=resultFilters,proto3" json:"result_filters,omitempty"`
	StatFilters          []*StatFilter          `protobuf:"bytes,14,rep,name=stat_filters,json=statFilters,proto3" json:"stat_filters,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Strategy) Reset()         { *m = Strategy{} }
func (m *Strategy) String() string { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()    {}
func (*Strategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{0}
}

func (m *Strategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Strategy.Unmarshal(m, b)
}
func (m *Strategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Strategy.Marshal(b, m, deterministic)
}
func (m *Strategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategy.Merge(m, src)
}
func (m *Strategy) XXX_Size() int {
	return xxx_messageInfo_Strategy.Size(m)
}
func (m *Strategy) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategy.DiscardUnknown(m)
}

var xxx_messageInfo_Strategy proto.InternalMessageInfo

func (m *Strategy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Strategy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Strategy) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Strategy) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *Strategy) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *Strategy) GetMinOdds() *wrapperspb.FloatValue {
	if m != nil {
		return m.MinOdds
	}
	return nil
}

func (m *Strategy) GetMaxOdds() *wrapperspb.FloatValue {
	if m != nil {
		return m.MaxOdds
	}
	return nil
}

func (m *Strategy) GetCompetitionIds() []uint64 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *Strategy) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *Strategy) GetVisibility() VisibilityEnum {
	if m != nil {
		return m.Visibility
	}
	return VisibilityEnum_PUBLIC
}

func (m *Strategy) GetStatus() StrategyStatusEnum {
	if m != nil {
		return m.Status
	}
	return StrategyStatusEnum_ARCHIVED
}

func (m *Strategy) GetResultFilters() []*ResultFilter {
	if m != nil {
		return m.ResultFilters
	}
	return nil
}

func (m *Strategy) GetStatFilters() []*StatFilter {
	if m != nil {
		return m.StatFilters
	}
	return nil
}

func (m *Strategy) GetCreatedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Strategy) GetUpdatedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type StrategyTrade struct {
	MarketName           string                 `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	RunnerName           string                 `protobuf:"bytes,2,opt,name=runner_name,json=runnerName,proto3" json:"runner_name,omitempty"`
	RunnerPrice          float32                `protobuf:"fixed32,3,opt,name=runner_price,json=runnerPrice,proto3" json:"runner_price,omitempty"`
	Side                 SideEnum               `protobuf:"varint,4,opt,name=side,proto3,enum=statistico.SideEnum" json:"side,omitempty"`
	EventId              uint64                 `protobuf:"varint,5,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CompetitionId        uint64                 `protobuf:"varint,6,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	SeasonId             uint64                 `protobuf:"varint,7,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	EventDate            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=event_date,json=eventDate,proto3" json:"event_date,omitempty"`
	Result               TradeResultEnum        `protobuf:"varint,9,opt,name=result,proto3,enum=statistico.TradeResultEnum" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StrategyTrade) Reset()         { *m = StrategyTrade{} }
func (m *StrategyTrade) String() string { return proto.CompactTextString(m) }
func (*StrategyTrade) ProtoMessage()    {}
func (*StrategyTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ec5ce6dd46feab, []int{1}
}

func (m *StrategyTrade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrategyTrade.Unmarshal(m, b)
}
func (m *StrategyTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrategyTrade.Marshal(b, m, deterministic)
}
func (m *StrategyTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyTrade.Merge(m, src)
}
func (m *StrategyTrade) XXX_Size() int {
	return xxx_messageInfo_StrategyTrade.Size(m)
}
func (m *StrategyTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyTrade.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyTrade proto.InternalMessageInfo

func (m *StrategyTrade) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *StrategyTrade) GetRunnerName() string {
	if m != nil {
		return m.RunnerName
	}
	return ""
}

func (m *StrategyTrade) GetRunnerPrice() float32 {
	if m != nil {
		return m.RunnerPrice
	}
	return 0
}

func (m *StrategyTrade) GetSide() SideEnum {
	if m != nil {
		return m.Side
	}
	return SideEnum_BACK
}

func (m *StrategyTrade) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *StrategyTrade) GetCompetitionId() uint64 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *StrategyTrade) GetSeasonId() uint64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *StrategyTrade) GetEventDate() *timestamppb.Timestamp {
	if m != nil {
		return m.EventDate
	}
	return nil
}

func (m *StrategyTrade) GetResult() TradeResultEnum {
	if m != nil {
		return m.Result
	}
	return TradeResultEnum_FAIL
}

func init() {
	proto.RegisterType((*Strategy)(nil), "statistico.Strategy")
	proto.RegisterType((*StrategyTrade)(nil), "statistico.StrategyTrade")
}

func init() { proto.RegisterFile("strategy.proto", fileDescriptor_46ec5ce6dd46feab) }

var fileDescriptor_46ec5ce6dd46feab = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x4e, 0x1b, 0x39,
	0x14, 0xc6, 0x49, 0x08, 0xf9, 0x73, 0x92, 0x0c, 0x2b, 0x0b, 0xb1, 0x26, 0x48, 0x10, 0x22, 0xb1,
	0x9b, 0x9b, 0x0d, 0x6c, 0x90, 0x90, 0x76, 0xf7, 0x62, 0x05, 0x6d, 0x91, 0x22, 0x55, 0x6d, 0x35,
	0x01, 0x2e, 0x7a, 0x13, 0x39, 0xf1, 0x21, 0x58, 0xcd, 0xfc, 0xa9, 0xed, 0x49, 0xe1, 0x19, 0xfa,
	0x56, 0x7d, 0x9f, 0xbe, 0x43, 0x35, 0xc7, 0x93, 0x30, 0x29, 0xb4, 0xf4, 0xce, 0xe7, 0xf3, 0xef,
	0x3b, 0x33, 0x3e, 0xfe, 0x66, 0xc0, 0x33, 0x56, 0x0b, 0x8b, 0xd3, 0xfb, 0x5e, 0xac, 0x23, 0x1b,
	0x31, 0x30, 0x56, 0x58, 0x65, 0xac, 0x9a, 0x44, 0x2d, 0xc0, 0x30, 0x09, 0x9c, 0xde, 0x6a, 0xdc,
	0xa8, 0x99, 0x45, 0x9d, 0x55, 0x9e, 0xc6, 0x8f, 0x09, 0x1a, 0x6b, 0xb2, 0x7a, 0x7f, 0x1a, 0x45,
	0xd3, 0x19, 0x1e, 0x51, 0x35, 0x4e, 0x6e, 0x8e, 0xac, 0x0a, 0xd0, 0x58, 0x11, 0xc4, 0x19, 0xb0,
	0xf7, 0x3d, 0xf0, 0x49, 0x8b, 0x38, 0x46, 0x9d, 0x35, 0xe8, 0x7c, 0xd9, 0x80, 0xea, 0x30, 0x7b,
	0x13, 0xe6, 0x41, 0x51, 0x49, 0x5e, 0x68, 0x17, 0xba, 0x35, 0xbf, 0xa8, 0x24, 0x63, 0x50, 0x0a,
	0x45, 0x80, 0xbc, 0x48, 0x0a, 0xad, 0x59, 0x1b, 0xea, 0x12, 0xcd, 0x44, 0xab, 0xd8, 0xaa, 0x28,
	0xe4, 0xeb, 0xb4, 0x95, 0x97, 0xd8, 0xef, 0x50, 0x49, 0x0c, 0xea, 0x91, 0x92, 0xbc, 0x44, 0xbb,
	0xe5, 0xb4, 0x1c, 0x48, 0xb6, 0x0d, 0xe5, 0x40, 0xe8, 0x0f, 0x68, 0xf9, 0x86, 0xd3, 0x5d, 0x95,
	0xea, 0x3a, 0x09, 0x43, 0xd4, 0xbc, 0xec, 0x74, 0x57, 0xb1, 0x53, 0xa8, 0x06, 0x2a, 0x1c, 0x45,
	0x52, 0x1a, 0x5e, 0x69, 0x17, 0xba, 0xf5, 0xfe, 0x6e, 0xcf, 0x1d, 0xa7, 0xb7, 0x38, 0x4e, 0xef,
	0x62, 0x16, 0x09, 0x7b, 0x2d, 0x66, 0x09, 0xfa, 0x95, 0x40, 0x85, 0x6f, 0xa5, 0x34, 0xe4, 0x13,
	0x77, 0xce, 0x57, 0xfd, 0x15, 0x9f, 0xb8, 0x23, 0xdf, 0x9f, 0xb0, 0x39, 0x89, 0x82, 0x18, 0xad,
	0x4a, 0xcf, 0x31, 0x52, 0xd2, 0xf0, 0x5a, 0x7b, 0xbd, 0x5b, 0xf2, 0xbd, 0x9c, 0x3c, 0x90, 0x86,
	0x75, 0xa1, 0x64, 0x94, 0x44, 0x0e, 0xed, 0x42, 0xd7, 0xeb, 0x6f, 0xf5, 0x1e, 0xae, 0xae, 0x37,
	0x54, 0x12, 0x5f, 0x85, 0x49, 0xe0, 0x13, 0xc1, 0xfe, 0x05, 0x98, 0x2b, 0xa3, 0xc6, 0x6a, 0xa6,
	0xec, 0x3d, 0xaf, 0x13, 0xdf, 0xca, 0xf3, 0xd7, 0xcb, 0x5d, 0x72, 0xe5, 0x68, 0x76, 0x0a, 0xe5,
	0x14, 0x4c, 0x0c, 0x6f, 0x90, 0x6f, 0x6f, 0xe5, 0x39, 0xd9, 0x9d, 0x0d, 0x89, 0x20, 0x6f, 0x46,
	0xb3, 0xff, 0xc1, 0xd3, 0x68, 0x92, 0x99, 0x1d, 0xb9, 0xe8, 0x18, 0xde, 0x6c, 0xaf, 0x77, 0xeb,
	0x7d, 0x9e, 0xf7, 0xfb, 0x44, 0x5c, 0x10, 0xe0, 0x37, 0x75, 0xae, 0x32, 0xec, 0x1f, 0x68, 0xa4,
	0xe4, 0xd2, 0xee, 0x91, 0x7d, 0x7b, 0xf5, 0xf1, 0x62, 0x61, 0xae, 0x9b, 0xe5, 0x3a, 0xb5, 0xc2,
	0x44, 0xa3, 0xb0, 0x28, 0x47, 0xc2, 0xf2, 0x4d, 0x1a, 0x7e, 0xeb, 0xd1, 0xf0, 0x2f, 0x17, 0x21,
	0xf5, 0x6b, 0x19, 0x7d, 0x66, 0x53, 0x6b, 0x12, 0xcb, 0x85, 0xf5, 0xb7, 0xe7, 0xad, 0x19, 0x7d,
	0x66, 0x3b, 0x5f, 0x8b, 0xd0, 0x5c, 0x0c, 0xe4, 0x52, 0x0b, 0x89, 0x6c, 0x1f, 0xea, 0x2e, 0x5c,
	0x23, 0x0a, 0xb0, 0x8b, 0x34, 0x38, 0xe9, 0x4d, 0x1a, 0xe3, 0x7d, 0xa8, 0xbb, 0x94, 0x8d, 0x72,
	0x09, 0x07, 0x27, 0x11, 0x70, 0x00, 0x8d, 0x0c, 0x88, 0xb5, 0x9a, 0x20, 0x05, 0xbd, 0xe8, 0x67,
	0xa6, 0x77, 0xa9, 0xb4, 0x8c, 0x41, 0xe9, 0xd9, 0x18, 0xec, 0x40, 0x15, 0xe7, 0x18, 0xda, 0xf4,
	0x9b, 0x48, 0xb3, 0x5f, 0xf2, 0x2b, 0x54, 0x0f, 0x24, 0x3b, 0x04, 0x6f, 0x35, 0x74, 0xf4, 0x11,
	0x94, 0xfc, 0xe6, 0x4a, 0xe6, 0xd8, 0x2e, 0xd4, 0x0c, 0x0a, 0xe3, 0x88, 0x0a, 0x11, 0x55, 0x27,
	0x0c, 0x64, 0x3a, 0x3a, 0xd7, 0x3e, 0x1d, 0x48, 0x16, 0xf9, 0x9f, 0x8e, 0x8e, 0xe8, 0x97, 0xc2,
	0x22, 0x3b, 0x81, 0xb2, 0xbb, 0x7c, 0x5e, 0xa3, 0x53, 0xec, 0xe6, 0x4f, 0x41, 0xb3, 0x74, 0x49,
	0x71, 0x09, 0x73, 0x68, 0xff, 0x73, 0x11, 0x36, 0x97, 0x01, 0x44, 0x3d, 0x4f, 0x87, 0x71, 0x0d,
	0xcd, 0xf3, 0x44, 0xcd, 0xe4, 0xf2, 0x67, 0xf2, 0xc7, 0x53, 0x71, 0xa5, 0x8e, 0x43, 0x14, 0x7a,
	0x72, 0xeb, 0xbb, 0x3f, 0x59, 0x6b, 0xe7, 0x87, 0x5c, 0x67, 0xed, 0xb8, 0xc0, 0x06, 0xd0, 0x18,
	0x8a, 0x39, 0x2e, 0xdb, 0x1e, 0xe4, 0xf1, 0x17, 0x94, 0x9e, 0xc5, 0xde, 0xa2, 0xe3, 0xd6, 0x53,
	0x1d, 0x3b, 0x6b, 0xec, 0x0a, 0xd8, 0x6b, 0x65, 0xec, 0x95, 0x41, 0x9d, 0xa9, 0x0a, 0x0d, 0x3b,
	0xcc, 0xd3, 0x8f, 0xf7, 0x9f, 0x69, 0x7a, 0x5c, 0x38, 0x3f, 0x79, 0xff, 0xf7, 0x54, 0xd9, 0xdb,
	0x64, 0xdc, 0x9b, 0x44, 0xc1, 0xd1, 0x03, 0x95, 0x5b, 0xfe, 0x45, 0x97, 0xf0, 0xdf, 0x83, 0x30,
	0x2e, 0x93, 0x72, 0xf2, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x41, 0x2f, 0xe3, 0xf6, 0x07, 0x06, 0x00,
	0x00,
}
