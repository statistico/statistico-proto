/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: team_stats.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./requests";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class TeamStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home_team?: TeamStats;
            away_team?: TeamStats;
            team_xg?: TeamXG;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home_team" in data && data.home_team != undefined) {
                    this.home_team = data.home_team;
                }
                if ("away_team" in data && data.away_team != undefined) {
                    this.away_team = data.away_team;
                }
                if ("team_xg" in data && data.team_xg != undefined) {
                    this.team_xg = data.team_xg;
                }
            }
        }
        get home_team() {
            return pb_1.Message.getWrapperField(this, TeamStats, 1) as TeamStats;
        }
        set home_team(value: TeamStats) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_home_team() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get away_team() {
            return pb_1.Message.getWrapperField(this, TeamStats, 2) as TeamStats;
        }
        set away_team(value: TeamStats) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_away_team() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get team_xg() {
            return pb_1.Message.getWrapperField(this, TeamXG, 3) as TeamXG;
        }
        set team_xg(value: TeamXG) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_team_xg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            home_team?: ReturnType<typeof TeamStats.prototype.toObject>;
            away_team?: ReturnType<typeof TeamStats.prototype.toObject>;
            team_xg?: ReturnType<typeof TeamXG.prototype.toObject>;
        }): TeamStatsResponse {
            const message = new TeamStatsResponse({});
            if (data.home_team != null) {
                message.home_team = TeamStats.fromObject(data.home_team);
            }
            if (data.away_team != null) {
                message.away_team = TeamStats.fromObject(data.away_team);
            }
            if (data.team_xg != null) {
                message.team_xg = TeamXG.fromObject(data.team_xg);
            }
            return message;
        }
        toObject() {
            const data: {
                home_team?: ReturnType<typeof TeamStats.prototype.toObject>;
                away_team?: ReturnType<typeof TeamStats.prototype.toObject>;
                team_xg?: ReturnType<typeof TeamXG.prototype.toObject>;
            } = {};
            if (this.home_team != null) {
                data.home_team = this.home_team.toObject();
            }
            if (this.away_team != null) {
                data.away_team = this.away_team.toObject();
            }
            if (this.team_xg != null) {
                data.team_xg = this.team_xg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_home_team)
                writer.writeMessage(1, this.home_team, () => this.home_team.serialize(writer));
            if (this.has_away_team)
                writer.writeMessage(2, this.away_team, () => this.away_team.serialize(writer));
            if (this.has_team_xg)
                writer.writeMessage(3, this.team_xg, () => this.team_xg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.home_team, () => message.home_team = TeamStats.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.away_team, () => message.away_team = TeamStats.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.team_xg, () => message.team_xg = TeamXG.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStatsResponse {
            return TeamStatsResponse.deserialize(bytes);
        }
    }
    export class TeamStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fixture_id?: number;
            stat?: string;
            value?: dependency_1.google.protobuf.UInt32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fixture_id" in data && data.fixture_id != undefined) {
                    this.fixture_id = data.fixture_id;
                }
                if ("stat" in data && data.stat != undefined) {
                    this.stat = data.stat;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get fixture_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fixture_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get stat() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set stat(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 3) as dependency_1.google.protobuf.UInt32Value;
        }
        set value(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            fixture_id?: number;
            stat?: string;
            value?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
        }): TeamStat {
            const message = new TeamStat({});
            if (data.fixture_id != null) {
                message.fixture_id = data.fixture_id;
            }
            if (data.stat != null) {
                message.stat = data.stat;
            }
            if (data.value != null) {
                message.value = dependency_1.google.protobuf.UInt32Value.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                fixture_id?: number;
                stat?: string;
                value?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            } = {};
            if (this.fixture_id != null) {
                data.fixture_id = this.fixture_id;
            }
            if (this.stat != null) {
                data.stat = this.stat;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fixture_id != 0)
                writer.writeUint64(1, this.fixture_id);
            if (this.stat.length)
                writer.writeString(2, this.stat);
            if (this.has_value)
                writer.writeMessage(3, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fixture_id = reader.readUint64();
                        break;
                    case 2:
                        message.stat = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStat {
            return TeamStat.deserialize(bytes);
        }
    }
    export class TeamStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            shots_total?: dependency_1.google.protobuf.UInt32Value;
            shots_on_goal?: dependency_1.google.protobuf.UInt32Value;
            shots_off_goal?: dependency_1.google.protobuf.UInt32Value;
            shots_blocked?: dependency_1.google.protobuf.UInt32Value;
            shots_inside_box?: dependency_1.google.protobuf.UInt32Value;
            shots_outside_box?: dependency_1.google.protobuf.UInt32Value;
            passes_total?: dependency_1.google.protobuf.UInt32Value;
            passes_accuracy?: dependency_1.google.protobuf.UInt32Value;
            passes_percentage?: dependency_1.google.protobuf.UInt32Value;
            attacks_total?: dependency_1.google.protobuf.UInt32Value;
            attacks_dangerous?: dependency_1.google.protobuf.UInt32Value;
            goals?: dependency_1.google.protobuf.UInt32Value;
            fouls?: dependency_1.google.protobuf.UInt32Value;
            corners?: dependency_1.google.protobuf.UInt32Value;
            offsides?: dependency_1.google.protobuf.UInt32Value;
            possession?: dependency_1.google.protobuf.UInt32Value;
            yellow_cards?: dependency_1.google.protobuf.UInt32Value;
            red_cards?: dependency_1.google.protobuf.UInt32Value;
            saves?: dependency_1.google.protobuf.UInt32Value;
            substitutions?: dependency_1.google.protobuf.UInt32Value;
            goal_kicks?: dependency_1.google.protobuf.UInt32Value;
            goal_attempts?: dependency_1.google.protobuf.UInt32Value;
            free_kicks?: dependency_1.google.protobuf.UInt32Value;
            throw_ins?: dependency_1.google.protobuf.UInt32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("shots_total" in data && data.shots_total != undefined) {
                    this.shots_total = data.shots_total;
                }
                if ("shots_on_goal" in data && data.shots_on_goal != undefined) {
                    this.shots_on_goal = data.shots_on_goal;
                }
                if ("shots_off_goal" in data && data.shots_off_goal != undefined) {
                    this.shots_off_goal = data.shots_off_goal;
                }
                if ("shots_blocked" in data && data.shots_blocked != undefined) {
                    this.shots_blocked = data.shots_blocked;
                }
                if ("shots_inside_box" in data && data.shots_inside_box != undefined) {
                    this.shots_inside_box = data.shots_inside_box;
                }
                if ("shots_outside_box" in data && data.shots_outside_box != undefined) {
                    this.shots_outside_box = data.shots_outside_box;
                }
                if ("passes_total" in data && data.passes_total != undefined) {
                    this.passes_total = data.passes_total;
                }
                if ("passes_accuracy" in data && data.passes_accuracy != undefined) {
                    this.passes_accuracy = data.passes_accuracy;
                }
                if ("passes_percentage" in data && data.passes_percentage != undefined) {
                    this.passes_percentage = data.passes_percentage;
                }
                if ("attacks_total" in data && data.attacks_total != undefined) {
                    this.attacks_total = data.attacks_total;
                }
                if ("attacks_dangerous" in data && data.attacks_dangerous != undefined) {
                    this.attacks_dangerous = data.attacks_dangerous;
                }
                if ("goals" in data && data.goals != undefined) {
                    this.goals = data.goals;
                }
                if ("fouls" in data && data.fouls != undefined) {
                    this.fouls = data.fouls;
                }
                if ("corners" in data && data.corners != undefined) {
                    this.corners = data.corners;
                }
                if ("offsides" in data && data.offsides != undefined) {
                    this.offsides = data.offsides;
                }
                if ("possession" in data && data.possession != undefined) {
                    this.possession = data.possession;
                }
                if ("yellow_cards" in data && data.yellow_cards != undefined) {
                    this.yellow_cards = data.yellow_cards;
                }
                if ("red_cards" in data && data.red_cards != undefined) {
                    this.red_cards = data.red_cards;
                }
                if ("saves" in data && data.saves != undefined) {
                    this.saves = data.saves;
                }
                if ("substitutions" in data && data.substitutions != undefined) {
                    this.substitutions = data.substitutions;
                }
                if ("goal_kicks" in data && data.goal_kicks != undefined) {
                    this.goal_kicks = data.goal_kicks;
                }
                if ("goal_attempts" in data && data.goal_attempts != undefined) {
                    this.goal_attempts = data.goal_attempts;
                }
                if ("free_kicks" in data && data.free_kicks != undefined) {
                    this.free_kicks = data.free_kicks;
                }
                if ("throw_ins" in data && data.throw_ins != undefined) {
                    this.throw_ins = data.throw_ins;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get shots_total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 2) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_total(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_shots_total() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get shots_on_goal() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 3) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_on_goal(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_shots_on_goal() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get shots_off_goal() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 4) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_off_goal(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_shots_off_goal() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get shots_blocked() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 5) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_blocked(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_shots_blocked() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get shots_inside_box() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 6) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_inside_box(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_shots_inside_box() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get shots_outside_box() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 7) as dependency_1.google.protobuf.UInt32Value;
        }
        set shots_outside_box(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_shots_outside_box() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get passes_total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 8) as dependency_1.google.protobuf.UInt32Value;
        }
        set passes_total(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_passes_total() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get passes_accuracy() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 9) as dependency_1.google.protobuf.UInt32Value;
        }
        set passes_accuracy(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_passes_accuracy() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get passes_percentage() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 10) as dependency_1.google.protobuf.UInt32Value;
        }
        set passes_percentage(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_passes_percentage() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get attacks_total() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 11) as dependency_1.google.protobuf.UInt32Value;
        }
        set attacks_total(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_attacks_total() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get attacks_dangerous() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 12) as dependency_1.google.protobuf.UInt32Value;
        }
        set attacks_dangerous(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_attacks_dangerous() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get goals() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 13) as dependency_1.google.protobuf.UInt32Value;
        }
        set goals(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_goals() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get fouls() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 14) as dependency_1.google.protobuf.UInt32Value;
        }
        set fouls(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_fouls() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get corners() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 15) as dependency_1.google.protobuf.UInt32Value;
        }
        set corners(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_corners() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get offsides() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 16) as dependency_1.google.protobuf.UInt32Value;
        }
        set offsides(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_offsides() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get possession() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 17) as dependency_1.google.protobuf.UInt32Value;
        }
        set possession(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_possession() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get yellow_cards() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 18) as dependency_1.google.protobuf.UInt32Value;
        }
        set yellow_cards(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_yellow_cards() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get red_cards() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 19) as dependency_1.google.protobuf.UInt32Value;
        }
        set red_cards(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_red_cards() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get saves() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 20) as dependency_1.google.protobuf.UInt32Value;
        }
        set saves(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get has_saves() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get substitutions() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 21) as dependency_1.google.protobuf.UInt32Value;
        }
        set substitutions(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get has_substitutions() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get goal_kicks() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 22) as dependency_1.google.protobuf.UInt32Value;
        }
        set goal_kicks(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get has_goal_kicks() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get goal_attempts() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 23) as dependency_1.google.protobuf.UInt32Value;
        }
        set goal_attempts(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_goal_attempts() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get free_kicks() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 24) as dependency_1.google.protobuf.UInt32Value;
        }
        set free_kicks(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get has_free_kicks() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get throw_ins() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 25) as dependency_1.google.protobuf.UInt32Value;
        }
        set throw_ins(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get has_throw_ins() {
            return pb_1.Message.getField(this, 25) != null;
        }
        static fromObject(data: {
            team_id?: number;
            shots_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            shots_on_goal?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            shots_off_goal?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            shots_blocked?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            shots_inside_box?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            shots_outside_box?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            passes_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            passes_accuracy?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            passes_percentage?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            attacks_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            attacks_dangerous?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            goals?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            fouls?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            corners?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            offsides?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            possession?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            yellow_cards?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            red_cards?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            saves?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            substitutions?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            goal_kicks?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            goal_attempts?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            free_kicks?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            throw_ins?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
        }): TeamStats {
            const message = new TeamStats({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.shots_total != null) {
                message.shots_total = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_total);
            }
            if (data.shots_on_goal != null) {
                message.shots_on_goal = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_on_goal);
            }
            if (data.shots_off_goal != null) {
                message.shots_off_goal = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_off_goal);
            }
            if (data.shots_blocked != null) {
                message.shots_blocked = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_blocked);
            }
            if (data.shots_inside_box != null) {
                message.shots_inside_box = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_inside_box);
            }
            if (data.shots_outside_box != null) {
                message.shots_outside_box = dependency_1.google.protobuf.UInt32Value.fromObject(data.shots_outside_box);
            }
            if (data.passes_total != null) {
                message.passes_total = dependency_1.google.protobuf.UInt32Value.fromObject(data.passes_total);
            }
            if (data.passes_accuracy != null) {
                message.passes_accuracy = dependency_1.google.protobuf.UInt32Value.fromObject(data.passes_accuracy);
            }
            if (data.passes_percentage != null) {
                message.passes_percentage = dependency_1.google.protobuf.UInt32Value.fromObject(data.passes_percentage);
            }
            if (data.attacks_total != null) {
                message.attacks_total = dependency_1.google.protobuf.UInt32Value.fromObject(data.attacks_total);
            }
            if (data.attacks_dangerous != null) {
                message.attacks_dangerous = dependency_1.google.protobuf.UInt32Value.fromObject(data.attacks_dangerous);
            }
            if (data.goals != null) {
                message.goals = dependency_1.google.protobuf.UInt32Value.fromObject(data.goals);
            }
            if (data.fouls != null) {
                message.fouls = dependency_1.google.protobuf.UInt32Value.fromObject(data.fouls);
            }
            if (data.corners != null) {
                message.corners = dependency_1.google.protobuf.UInt32Value.fromObject(data.corners);
            }
            if (data.offsides != null) {
                message.offsides = dependency_1.google.protobuf.UInt32Value.fromObject(data.offsides);
            }
            if (data.possession != null) {
                message.possession = dependency_1.google.protobuf.UInt32Value.fromObject(data.possession);
            }
            if (data.yellow_cards != null) {
                message.yellow_cards = dependency_1.google.protobuf.UInt32Value.fromObject(data.yellow_cards);
            }
            if (data.red_cards != null) {
                message.red_cards = dependency_1.google.protobuf.UInt32Value.fromObject(data.red_cards);
            }
            if (data.saves != null) {
                message.saves = dependency_1.google.protobuf.UInt32Value.fromObject(data.saves);
            }
            if (data.substitutions != null) {
                message.substitutions = dependency_1.google.protobuf.UInt32Value.fromObject(data.substitutions);
            }
            if (data.goal_kicks != null) {
                message.goal_kicks = dependency_1.google.protobuf.UInt32Value.fromObject(data.goal_kicks);
            }
            if (data.goal_attempts != null) {
                message.goal_attempts = dependency_1.google.protobuf.UInt32Value.fromObject(data.goal_attempts);
            }
            if (data.free_kicks != null) {
                message.free_kicks = dependency_1.google.protobuf.UInt32Value.fromObject(data.free_kicks);
            }
            if (data.throw_ins != null) {
                message.throw_ins = dependency_1.google.protobuf.UInt32Value.fromObject(data.throw_ins);
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                shots_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                shots_on_goal?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                shots_off_goal?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                shots_blocked?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                shots_inside_box?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                shots_outside_box?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                passes_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                passes_accuracy?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                passes_percentage?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                attacks_total?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                attacks_dangerous?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                goals?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                fouls?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                corners?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                offsides?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                possession?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                yellow_cards?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                red_cards?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                saves?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                substitutions?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                goal_kicks?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                goal_attempts?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                free_kicks?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                throw_ins?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.shots_total != null) {
                data.shots_total = this.shots_total.toObject();
            }
            if (this.shots_on_goal != null) {
                data.shots_on_goal = this.shots_on_goal.toObject();
            }
            if (this.shots_off_goal != null) {
                data.shots_off_goal = this.shots_off_goal.toObject();
            }
            if (this.shots_blocked != null) {
                data.shots_blocked = this.shots_blocked.toObject();
            }
            if (this.shots_inside_box != null) {
                data.shots_inside_box = this.shots_inside_box.toObject();
            }
            if (this.shots_outside_box != null) {
                data.shots_outside_box = this.shots_outside_box.toObject();
            }
            if (this.passes_total != null) {
                data.passes_total = this.passes_total.toObject();
            }
            if (this.passes_accuracy != null) {
                data.passes_accuracy = this.passes_accuracy.toObject();
            }
            if (this.passes_percentage != null) {
                data.passes_percentage = this.passes_percentage.toObject();
            }
            if (this.attacks_total != null) {
                data.attacks_total = this.attacks_total.toObject();
            }
            if (this.attacks_dangerous != null) {
                data.attacks_dangerous = this.attacks_dangerous.toObject();
            }
            if (this.goals != null) {
                data.goals = this.goals.toObject();
            }
            if (this.fouls != null) {
                data.fouls = this.fouls.toObject();
            }
            if (this.corners != null) {
                data.corners = this.corners.toObject();
            }
            if (this.offsides != null) {
                data.offsides = this.offsides.toObject();
            }
            if (this.possession != null) {
                data.possession = this.possession.toObject();
            }
            if (this.yellow_cards != null) {
                data.yellow_cards = this.yellow_cards.toObject();
            }
            if (this.red_cards != null) {
                data.red_cards = this.red_cards.toObject();
            }
            if (this.saves != null) {
                data.saves = this.saves.toObject();
            }
            if (this.substitutions != null) {
                data.substitutions = this.substitutions.toObject();
            }
            if (this.goal_kicks != null) {
                data.goal_kicks = this.goal_kicks.toObject();
            }
            if (this.goal_attempts != null) {
                data.goal_attempts = this.goal_attempts.toObject();
            }
            if (this.free_kicks != null) {
                data.free_kicks = this.free_kicks.toObject();
            }
            if (this.throw_ins != null) {
                data.throw_ins = this.throw_ins.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeUint64(1, this.team_id);
            if (this.has_shots_total)
                writer.writeMessage(2, this.shots_total, () => this.shots_total.serialize(writer));
            if (this.has_shots_on_goal)
                writer.writeMessage(3, this.shots_on_goal, () => this.shots_on_goal.serialize(writer));
            if (this.has_shots_off_goal)
                writer.writeMessage(4, this.shots_off_goal, () => this.shots_off_goal.serialize(writer));
            if (this.has_shots_blocked)
                writer.writeMessage(5, this.shots_blocked, () => this.shots_blocked.serialize(writer));
            if (this.has_shots_inside_box)
                writer.writeMessage(6, this.shots_inside_box, () => this.shots_inside_box.serialize(writer));
            if (this.has_shots_outside_box)
                writer.writeMessage(7, this.shots_outside_box, () => this.shots_outside_box.serialize(writer));
            if (this.has_passes_total)
                writer.writeMessage(8, this.passes_total, () => this.passes_total.serialize(writer));
            if (this.has_passes_accuracy)
                writer.writeMessage(9, this.passes_accuracy, () => this.passes_accuracy.serialize(writer));
            if (this.has_passes_percentage)
                writer.writeMessage(10, this.passes_percentage, () => this.passes_percentage.serialize(writer));
            if (this.has_attacks_total)
                writer.writeMessage(11, this.attacks_total, () => this.attacks_total.serialize(writer));
            if (this.has_attacks_dangerous)
                writer.writeMessage(12, this.attacks_dangerous, () => this.attacks_dangerous.serialize(writer));
            if (this.has_goals)
                writer.writeMessage(13, this.goals, () => this.goals.serialize(writer));
            if (this.has_fouls)
                writer.writeMessage(14, this.fouls, () => this.fouls.serialize(writer));
            if (this.has_corners)
                writer.writeMessage(15, this.corners, () => this.corners.serialize(writer));
            if (this.has_offsides)
                writer.writeMessage(16, this.offsides, () => this.offsides.serialize(writer));
            if (this.has_possession)
                writer.writeMessage(17, this.possession, () => this.possession.serialize(writer));
            if (this.has_yellow_cards)
                writer.writeMessage(18, this.yellow_cards, () => this.yellow_cards.serialize(writer));
            if (this.has_red_cards)
                writer.writeMessage(19, this.red_cards, () => this.red_cards.serialize(writer));
            if (this.has_saves)
                writer.writeMessage(20, this.saves, () => this.saves.serialize(writer));
            if (this.has_substitutions)
                writer.writeMessage(21, this.substitutions, () => this.substitutions.serialize(writer));
            if (this.has_goal_kicks)
                writer.writeMessage(22, this.goal_kicks, () => this.goal_kicks.serialize(writer));
            if (this.has_goal_attempts)
                writer.writeMessage(23, this.goal_attempts, () => this.goal_attempts.serialize(writer));
            if (this.has_free_kicks)
                writer.writeMessage(24, this.free_kicks, () => this.free_kicks.serialize(writer));
            if (this.has_throw_ins)
                writer.writeMessage(25, this.throw_ins, () => this.throw_ins.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.shots_total, () => message.shots_total = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.shots_on_goal, () => message.shots_on_goal = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.shots_off_goal, () => message.shots_off_goal = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.shots_blocked, () => message.shots_blocked = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.shots_inside_box, () => message.shots_inside_box = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.shots_outside_box, () => message.shots_outside_box = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.passes_total, () => message.passes_total = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.passes_accuracy, () => message.passes_accuracy = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.passes_percentage, () => message.passes_percentage = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.attacks_total, () => message.attacks_total = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.attacks_dangerous, () => message.attacks_dangerous = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.goals, () => message.goals = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.fouls, () => message.fouls = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.corners, () => message.corners = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.offsides, () => message.offsides = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.possession, () => message.possession = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.yellow_cards, () => message.yellow_cards = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.red_cards, () => message.red_cards = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.saves, () => message.saves = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.substitutions, () => message.substitutions = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.goal_kicks, () => message.goal_kicks = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.goal_attempts, () => message.goal_attempts = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.free_kicks, () => message.free_kicks = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.throw_ins, () => message.throw_ins = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStats {
            return TeamStats.deserialize(bytes);
        }
    }
    export class TeamXG extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home?: dependency_1.google.protobuf.FloatValue;
            away?: dependency_1.google.protobuf.FloatValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home" in data && data.home != undefined) {
                    this.home = data.home;
                }
                if ("away" in data && data.away != undefined) {
                    this.away = data.away;
                }
            }
        }
        get home() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.FloatValue, 1) as dependency_1.google.protobuf.FloatValue;
        }
        set home(value: dependency_1.google.protobuf.FloatValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_home() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get away() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.FloatValue, 2) as dependency_1.google.protobuf.FloatValue;
        }
        set away(value: dependency_1.google.protobuf.FloatValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_away() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            home?: ReturnType<typeof dependency_1.google.protobuf.FloatValue.prototype.toObject>;
            away?: ReturnType<typeof dependency_1.google.protobuf.FloatValue.prototype.toObject>;
        }): TeamXG {
            const message = new TeamXG({});
            if (data.home != null) {
                message.home = dependency_1.google.protobuf.FloatValue.fromObject(data.home);
            }
            if (data.away != null) {
                message.away = dependency_1.google.protobuf.FloatValue.fromObject(data.away);
            }
            return message;
        }
        toObject() {
            const data: {
                home?: ReturnType<typeof dependency_1.google.protobuf.FloatValue.prototype.toObject>;
                away?: ReturnType<typeof dependency_1.google.protobuf.FloatValue.prototype.toObject>;
            } = {};
            if (this.home != null) {
                data.home = this.home.toObject();
            }
            if (this.away != null) {
                data.away = this.away.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_home)
                writer.writeMessage(1, this.home, () => this.home.serialize(writer));
            if (this.has_away)
                writer.writeMessage(2, this.away, () => this.away.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamXG {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamXG();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.home, () => message.home = dependency_1.google.protobuf.FloatValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.away, () => message.away = dependency_1.google.protobuf.FloatValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamXG {
            return TeamXG.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTeamStatsServiceService {
        static definition = {
            GetTeamStatsForFixture: {
                path: "/statistico.TeamStatsService/GetTeamStatsForFixture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.statistico.FixtureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.FixtureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TeamStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TeamStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetStatForTeam: {
                path: "/statistico.TeamStatsService/GetStatForTeam",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_2.statistico.TeamStatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.TeamStatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TeamStat) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TeamStat.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTeamStatsForFixture(call: grpc_1.ServerUnaryCall<dependency_2.statistico.FixtureRequest, TeamStatsResponse>, callback: grpc_1.sendUnaryData<TeamStatsResponse>): void;
        abstract GetStatForTeam(call: grpc_1.ServerWritableStream<dependency_2.statistico.TeamStatRequest, TeamStat>): void;
    }
    export class TeamStatsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTeamStatsServiceService.definition, "TeamStatsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTeamStatsForFixture: GrpcUnaryServiceInterface<dependency_2.statistico.FixtureRequest, TeamStatsResponse> = (message: dependency_2.statistico.FixtureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TeamStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TeamStatsResponse>, callback?: grpc_1.requestCallback<TeamStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTeamStatsForFixture(message, metadata, options, callback);
        };
        GetStatForTeam: GrpcStreamServiceInterface<dependency_2.statistico.TeamStatRequest, dependency_2.statistico.TeamStatRequest> = (message: dependency_2.statistico.TeamStatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_2.statistico.TeamStatRequest> => {
            return super.GetStatForTeam(message, metadata, options);
        };
    }
}
