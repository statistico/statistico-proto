// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package statisticoproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActionEnum int32

const (
	ActionEnum_FOR     ActionEnum = 0
	ActionEnum_AGAINST ActionEnum = 1
)

var ActionEnum_name = map[int32]string{
	0: "FOR",
	1: "AGAINST",
}

var ActionEnum_value = map[string]int32{
	"FOR":     0,
	"AGAINST": 1,
}

func (x ActionEnum) String() string {
	return proto.EnumName(ActionEnum_name, int32(x))
}

func (ActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{0}
}

type LineEnum int32

const (
	LineEnum_CLOSING LineEnum = 0
	LineEnum_MAX     LineEnum = 1
)

var LineEnum_name = map[int32]string{
	0: "CLOSING",
	1: "MAX",
}

var LineEnum_value = map[string]int32{
	"CLOSING": 0,
	"MAX":     1,
}

func (x LineEnum) String() string {
	return proto.EnumName(LineEnum_name, int32(x))
}

func (LineEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{1}
}

type MeasureEnum int32

const (
	MeasureEnum_TOTAL MeasureEnum = 0
	MeasureEnum_AVG   MeasureEnum = 1
)

var MeasureEnum_name = map[int32]string{
	0: "TOTAL",
	1: "AVG",
}

var MeasureEnum_value = map[string]int32{
	"TOTAL": 0,
	"AVG":   1,
}

func (x MeasureEnum) String() string {
	return proto.EnumName(MeasureEnum_name, int32(x))
}

func (MeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{2}
}

type MetricEnum int32

const (
	MetricEnum_GTE MetricEnum = 0
	MetricEnum_LTE MetricEnum = 1
)

var MetricEnum_name = map[int32]string{
	0: "GTE",
	1: "LTE",
}

var MetricEnum_value = map[string]int32{
	"GTE": 0,
	"LTE": 1,
}

func (x MetricEnum) String() string {
	return proto.EnumName(MetricEnum_name, int32(x))
}

func (MetricEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{3}
}

type ResultEnum int32

const (
	ResultEnum_WIN       ResultEnum = 0
	ResultEnum_LOSE      ResultEnum = 1
	ResultEnum_DRAW      ResultEnum = 2
	ResultEnum_WIN_DRAW  ResultEnum = 3
	ResultEnum_LOSE_DRAW ResultEnum = 4
)

var ResultEnum_name = map[int32]string{
	0: "WIN",
	1: "LOSE",
	2: "DRAW",
	3: "WIN_DRAW",
	4: "LOSE_DRAW",
}

var ResultEnum_value = map[string]int32{
	"WIN":       0,
	"LOSE":      1,
	"DRAW":      2,
	"WIN_DRAW":  3,
	"LOSE_DRAW": 4,
}

func (x ResultEnum) String() string {
	return proto.EnumName(ResultEnum_name, int32(x))
}

func (ResultEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{4}
}

type StatEnum int32

const (
	StatEnum_GOALS         StatEnum = 0
	StatEnum_SHOTS_ON_GOAL StatEnum = 1
	StatEnum_XG            StatEnum = 2
)

var StatEnum_name = map[int32]string{
	0: "GOALS",
	1: "SHOTS_ON_GOAL",
	2: "XG",
}

var StatEnum_value = map[string]int32{
	"GOALS":         0,
	"SHOTS_ON_GOAL": 1,
	"XG":            2,
}

func (x StatEnum) String() string {
	return proto.EnumName(StatEnum_name, int32(x))
}

func (StatEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{5}
}

type TeamEnum int32

const (
	TeamEnum_HOME_TEAM TeamEnum = 0
	TeamEnum_AWAY_TEAM TeamEnum = 1
)

var TeamEnum_name = map[int32]string{
	0: "HOME_TEAM",
	1: "AWAY_TEAM",
}

var TeamEnum_value = map[string]int32{
	"HOME_TEAM": 0,
	"AWAY_TEAM": 1,
}

func (x TeamEnum) String() string {
	return proto.EnumName(TeamEnum_name, int32(x))
}

func (TeamEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{6}
}

type TradeResultEnum int32

const (
	TradeResultEnum_SUCCESS TradeResultEnum = 0
	TradeResultEnum_FAIL    TradeResultEnum = 1
)

var TradeResultEnum_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var TradeResultEnum_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x TradeResultEnum) String() string {
	return proto.EnumName(TradeResultEnum_name, int32(x))
}

func (TradeResultEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{7}
}

type VenueEnum int32

const (
	VenueEnum_HOME      VenueEnum = 0
	VenueEnum_AWAY      VenueEnum = 1
	VenueEnum_HOME_AWAY VenueEnum = 2
)

var VenueEnum_name = map[int32]string{
	0: "HOME",
	1: "AWAY",
	2: "HOME_AWAY",
}

var VenueEnum_value = map[string]int32{
	"HOME":      0,
	"AWAY":      1,
	"HOME_AWAY": 2,
}

func (x VenueEnum) String() string {
	return proto.EnumName(VenueEnum_name, int32(x))
}

func (VenueEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{8}
}

func init() {
	proto.RegisterEnum("statisticoproto.ActionEnum", ActionEnum_name, ActionEnum_value)
	proto.RegisterEnum("statisticoproto.LineEnum", LineEnum_name, LineEnum_value)
	proto.RegisterEnum("statisticoproto.MeasureEnum", MeasureEnum_name, MeasureEnum_value)
	proto.RegisterEnum("statisticoproto.MetricEnum", MetricEnum_name, MetricEnum_value)
	proto.RegisterEnum("statisticoproto.ResultEnum", ResultEnum_name, ResultEnum_value)
	proto.RegisterEnum("statisticoproto.StatEnum", StatEnum_name, StatEnum_value)
	proto.RegisterEnum("statisticoproto.TeamEnum", TeamEnum_name, TeamEnum_value)
	proto.RegisterEnum("statisticoproto.TradeResultEnum", TradeResultEnum_name, TradeResultEnum_value)
	proto.RegisterEnum("statisticoproto.VenueEnum", VenueEnum_name, VenueEnum_value)
}

func init() {
	proto.RegisterFile("enum.proto", fileDescriptor_13a9f1b5947140c8)
}

var fileDescriptor_13a9f1b5947140c8 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x6e, 0xa3, 0x30,
	0x10, 0x86, 0x31, 0xc9, 0x06, 0x18, 0x36, 0xca, 0xac, 0x1f, 0x60, 0xb5, 0xdb, 0x53, 0xe4, 0x43,
	0x54, 0xa9, 0x4f, 0x60, 0xa5, 0x84, 0x20, 0x01, 0x96, 0x62, 0x37, 0xa4, 0x27, 0x44, 0x53, 0x1f,
	0x90, 0x1a, 0xa8, 0xc0, 0xbc, 0x7f, 0x65, 0xac, 0x54, 0xbd, 0xf9, 0x9b, 0xf9, 0x3c, 0xf3, 0xcb,
	0x06, 0xd0, 0xdd, 0x74, 0xdb, 0x7d, 0x0e, 0xbd, 0xe9, 0xe9, 0x66, 0x34, 0x8d, 0x69, 0x47, 0xd3,
	0x5e, 0xfb, 0xb9, 0xc0, 0x1e, 0x00, 0xf8, 0xd5, 0xb4, 0x7d, 0x97, 0x74, 0xd3, 0x8d, 0x06, 0xb0,
	0x38, 0x88, 0x13, 0x7a, 0x34, 0x86, 0x80, 0xa7, 0x3c, 0x2b, 0xa5, 0x42, 0xc2, 0xfe, 0x41, 0x98,
	0xb7, 0x9d, 0x9e, 0x8d, 0x18, 0x82, 0x7d, 0x2e, 0x64, 0x56, 0xa6, 0xe8, 0x59, 0xbd, 0xe0, 0x17,
	0x24, 0xec, 0x3f, 0xc4, 0x85, 0x6e, 0xc6, 0x69, 0x70, 0x52, 0x04, 0xbf, 0x94, 0x50, 0x3c, 0x77,
	0x0a, 0x3f, 0xa7, 0x48, 0xd8, 0x5f, 0x80, 0x42, 0x9b, 0xa1, 0xbd, 0xde, 0x17, 0xa5, 0x2a, 0x71,
	0xfd, 0x5c, 0x25, 0x48, 0xd8, 0x01, 0xe0, 0xa4, 0xc7, 0xe9, 0xc3, 0xdc, 0xfb, 0x55, 0x56, 0xa2,
	0x47, 0x43, 0x58, 0xe6, 0x42, 0x26, 0x48, 0xec, 0xe9, 0xf9, 0xc4, 0x2b, 0xf4, 0xe9, 0x6f, 0x08,
	0xab, 0xac, 0xac, 0x67, 0x5a, 0xd0, 0x35, 0x44, 0xd6, 0x70, 0xb8, 0x64, 0x8f, 0x10, 0x4a, 0xd3,
	0x98, 0x7b, 0x8e, 0x54, 0xf0, 0x5c, 0xa2, 0x47, 0xff, 0xc0, 0x5a, 0x1e, 0x85, 0x92, 0xb5, 0x28,
	0x6b, 0x5b, 0x43, 0x42, 0x57, 0xe0, 0x5f, 0x52, 0xf4, 0xd9, 0x16, 0x42, 0xa5, 0x9b, 0xdb, 0x7c,
	0x63, 0x0d, 0xd1, 0x51, 0x14, 0x49, 0xad, 0x12, 0x5e, 0xa0, 0x67, 0x91, 0x57, 0xfc, 0xd5, 0x21,
	0x61, 0x5b, 0xd8, 0xa8, 0xa1, 0x79, 0xd7, 0x3f, 0x82, 0xc6, 0x10, 0xc8, 0x97, 0xfd, 0x3e, 0x91,
	0xd2, 0x85, 0x3d, 0xf0, 0x2c, 0x47, 0xc2, 0x76, 0x10, 0x9d, 0x75, 0x37, 0xb9, 0xe7, 0x08, 0x61,
	0x69, 0x87, 0x3a, 0xc1, 0xce, 0x43, 0xf2, 0xbd, 0x68, 0x46, 0xff, 0x6d, 0x35, 0xff, 0xc6, 0xd3,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3b, 0x91, 0x9f, 0xac, 0x01, 0x00, 0x00,
}
