/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: player.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class PlayerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            player_id?: number;
        }): PlayerRequest {
            const message = new PlayerRequest({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeUint64(1, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerRequest {
            return PlayerRequest.deserialize(bytes);
        }
    }
    export class Player extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            country_id?: number;
            nationality_id?: number;
            common_name?: string;
            first_name?: string;
            last_name?: string;
            name?: string;
            display_name?: string;
            image_path?: string;
            height?: number;
            weight?: number;
            date_of_birth?: string;
            gender?: string;
            created_at?: dependency_1.statistico.Date;
            updated_at?: dependency_1.statistico.Date;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("country_id" in data && data.country_id != undefined) {
                    this.country_id = data.country_id;
                }
                if ("nationality_id" in data && data.nationality_id != undefined) {
                    this.nationality_id = data.nationality_id;
                }
                if ("common_name" in data && data.common_name != undefined) {
                    this.common_name = data.common_name;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("display_name" in data && data.display_name != undefined) {
                    this.display_name = data.display_name;
                }
                if ("image_path" in data && data.image_path != undefined) {
                    this.image_path = data.image_path;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get country_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set country_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get nationality_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set nationality_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get common_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set common_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get display_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set display_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get image_path() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set image_path(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get date_of_birth() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set date_of_birth(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.statistico.Date, 14) as dependency_1.statistico.Date;
        }
        set created_at(value: dependency_1.statistico.Date) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.statistico.Date, 15) as dependency_1.statistico.Date;
        }
        set updated_at(value: dependency_1.statistico.Date) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 15) != null;
        }
        static fromObject(data: {
            id?: number;
            country_id?: number;
            nationality_id?: number;
            common_name?: string;
            first_name?: string;
            last_name?: string;
            name?: string;
            display_name?: string;
            image_path?: string;
            height?: number;
            weight?: number;
            date_of_birth?: string;
            gender?: string;
            created_at?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
        }): Player {
            const message = new Player({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.country_id != null) {
                message.country_id = data.country_id;
            }
            if (data.nationality_id != null) {
                message.nationality_id = data.nationality_id;
            }
            if (data.common_name != null) {
                message.common_name = data.common_name;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.display_name != null) {
                message.display_name = data.display_name;
            }
            if (data.image_path != null) {
                message.image_path = data.image_path;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = data.date_of_birth;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.created_at != null) {
                message.created_at = dependency_1.statistico.Date.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_1.statistico.Date.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                country_id?: number;
                nationality_id?: number;
                common_name?: string;
                first_name?: string;
                last_name?: string;
                name?: string;
                display_name?: string;
                image_path?: string;
                height?: number;
                weight?: number;
                date_of_birth?: string;
                gender?: string;
                created_at?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_1.statistico.Date.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.country_id != null) {
                data.country_id = this.country_id;
            }
            if (this.nationality_id != null) {
                data.nationality_id = this.nationality_id;
            }
            if (this.common_name != null) {
                data.common_name = this.common_name;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.display_name != null) {
                data.display_name = this.display_name;
            }
            if (this.image_path != null) {
                data.image_path = this.image_path;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.country_id != 0)
                writer.writeUint64(2, this.country_id);
            if (this.nationality_id != 0)
                writer.writeUint64(3, this.nationality_id);
            if (this.common_name.length)
                writer.writeString(4, this.common_name);
            if (this.first_name.length)
                writer.writeString(5, this.first_name);
            if (this.last_name.length)
                writer.writeString(6, this.last_name);
            if (this.name.length)
                writer.writeString(7, this.name);
            if (this.display_name.length)
                writer.writeString(8, this.display_name);
            if (this.image_path.length)
                writer.writeString(9, this.image_path);
            if (this.height != 0)
                writer.writeInt32(10, this.height);
            if (this.weight != 0)
                writer.writeInt32(11, this.weight);
            if (this.date_of_birth.length)
                writer.writeString(12, this.date_of_birth);
            if (this.gender.length)
                writer.writeString(13, this.gender);
            if (this.has_created_at)
                writer.writeMessage(14, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(15, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.country_id = reader.readUint64();
                        break;
                    case 3:
                        message.nationality_id = reader.readUint64();
                        break;
                    case 4:
                        message.common_name = reader.readString();
                        break;
                    case 5:
                        message.first_name = reader.readString();
                        break;
                    case 6:
                        message.last_name = reader.readString();
                        break;
                    case 7:
                        message.name = reader.readString();
                        break;
                    case 8:
                        message.display_name = reader.readString();
                        break;
                    case 9:
                        message.image_path = reader.readString();
                        break;
                    case 10:
                        message.height = reader.readInt32();
                        break;
                    case 11:
                        message.weight = reader.readInt32();
                        break;
                    case 12:
                        message.date_of_birth = reader.readString();
                        break;
                    case 13:
                        message.gender = reader.readString();
                        break;
                    case 14:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_1.statistico.Date.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.statistico.Date.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Player {
            return Player.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPlayerServiceService {
        static definition = {
            GetPlayerByID: {
                path: "/statistico.PlayerService/GetPlayerByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PlayerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PlayerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Player) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Player.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPlayerByID(call: grpc_1.ServerUnaryCall<PlayerRequest, Player>, callback: grpc_1.sendUnaryData<Player>): void;
    }
    export class PlayerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedPlayerServiceService.definition, "PlayerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPlayerByID: GrpcUnaryServiceInterface<PlayerRequest, Player> = (message: PlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Player>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Player>, callback?: grpc_1.requestCallback<Player>): grpc_1.ClientUnaryCall => {
            return super.GetPlayerByID(message, metadata, options, callback);
        };
    }
}
