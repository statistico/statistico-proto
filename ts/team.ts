/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: team.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./requests";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace statistico {
    export class Team extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            short_code?: dependency_1.google.protobuf.StringValue;
            country_id?: number;
            venue_id?: number;
            is_national_team?: dependency_1.google.protobuf.BoolValue;
            founded?: dependency_1.google.protobuf.UInt64Value;
            logo?: dependency_1.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("short_code" in data && data.short_code != undefined) {
                    this.short_code = data.short_code;
                }
                if ("country_id" in data && data.country_id != undefined) {
                    this.country_id = data.country_id;
                }
                if ("venue_id" in data && data.venue_id != undefined) {
                    this.venue_id = data.venue_id;
                }
                if ("is_national_team" in data && data.is_national_team != undefined) {
                    this.is_national_team = data.is_national_team;
                }
                if ("founded" in data && data.founded != undefined) {
                    this.founded = data.founded;
                }
                if ("logo" in data && data.logo != undefined) {
                    this.logo = data.logo;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get short_code() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 3) as dependency_1.google.protobuf.StringValue;
        }
        set short_code(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_short_code() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get country_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set country_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get venue_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set venue_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_national_team() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.BoolValue, 6) as dependency_1.google.protobuf.BoolValue;
        }
        set is_national_team(value: dependency_1.google.protobuf.BoolValue) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_is_national_team() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get founded() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt64Value, 7) as dependency_1.google.protobuf.UInt64Value;
        }
        set founded(value: dependency_1.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_founded() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get logo() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 8) as dependency_1.google.protobuf.StringValue;
        }
        set logo(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_logo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            short_code?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            country_id?: number;
            venue_id?: number;
            is_national_team?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
            founded?: ReturnType<typeof dependency_1.google.protobuf.UInt64Value.prototype.toObject>;
            logo?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
        }): Team {
            const message = new Team({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.short_code != null) {
                message.short_code = dependency_1.google.protobuf.StringValue.fromObject(data.short_code);
            }
            if (data.country_id != null) {
                message.country_id = data.country_id;
            }
            if (data.venue_id != null) {
                message.venue_id = data.venue_id;
            }
            if (data.is_national_team != null) {
                message.is_national_team = dependency_1.google.protobuf.BoolValue.fromObject(data.is_national_team);
            }
            if (data.founded != null) {
                message.founded = dependency_1.google.protobuf.UInt64Value.fromObject(data.founded);
            }
            if (data.logo != null) {
                message.logo = dependency_1.google.protobuf.StringValue.fromObject(data.logo);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                short_code?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
                country_id?: number;
                venue_id?: number;
                is_national_team?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
                founded?: ReturnType<typeof dependency_1.google.protobuf.UInt64Value.prototype.toObject>;
                logo?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.short_code != null) {
                data.short_code = this.short_code.toObject();
            }
            if (this.country_id != null) {
                data.country_id = this.country_id;
            }
            if (this.venue_id != null) {
                data.venue_id = this.venue_id;
            }
            if (this.is_national_team != null) {
                data.is_national_team = this.is_national_team.toObject();
            }
            if (this.founded != null) {
                data.founded = this.founded.toObject();
            }
            if (this.logo != null) {
                data.logo = this.logo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_short_code)
                writer.writeMessage(3, this.short_code, () => this.short_code.serialize(writer));
            if (this.country_id != 0)
                writer.writeUint64(4, this.country_id);
            if (this.venue_id != 0)
                writer.writeUint64(5, this.venue_id);
            if (this.has_is_national_team)
                writer.writeMessage(6, this.is_national_team, () => this.is_national_team.serialize(writer));
            if (this.has_founded)
                writer.writeMessage(7, this.founded, () => this.founded.serialize(writer));
            if (this.has_logo)
                writer.writeMessage(8, this.logo, () => this.logo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Team {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Team();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.short_code, () => message.short_code = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 4:
                        message.country_id = reader.readUint64();
                        break;
                    case 5:
                        message.venue_id = reader.readUint64();
                        break;
                    case 6:
                        reader.readMessage(message.is_national_team, () => message.is_national_team = dependency_1.google.protobuf.BoolValue.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.founded, () => message.founded = dependency_1.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.logo, () => message.logo = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Team {
            return Team.deserialize(bytes);
        }
    }
    export class CompetitionTeamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            competition_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("competition_ids" in data && data.competition_ids != undefined) {
                    this.competition_ids = data.competition_ids;
                }
            }
        }
        get competition_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set competition_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            competition_ids?: number[];
        }): CompetitionTeamsRequest {
            const message = new CompetitionTeamsRequest({});
            if (data.competition_ids != null) {
                message.competition_ids = data.competition_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                competition_ids?: number[];
            } = {};
            if (this.competition_ids != null) {
                data.competition_ids = this.competition_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.competition_ids.length)
                writer.writePackedUint64(1, this.competition_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompetitionTeamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompetitionTeamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.competition_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompetitionTeamsRequest {
            return CompetitionTeamsRequest.deserialize(bytes);
        }
    }
    export class TeamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teams?: Team[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teams" in data && data.teams != undefined) {
                    this.teams = data.teams;
                }
            }
        }
        get teams() {
            return pb_1.Message.getRepeatedWrapperField(this, Team, 1) as Team[];
        }
        set teams(value: Team[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            teams?: ReturnType<typeof Team.prototype.toObject>[];
        }): TeamsResponse {
            const message = new TeamsResponse({});
            if (data.teams != null) {
                message.teams = data.teams.map(item => Team.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                teams?: ReturnType<typeof Team.prototype.toObject>[];
            } = {};
            if (this.teams != null) {
                data.teams = this.teams.map((item: Team) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.teams.length)
                writer.writeRepeatedMessage(1, this.teams, (item: Team) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teams, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Team.deserialize(reader), Team));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamsResponse {
            return TeamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTeamServiceService {
        static definition = {
            GetTeamByID: {
                path: "/statistico.TeamService/GetTeamByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.statistico.TeamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.TeamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Team) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Team.deserialize(new Uint8Array(bytes))
            },
            GetTeamsByCompetitionId: {
                path: "/statistico.TeamService/GetTeamsByCompetitionId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CompetitionTeamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CompetitionTeamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TeamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TeamsResponse.deserialize(new Uint8Array(bytes))
            },
            GetTeamsBySeasonId: {
                path: "/statistico.TeamService/GetTeamsBySeasonId",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_2.statistico.SeasonTeamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.statistico.SeasonTeamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Team) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Team.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTeamByID(call: grpc_1.ServerUnaryCall<dependency_2.statistico.TeamRequest, Team>, callback: grpc_1.sendUnaryData<Team>): void;
        abstract GetTeamsByCompetitionId(call: grpc_1.ServerUnaryCall<CompetitionTeamsRequest, TeamsResponse>, callback: grpc_1.sendUnaryData<TeamsResponse>): void;
        abstract GetTeamsBySeasonId(call: grpc_1.ServerWritableStream<dependency_2.statistico.SeasonTeamsRequest, Team>): void;
    }
    export class TeamServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTeamServiceService.definition, "TeamService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTeamByID: GrpcUnaryServiceInterface<dependency_2.statistico.TeamRequest, Team> = (message: dependency_2.statistico.TeamRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Team>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Team>, callback?: grpc_1.requestCallback<Team>): grpc_1.ClientUnaryCall => {
            return super.GetTeamByID(message, metadata, options, callback);
        };
        GetTeamsByCompetitionId: GrpcUnaryServiceInterface<CompetitionTeamsRequest, TeamsResponse> = (message: CompetitionTeamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TeamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TeamsResponse>, callback?: grpc_1.requestCallback<TeamsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTeamsByCompetitionId(message, metadata, options, callback);
        };
        GetTeamsBySeasonId: GrpcStreamServiceInterface<dependency_2.statistico.SeasonTeamsRequest, Team> = (message: dependency_2.statistico.SeasonTeamsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Team> => {
            return super.GetTeamsBySeasonId(message, metadata, options);
        };
    }
}
