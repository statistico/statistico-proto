/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: requests.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./enum";
import * as dependency_2 from "./utility";
import * as dependency_3 from "./google/protobuf/timestamp";
import * as dependency_4 from "./google/protobuf/wrappers";
import * as pb_1 from "google-protobuf";
export namespace statistico {
    export class CompetitionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            country_ids?: number[];
            sort?: dependency_4.google.protobuf.StringValue;
            is_cup?: dependency_4.google.protobuf.BoolValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("country_ids" in data && data.country_ids != undefined) {
                    this.country_ids = data.country_ids;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
                if ("is_cup" in data && data.is_cup != undefined) {
                    this.is_cup = data.is_cup;
                }
            }
        }
        get country_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set country_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get sort() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 2) as dependency_4.google.protobuf.StringValue;
        }
        set sort(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sort() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get is_cup() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.BoolValue, 3) as dependency_4.google.protobuf.BoolValue;
        }
        set is_cup(value: dependency_4.google.protobuf.BoolValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_is_cup() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            country_ids?: number[];
            sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            is_cup?: ReturnType<typeof dependency_4.google.protobuf.BoolValue.prototype.toObject>;
        }): CompetitionRequest {
            const message = new CompetitionRequest({});
            if (data.country_ids != null) {
                message.country_ids = data.country_ids;
            }
            if (data.sort != null) {
                message.sort = dependency_4.google.protobuf.StringValue.fromObject(data.sort);
            }
            if (data.is_cup != null) {
                message.is_cup = dependency_4.google.protobuf.BoolValue.fromObject(data.is_cup);
            }
            return message;
        }
        toObject() {
            const data: {
                country_ids?: number[];
                sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                is_cup?: ReturnType<typeof dependency_4.google.protobuf.BoolValue.prototype.toObject>;
            } = {};
            if (this.country_ids != null) {
                data.country_ids = this.country_ids;
            }
            if (this.sort != null) {
                data.sort = this.sort.toObject();
            }
            if (this.is_cup != null) {
                data.is_cup = this.is_cup.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.country_ids.length)
                writer.writePackedUint64(1, this.country_ids);
            if (this.has_sort)
                writer.writeMessage(2, this.sort, () => this.sort.serialize(writer));
            if (this.has_is_cup)
                writer.writeMessage(3, this.is_cup, () => this.is_cup.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompetitionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompetitionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.country_ids = reader.readPackedUint64();
                        break;
                    case 2:
                        reader.readMessage(message.sort, () => message.sort = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.is_cup, () => message.is_cup = dependency_4.google.protobuf.BoolValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompetitionRequest {
            return CompetitionRequest.deserialize(bytes);
        }
    }
    export class CreateStrategyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            market?: dependency_1.statistico.MarketEnum;
            min_odds?: dependency_4.google.protobuf.FloatValue;
            max_odds?: dependency_4.google.protobuf.FloatValue;
            staking_plan?: dependency_2.statistico.StakingPlan;
            competition_id?: number;
            season_id?: number;
            starting_fund?: number;
            status?: dependency_1.statistico.StrategyStatusEnum;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("market" in data && data.market != undefined) {
                    this.market = data.market;
                }
                if ("min_odds" in data && data.min_odds != undefined) {
                    this.min_odds = data.min_odds;
                }
                if ("max_odds" in data && data.max_odds != undefined) {
                    this.max_odds = data.max_odds;
                }
                if ("staking_plan" in data && data.staking_plan != undefined) {
                    this.staking_plan = data.staking_plan;
                }
                if ("competition_id" in data && data.competition_id != undefined) {
                    this.competition_id = data.competition_id;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("starting_fund" in data && data.starting_fund != undefined) {
                    this.starting_fund = data.starting_fund;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get market() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.statistico.MarketEnum.OVER_UNDER_25) as dependency_1.statistico.MarketEnum;
        }
        set market(value: dependency_1.statistico.MarketEnum) {
            pb_1.Message.setField(this, 1, value);
        }
        get min_odds() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.FloatValue, 2) as dependency_4.google.protobuf.FloatValue;
        }
        set min_odds(value: dependency_4.google.protobuf.FloatValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_min_odds() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get max_odds() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.FloatValue, 3) as dependency_4.google.protobuf.FloatValue;
        }
        set max_odds(value: dependency_4.google.protobuf.FloatValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_max_odds() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get staking_plan() {
            return pb_1.Message.getWrapperField(this, dependency_2.statistico.StakingPlan, 4) as dependency_2.statistico.StakingPlan;
        }
        set staking_plan(value: dependency_2.statistico.StakingPlan) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_staking_plan() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get competition_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set competition_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get starting_fund() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set starting_fund(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, dependency_1.statistico.StrategyStatusEnum.ARCHIVED) as dependency_1.statistico.StrategyStatusEnum;
        }
        set status(value: dependency_1.statistico.StrategyStatusEnum) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            market?: dependency_1.statistico.MarketEnum;
            min_odds?: ReturnType<typeof dependency_4.google.protobuf.FloatValue.prototype.toObject>;
            max_odds?: ReturnType<typeof dependency_4.google.protobuf.FloatValue.prototype.toObject>;
            staking_plan?: ReturnType<typeof dependency_2.statistico.StakingPlan.prototype.toObject>;
            competition_id?: number;
            season_id?: number;
            starting_fund?: number;
            status?: dependency_1.statistico.StrategyStatusEnum;
        }): CreateStrategyRequest {
            const message = new CreateStrategyRequest({});
            if (data.market != null) {
                message.market = data.market;
            }
            if (data.min_odds != null) {
                message.min_odds = dependency_4.google.protobuf.FloatValue.fromObject(data.min_odds);
            }
            if (data.max_odds != null) {
                message.max_odds = dependency_4.google.protobuf.FloatValue.fromObject(data.max_odds);
            }
            if (data.staking_plan != null) {
                message.staking_plan = dependency_2.statistico.StakingPlan.fromObject(data.staking_plan);
            }
            if (data.competition_id != null) {
                message.competition_id = data.competition_id;
            }
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.starting_fund != null) {
                message.starting_fund = data.starting_fund;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                market?: dependency_1.statistico.MarketEnum;
                min_odds?: ReturnType<typeof dependency_4.google.protobuf.FloatValue.prototype.toObject>;
                max_odds?: ReturnType<typeof dependency_4.google.protobuf.FloatValue.prototype.toObject>;
                staking_plan?: ReturnType<typeof dependency_2.statistico.StakingPlan.prototype.toObject>;
                competition_id?: number;
                season_id?: number;
                starting_fund?: number;
                status?: dependency_1.statistico.StrategyStatusEnum;
            } = {};
            if (this.market != null) {
                data.market = this.market;
            }
            if (this.min_odds != null) {
                data.min_odds = this.min_odds.toObject();
            }
            if (this.max_odds != null) {
                data.max_odds = this.max_odds.toObject();
            }
            if (this.staking_plan != null) {
                data.staking_plan = this.staking_plan.toObject();
            }
            if (this.competition_id != null) {
                data.competition_id = this.competition_id;
            }
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.starting_fund != null) {
                data.starting_fund = this.starting_fund;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.market != dependency_1.statistico.MarketEnum.OVER_UNDER_25)
                writer.writeEnum(1, this.market);
            if (this.has_min_odds)
                writer.writeMessage(2, this.min_odds, () => this.min_odds.serialize(writer));
            if (this.has_max_odds)
                writer.writeMessage(3, this.max_odds, () => this.max_odds.serialize(writer));
            if (this.has_staking_plan)
                writer.writeMessage(4, this.staking_plan, () => this.staking_plan.serialize(writer));
            if (this.competition_id != 0)
                writer.writeUint64(5, this.competition_id);
            if (this.season_id != 0)
                writer.writeUint64(6, this.season_id);
            if (this.starting_fund != 0)
                writer.writeFloat(7, this.starting_fund);
            if (this.status != dependency_1.statistico.StrategyStatusEnum.ARCHIVED)
                writer.writeEnum(8, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateStrategyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateStrategyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.market = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.min_odds, () => message.min_odds = dependency_4.google.protobuf.FloatValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.max_odds, () => message.max_odds = dependency_4.google.protobuf.FloatValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.staking_plan, () => message.staking_plan = dependency_2.statistico.StakingPlan.deserialize(reader));
                        break;
                    case 5:
                        message.competition_id = reader.readUint64();
                        break;
                    case 6:
                        message.season_id = reader.readUint64();
                        break;
                    case 7:
                        message.starting_fund = reader.readFloat();
                        break;
                    case 8:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateStrategyRequest {
            return CreateStrategyRequest.deserialize(bytes);
        }
    }
    export class FixtureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fixture_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fixture_id" in data && data.fixture_id != undefined) {
                    this.fixture_id = data.fixture_id;
                }
            }
        }
        get fixture_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fixture_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            fixture_id?: number;
        }): FixtureRequest {
            const message = new FixtureRequest({});
            if (data.fixture_id != null) {
                message.fixture_id = data.fixture_id;
            }
            return message;
        }
        toObject() {
            const data: {
                fixture_id?: number;
            } = {};
            if (this.fixture_id != null) {
                data.fixture_id = this.fixture_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fixture_id != 0)
                writer.writeUint64(1, this.fixture_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FixtureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FixtureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fixture_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FixtureRequest {
            return FixtureRequest.deserialize(bytes);
        }
    }
    export class FixtureSearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            season_ids?: number[];
            limit?: dependency_4.google.protobuf.UInt64Value;
            date_before?: dependency_4.google.protobuf.StringValue;
            date_after?: dependency_4.google.protobuf.StringValue;
            sort?: dependency_4.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("season_ids" in data && data.season_ids != undefined) {
                    this.season_ids = data.season_ids;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
                if ("date_after" in data && data.date_after != undefined) {
                    this.date_after = data.date_after;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
            }
        }
        get season_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set season_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 2) as dependency_4.google.protobuf.UInt64Value;
        }
        set limit(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_limit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get date_before() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 3) as dependency_4.google.protobuf.StringValue;
        }
        set date_before(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_date_before() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get date_after() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 4) as dependency_4.google.protobuf.StringValue;
        }
        set date_after(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_date_after() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sort() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 5) as dependency_4.google.protobuf.StringValue;
        }
        set sort(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_sort() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            season_ids?: number[];
            limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
        }): FixtureSearchRequest {
            const message = new FixtureSearchRequest({});
            if (data.season_ids != null) {
                message.season_ids = data.season_ids;
            }
            if (data.limit != null) {
                message.limit = dependency_4.google.protobuf.UInt64Value.fromObject(data.limit);
            }
            if (data.date_before != null) {
                message.date_before = dependency_4.google.protobuf.StringValue.fromObject(data.date_before);
            }
            if (data.date_after != null) {
                message.date_after = dependency_4.google.protobuf.StringValue.fromObject(data.date_after);
            }
            if (data.sort != null) {
                message.sort = dependency_4.google.protobuf.StringValue.fromObject(data.sort);
            }
            return message;
        }
        toObject() {
            const data: {
                season_ids?: number[];
                limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.season_ids != null) {
                data.season_ids = this.season_ids;
            }
            if (this.limit != null) {
                data.limit = this.limit.toObject();
            }
            if (this.date_before != null) {
                data.date_before = this.date_before.toObject();
            }
            if (this.date_after != null) {
                data.date_after = this.date_after.toObject();
            }
            if (this.sort != null) {
                data.sort = this.sort.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.season_ids.length)
                writer.writePackedUint64(1, this.season_ids);
            if (this.has_limit)
                writer.writeMessage(2, this.limit, () => this.limit.serialize(writer));
            if (this.has_date_before)
                writer.writeMessage(3, this.date_before, () => this.date_before.serialize(writer));
            if (this.has_date_after)
                writer.writeMessage(4, this.date_after, () => this.date_after.serialize(writer));
            if (this.has_sort)
                writer.writeMessage(5, this.sort, () => this.sort.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FixtureSearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FixtureSearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.season_ids = reader.readPackedUint64();
                        break;
                    case 2:
                        reader.readMessage(message.limit, () => message.limit = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.date_before, () => message.date_before = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.date_after, () => message.date_after = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sort, () => message.sort = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FixtureSearchRequest {
            return FixtureSearchRequest.deserialize(bytes);
        }
    }
    export class HistoricalResultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            home_team_id?: number;
            away_team_id?: number;
            limit?: number;
            date_before?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("home_team_id" in data && data.home_team_id != undefined) {
                    this.home_team_id = data.home_team_id;
                }
                if ("away_team_id" in data && data.away_team_id != undefined) {
                    this.away_team_id = data.away_team_id;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
            }
        }
        get home_team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set home_team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get away_team_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set away_team_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get date_before() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set date_before(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            home_team_id?: number;
            away_team_id?: number;
            limit?: number;
            date_before?: string;
        }): HistoricalResultRequest {
            const message = new HistoricalResultRequest({});
            if (data.home_team_id != null) {
                message.home_team_id = data.home_team_id;
            }
            if (data.away_team_id != null) {
                message.away_team_id = data.away_team_id;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.date_before != null) {
                message.date_before = data.date_before;
            }
            return message;
        }
        toObject() {
            const data: {
                home_team_id?: number;
                away_team_id?: number;
                limit?: number;
                date_before?: string;
            } = {};
            if (this.home_team_id != null) {
                data.home_team_id = this.home_team_id;
            }
            if (this.away_team_id != null) {
                data.away_team_id = this.away_team_id;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.date_before != null) {
                data.date_before = this.date_before;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.home_team_id != 0)
                writer.writeUint64(1, this.home_team_id);
            if (this.away_team_id != 0)
                writer.writeUint64(2, this.away_team_id);
            if (this.limit != 0)
                writer.writeUint32(3, this.limit);
            if (this.date_before.length)
                writer.writeString(4, this.date_before);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoricalResultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoricalResultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.home_team_id = reader.readUint64();
                        break;
                    case 2:
                        message.away_team_id = reader.readUint64();
                        break;
                    case 3:
                        message.limit = reader.readUint32();
                        break;
                    case 4:
                        message.date_before = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoricalResultRequest {
            return HistoricalResultRequest.deserialize(bytes);
        }
    }
    export class ListStrategiesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.statistico.StrategyStatusEnum;
            competition_id?: dependency_4.google.protobuf.UInt64Value;
            season_id?: dependency_4.google.protobuf.UInt64Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("competition_id" in data && data.competition_id != undefined) {
                    this.competition_id = data.competition_id;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.statistico.StrategyStatusEnum.ARCHIVED) as dependency_1.statistico.StrategyStatusEnum;
        }
        set status(value: dependency_1.statistico.StrategyStatusEnum) {
            pb_1.Message.setField(this, 1, value);
        }
        get competition_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 2) as dependency_4.google.protobuf.UInt64Value;
        }
        set competition_id(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_competition_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get season_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 3) as dependency_4.google.protobuf.UInt64Value;
        }
        set season_id(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_season_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            status?: dependency_1.statistico.StrategyStatusEnum;
            competition_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            season_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
        }): ListStrategiesRequest {
            const message = new ListStrategiesRequest({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.competition_id != null) {
                message.competition_id = dependency_4.google.protobuf.UInt64Value.fromObject(data.competition_id);
            }
            if (data.season_id != null) {
                message.season_id = dependency_4.google.protobuf.UInt64Value.fromObject(data.season_id);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.statistico.StrategyStatusEnum;
                competition_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                season_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.competition_id != null) {
                data.competition_id = this.competition_id.toObject();
            }
            if (this.season_id != null) {
                data.season_id = this.season_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.statistico.StrategyStatusEnum.ARCHIVED)
                writer.writeEnum(1, this.status);
            if (this.has_competition_id)
                writer.writeMessage(2, this.competition_id, () => this.competition_id.serialize(writer));
            if (this.has_season_id)
                writer.writeMessage(3, this.season_id, () => this.season_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListStrategiesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListStrategiesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.competition_id, () => message.competition_id = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.season_id, () => message.season_id = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListStrategiesRequest {
            return ListStrategiesRequest.deserialize(bytes);
        }
    }
    export class ResultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fixture_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fixture_id" in data && data.fixture_id != undefined) {
                    this.fixture_id = data.fixture_id;
                }
            }
        }
        get fixture_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fixture_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            fixture_id?: number;
        }): ResultRequest {
            const message = new ResultRequest({});
            if (data.fixture_id != null) {
                message.fixture_id = data.fixture_id;
            }
            return message;
        }
        toObject() {
            const data: {
                fixture_id?: number;
            } = {};
            if (this.fixture_id != null) {
                data.fixture_id = this.fixture_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fixture_id != 0)
                writer.writeUint64(1, this.fixture_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fixture_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResultRequest {
            return ResultRequest.deserialize(bytes);
        }
    }
    export class SearchTradesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            strategy_id?: dependency_4.google.protobuf.StringValue;
            market?: dependency_4.google.protobuf.StringValue;
            competition_id?: dependency_4.google.protobuf.UInt64Value;
            season_id?: dependency_4.google.protobuf.UInt64Value;
            status?: dependency_4.google.protobuf.StringValue;
            exchange?: dependency_4.google.protobuf.StringValue;
            date_from?: dependency_3.google.protobuf.Timestamp;
            date_to?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("strategy_id" in data && data.strategy_id != undefined) {
                    this.strategy_id = data.strategy_id;
                }
                if ("market" in data && data.market != undefined) {
                    this.market = data.market;
                }
                if ("competition_id" in data && data.competition_id != undefined) {
                    this.competition_id = data.competition_id;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("exchange" in data && data.exchange != undefined) {
                    this.exchange = data.exchange;
                }
                if ("date_from" in data && data.date_from != undefined) {
                    this.date_from = data.date_from;
                }
                if ("date_to" in data && data.date_to != undefined) {
                    this.date_to = data.date_to;
                }
            }
        }
        get strategy_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 1) as dependency_4.google.protobuf.StringValue;
        }
        set strategy_id(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_strategy_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get market() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 2) as dependency_4.google.protobuf.StringValue;
        }
        set market(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_market() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get competition_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 3) as dependency_4.google.protobuf.UInt64Value;
        }
        set competition_id(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_competition_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get season_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 4) as dependency_4.google.protobuf.UInt64Value;
        }
        set season_id(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_season_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 5) as dependency_4.google.protobuf.StringValue;
        }
        set status(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get exchange() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 6) as dependency_4.google.protobuf.StringValue;
        }
        set exchange(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_exchange() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get date_from() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 7) as dependency_3.google.protobuf.Timestamp;
        }
        set date_from(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_date_from() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get date_to() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 8) as dependency_3.google.protobuf.Timestamp;
        }
        set date_to(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_date_to() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            strategy_id?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            market?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            competition_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            season_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            status?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            exchange?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            date_from?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            date_to?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): SearchTradesRequest {
            const message = new SearchTradesRequest({});
            if (data.strategy_id != null) {
                message.strategy_id = dependency_4.google.protobuf.StringValue.fromObject(data.strategy_id);
            }
            if (data.market != null) {
                message.market = dependency_4.google.protobuf.StringValue.fromObject(data.market);
            }
            if (data.competition_id != null) {
                message.competition_id = dependency_4.google.protobuf.UInt64Value.fromObject(data.competition_id);
            }
            if (data.season_id != null) {
                message.season_id = dependency_4.google.protobuf.UInt64Value.fromObject(data.season_id);
            }
            if (data.status != null) {
                message.status = dependency_4.google.protobuf.StringValue.fromObject(data.status);
            }
            if (data.exchange != null) {
                message.exchange = dependency_4.google.protobuf.StringValue.fromObject(data.exchange);
            }
            if (data.date_from != null) {
                message.date_from = dependency_3.google.protobuf.Timestamp.fromObject(data.date_from);
            }
            if (data.date_to != null) {
                message.date_to = dependency_3.google.protobuf.Timestamp.fromObject(data.date_to);
            }
            return message;
        }
        toObject() {
            const data: {
                strategy_id?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                market?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                competition_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                season_id?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                status?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                exchange?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                date_from?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                date_to?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.strategy_id != null) {
                data.strategy_id = this.strategy_id.toObject();
            }
            if (this.market != null) {
                data.market = this.market.toObject();
            }
            if (this.competition_id != null) {
                data.competition_id = this.competition_id.toObject();
            }
            if (this.season_id != null) {
                data.season_id = this.season_id.toObject();
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.exchange != null) {
                data.exchange = this.exchange.toObject();
            }
            if (this.date_from != null) {
                data.date_from = this.date_from.toObject();
            }
            if (this.date_to != null) {
                data.date_to = this.date_to.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_strategy_id)
                writer.writeMessage(1, this.strategy_id, () => this.strategy_id.serialize(writer));
            if (this.has_market)
                writer.writeMessage(2, this.market, () => this.market.serialize(writer));
            if (this.has_competition_id)
                writer.writeMessage(3, this.competition_id, () => this.competition_id.serialize(writer));
            if (this.has_season_id)
                writer.writeMessage(4, this.season_id, () => this.season_id.serialize(writer));
            if (this.has_status)
                writer.writeMessage(5, this.status, () => this.status.serialize(writer));
            if (this.has_exchange)
                writer.writeMessage(6, this.exchange, () => this.exchange.serialize(writer));
            if (this.has_date_from)
                writer.writeMessage(7, this.date_from, () => this.date_from.serialize(writer));
            if (this.has_date_to)
                writer.writeMessage(8, this.date_to, () => this.date_to.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchTradesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchTradesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.strategy_id, () => message.strategy_id = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.market, () => message.market = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.competition_id, () => message.competition_id = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.season_id, () => message.season_id = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.status, () => message.status = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.exchange, () => message.exchange = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.date_from, () => message.date_from = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.date_to, () => message.date_to = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchTradesRequest {
            return SearchTradesRequest.deserialize(bytes);
        }
    }
    export class SeasonCompetitionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            competition_id?: number;
            sort?: dependency_4.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("competition_id" in data && data.competition_id != undefined) {
                    this.competition_id = data.competition_id;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
            }
        }
        get competition_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set competition_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sort() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 2) as dependency_4.google.protobuf.StringValue;
        }
        set sort(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sort() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            competition_id?: number;
            sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
        }): SeasonCompetitionRequest {
            const message = new SeasonCompetitionRequest({});
            if (data.competition_id != null) {
                message.competition_id = data.competition_id;
            }
            if (data.sort != null) {
                message.sort = dependency_4.google.protobuf.StringValue.fromObject(data.sort);
            }
            return message;
        }
        toObject() {
            const data: {
                competition_id?: number;
                sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.competition_id != null) {
                data.competition_id = this.competition_id;
            }
            if (this.sort != null) {
                data.sort = this.sort.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.competition_id != 0)
                writer.writeUint64(1, this.competition_id);
            if (this.has_sort)
                writer.writeMessage(2, this.sort, () => this.sort.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeasonCompetitionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeasonCompetitionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.competition_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.sort, () => message.sort = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SeasonCompetitionRequest {
            return SeasonCompetitionRequest.deserialize(bytes);
        }
    }
    export class SeasonFixtureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            season_id?: number;
            date_from?: string;
            date_to?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("date_from" in data && data.date_from != undefined) {
                    this.date_from = data.date_from;
                }
                if ("date_to" in data && data.date_to != undefined) {
                    this.date_to = data.date_to;
                }
            }
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get date_from() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set date_from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get date_to() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set date_to(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            season_id?: number;
            date_from?: string;
            date_to?: string;
        }): SeasonFixtureRequest {
            const message = new SeasonFixtureRequest({});
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.date_from != null) {
                message.date_from = data.date_from;
            }
            if (data.date_to != null) {
                message.date_to = data.date_to;
            }
            return message;
        }
        toObject() {
            const data: {
                season_id?: number;
                date_from?: string;
                date_to?: string;
            } = {};
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.date_from != null) {
                data.date_from = this.date_from;
            }
            if (this.date_to != null) {
                data.date_to = this.date_to;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.season_id != 0)
                writer.writeUint64(1, this.season_id);
            if (this.date_from.length)
                writer.writeString(2, this.date_from);
            if (this.date_to.length)
                writer.writeString(3, this.date_to);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeasonFixtureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeasonFixtureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.season_id = reader.readUint64();
                        break;
                    case 2:
                        message.date_from = reader.readString();
                        break;
                    case 3:
                        message.date_to = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SeasonFixtureRequest {
            return SeasonFixtureRequest.deserialize(bytes);
        }
    }
    export class SeasonRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            season_id?: number;
            date_before?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
            }
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get date_before() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set date_before(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            season_id?: number;
            date_before?: string;
        }): SeasonRequest {
            const message = new SeasonRequest({});
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.date_before != null) {
                message.date_before = data.date_before;
            }
            return message;
        }
        toObject() {
            const data: {
                season_id?: number;
                date_before?: string;
            } = {};
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.date_before != null) {
                data.date_before = this.date_before;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.season_id != 0)
                writer.writeInt64(1, this.season_id);
            if (this.date_before.length)
                writer.writeString(2, this.date_before);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeasonRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeasonRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.season_id = reader.readInt64();
                        break;
                    case 2:
                        message.date_before = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SeasonRequest {
            return SeasonRequest.deserialize(bytes);
        }
    }
    export class SeasonTeamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            season_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
            }
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set season_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            season_id?: number;
        }): SeasonTeamsRequest {
            const message = new SeasonTeamsRequest({});
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            return message;
        }
        toObject() {
            const data: {
                season_id?: number;
            } = {};
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.season_id != 0)
                writer.writeUint64(1, this.season_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeasonTeamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeasonTeamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.season_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SeasonTeamsRequest {
            return SeasonTeamsRequest.deserialize(bytes);
        }
    }
    export class TeamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            team_id?: number;
        }): TeamRequest {
            const message = new TeamRequest({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeUint64(1, this.team_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamRequest {
            return TeamRequest.deserialize(bytes);
        }
    }
    export class TeamResultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            limit?: dependency_4.google.protobuf.UInt64Value;
            date_before?: dependency_4.google.protobuf.StringValue;
            date_after?: dependency_4.google.protobuf.StringValue;
            venue?: dependency_4.google.protobuf.StringValue;
            season_ids?: number[];
            sort?: dependency_4.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
                if ("date_after" in data && data.date_after != undefined) {
                    this.date_after = data.date_after;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("season_ids" in data && data.season_ids != undefined) {
                    this.season_ids = data.season_ids;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 2) as dependency_4.google.protobuf.UInt64Value;
        }
        set limit(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_limit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get date_before() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 3) as dependency_4.google.protobuf.StringValue;
        }
        set date_before(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_date_before() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get date_after() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 4) as dependency_4.google.protobuf.StringValue;
        }
        set date_after(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_date_after() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 5) as dependency_4.google.protobuf.StringValue;
        }
        set venue(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_venue() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get season_ids() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set season_ids(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get sort() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 7) as dependency_4.google.protobuf.StringValue;
        }
        set sort(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_sort() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            team_id?: number;
            limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            venue?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            season_ids?: number[];
            sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
        }): TeamResultRequest {
            const message = new TeamResultRequest({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.limit != null) {
                message.limit = dependency_4.google.protobuf.UInt64Value.fromObject(data.limit);
            }
            if (data.date_before != null) {
                message.date_before = dependency_4.google.protobuf.StringValue.fromObject(data.date_before);
            }
            if (data.date_after != null) {
                message.date_after = dependency_4.google.protobuf.StringValue.fromObject(data.date_after);
            }
            if (data.venue != null) {
                message.venue = dependency_4.google.protobuf.StringValue.fromObject(data.venue);
            }
            if (data.season_ids != null) {
                message.season_ids = data.season_ids;
            }
            if (data.sort != null) {
                message.sort = dependency_4.google.protobuf.StringValue.fromObject(data.sort);
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                venue?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                season_ids?: number[];
                sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.limit != null) {
                data.limit = this.limit.toObject();
            }
            if (this.date_before != null) {
                data.date_before = this.date_before.toObject();
            }
            if (this.date_after != null) {
                data.date_after = this.date_after.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.season_ids != null) {
                data.season_ids = this.season_ids;
            }
            if (this.sort != null) {
                data.sort = this.sort.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeUint64(1, this.team_id);
            if (this.has_limit)
                writer.writeMessage(2, this.limit, () => this.limit.serialize(writer));
            if (this.has_date_before)
                writer.writeMessage(3, this.date_before, () => this.date_before.serialize(writer));
            if (this.has_date_after)
                writer.writeMessage(4, this.date_after, () => this.date_after.serialize(writer));
            if (this.has_venue)
                writer.writeMessage(5, this.venue, () => this.venue.serialize(writer));
            if (this.season_ids.length)
                writer.writePackedUint64(6, this.season_ids);
            if (this.has_sort)
                writer.writeMessage(7, this.sort, () => this.sort.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamResultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamResultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.limit, () => message.limit = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.date_before, () => message.date_before = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.date_after, () => message.date_after = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.venue, () => message.venue = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 6:
                        message.season_ids = reader.readPackedUint64();
                        break;
                    case 7:
                        reader.readMessage(message.sort, () => message.sort = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamResultRequest {
            return TeamResultRequest.deserialize(bytes);
        }
    }
    export class TeamStatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stat?: string;
            team_id?: number;
            limit?: dependency_4.google.protobuf.UInt64Value;
            date_before?: dependency_4.google.protobuf.StringValue;
            date_after?: dependency_4.google.protobuf.StringValue;
            venue?: dependency_4.google.protobuf.StringValue;
            season_ids?: number[];
            sort?: dependency_4.google.protobuf.StringValue;
            opponent?: dependency_4.google.protobuf.BoolValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stat" in data && data.stat != undefined) {
                    this.stat = data.stat;
                }
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("date_before" in data && data.date_before != undefined) {
                    this.date_before = data.date_before;
                }
                if ("date_after" in data && data.date_after != undefined) {
                    this.date_after = data.date_after;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("season_ids" in data && data.season_ids != undefined) {
                    this.season_ids = data.season_ids;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
                if ("opponent" in data && data.opponent != undefined) {
                    this.opponent = data.opponent;
                }
            }
        }
        get stat() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stat(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get limit() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.UInt64Value, 3) as dependency_4.google.protobuf.UInt64Value;
        }
        set limit(value: dependency_4.google.protobuf.UInt64Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_limit() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get date_before() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 4) as dependency_4.google.protobuf.StringValue;
        }
        set date_before(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_date_before() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get date_after() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 5) as dependency_4.google.protobuf.StringValue;
        }
        set date_after(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_date_after() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 6) as dependency_4.google.protobuf.StringValue;
        }
        set venue(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_venue() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get season_ids() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set season_ids(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get sort() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.StringValue, 8) as dependency_4.google.protobuf.StringValue;
        }
        set sort(value: dependency_4.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_sort() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get opponent() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.BoolValue, 9) as dependency_4.google.protobuf.BoolValue;
        }
        set opponent(value: dependency_4.google.protobuf.BoolValue) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_opponent() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            stat?: string;
            team_id?: number;
            limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
            date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            venue?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            season_ids?: number[];
            sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
            opponent?: ReturnType<typeof dependency_4.google.protobuf.BoolValue.prototype.toObject>;
        }): TeamStatRequest {
            const message = new TeamStatRequest({});
            if (data.stat != null) {
                message.stat = data.stat;
            }
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.limit != null) {
                message.limit = dependency_4.google.protobuf.UInt64Value.fromObject(data.limit);
            }
            if (data.date_before != null) {
                message.date_before = dependency_4.google.protobuf.StringValue.fromObject(data.date_before);
            }
            if (data.date_after != null) {
                message.date_after = dependency_4.google.protobuf.StringValue.fromObject(data.date_after);
            }
            if (data.venue != null) {
                message.venue = dependency_4.google.protobuf.StringValue.fromObject(data.venue);
            }
            if (data.season_ids != null) {
                message.season_ids = data.season_ids;
            }
            if (data.sort != null) {
                message.sort = dependency_4.google.protobuf.StringValue.fromObject(data.sort);
            }
            if (data.opponent != null) {
                message.opponent = dependency_4.google.protobuf.BoolValue.fromObject(data.opponent);
            }
            return message;
        }
        toObject() {
            const data: {
                stat?: string;
                team_id?: number;
                limit?: ReturnType<typeof dependency_4.google.protobuf.UInt64Value.prototype.toObject>;
                date_before?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                date_after?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                venue?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                season_ids?: number[];
                sort?: ReturnType<typeof dependency_4.google.protobuf.StringValue.prototype.toObject>;
                opponent?: ReturnType<typeof dependency_4.google.protobuf.BoolValue.prototype.toObject>;
            } = {};
            if (this.stat != null) {
                data.stat = this.stat;
            }
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.limit != null) {
                data.limit = this.limit.toObject();
            }
            if (this.date_before != null) {
                data.date_before = this.date_before.toObject();
            }
            if (this.date_after != null) {
                data.date_after = this.date_after.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.season_ids != null) {
                data.season_ids = this.season_ids;
            }
            if (this.sort != null) {
                data.sort = this.sort.toObject();
            }
            if (this.opponent != null) {
                data.opponent = this.opponent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stat.length)
                writer.writeString(1, this.stat);
            if (this.team_id != 0)
                writer.writeUint64(2, this.team_id);
            if (this.has_limit)
                writer.writeMessage(3, this.limit, () => this.limit.serialize(writer));
            if (this.has_date_before)
                writer.writeMessage(4, this.date_before, () => this.date_before.serialize(writer));
            if (this.has_date_after)
                writer.writeMessage(5, this.date_after, () => this.date_after.serialize(writer));
            if (this.has_venue)
                writer.writeMessage(6, this.venue, () => this.venue.serialize(writer));
            if (this.season_ids.length)
                writer.writePackedUint64(7, this.season_ids);
            if (this.has_sort)
                writer.writeMessage(8, this.sort, () => this.sort.serialize(writer));
            if (this.has_opponent)
                writer.writeMessage(9, this.opponent, () => this.opponent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamStatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamStatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stat = reader.readString();
                        break;
                    case 2:
                        message.team_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.limit, () => message.limit = dependency_4.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.date_before, () => message.date_before = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.date_after, () => message.date_after = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.venue, () => message.venue = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 7:
                        message.season_ids = reader.readPackedUint64();
                        break;
                    case 8:
                        reader.readMessage(message.sort, () => message.sort = dependency_4.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.opponent, () => message.opponent = dependency_4.google.protobuf.BoolValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamStatRequest {
            return TeamStatRequest.deserialize(bytes);
        }
    }
}
