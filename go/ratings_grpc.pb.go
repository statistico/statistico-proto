// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ratings.proto

package statistico

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeamRatingService_GetFixtureRatings_FullMethodName = "/statistico.TeamRatingService/GetFixtureRatings"
	TeamRatingService_GetTeamRatings_FullMethodName    = "/statistico.TeamRatingService/GetTeamRatings"
)

// TeamRatingServiceClient is the client API for TeamRatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamRatingServiceClient interface {
	GetFixtureRatings(ctx context.Context, in *FixtureRatingRequest, opts ...grpc.CallOption) (*RatingResponse, error)
	GetTeamRatings(ctx context.Context, in *TeamRatingRequest, opts ...grpc.CallOption) (*RatingResponse, error)
}

type teamRatingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamRatingServiceClient(cc grpc.ClientConnInterface) TeamRatingServiceClient {
	return &teamRatingServiceClient{cc}
}

func (c *teamRatingServiceClient) GetFixtureRatings(ctx context.Context, in *FixtureRatingRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, TeamRatingService_GetFixtureRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRatingServiceClient) GetTeamRatings(ctx context.Context, in *TeamRatingRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, TeamRatingService_GetTeamRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamRatingServiceServer is the server API for TeamRatingService service.
// All implementations must embed UnimplementedTeamRatingServiceServer
// for forward compatibility.
type TeamRatingServiceServer interface {
	GetFixtureRatings(context.Context, *FixtureRatingRequest) (*RatingResponse, error)
	GetTeamRatings(context.Context, *TeamRatingRequest) (*RatingResponse, error)
	mustEmbedUnimplementedTeamRatingServiceServer()
}

// UnimplementedTeamRatingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamRatingServiceServer struct{}

func (UnimplementedTeamRatingServiceServer) GetFixtureRatings(context.Context, *FixtureRatingRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixtureRatings not implemented")
}
func (UnimplementedTeamRatingServiceServer) GetTeamRatings(context.Context, *TeamRatingRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamRatings not implemented")
}
func (UnimplementedTeamRatingServiceServer) mustEmbedUnimplementedTeamRatingServiceServer() {}
func (UnimplementedTeamRatingServiceServer) testEmbeddedByValue()                           {}

// UnsafeTeamRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamRatingServiceServer will
// result in compilation errors.
type UnsafeTeamRatingServiceServer interface {
	mustEmbedUnimplementedTeamRatingServiceServer()
}

func RegisterTeamRatingServiceServer(s grpc.ServiceRegistrar, srv TeamRatingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeamRatingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeamRatingService_ServiceDesc, srv)
}

func _TeamRatingService_GetFixtureRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRatingServiceServer).GetFixtureRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRatingService_GetFixtureRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRatingServiceServer).GetFixtureRatings(ctx, req.(*FixtureRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRatingService_GetTeamRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRatingServiceServer).GetTeamRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRatingService_GetTeamRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRatingServiceServer).GetTeamRatings(ctx, req.(*TeamRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamRatingService_ServiceDesc is the grpc.ServiceDesc for TeamRatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamRatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistico.TeamRatingService",
	HandlerType: (*TeamRatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFixtureRatings",
			Handler:    _TeamRatingService_GetFixtureRatings_Handler,
		},
		{
			MethodName: "GetTeamRatings",
			Handler:    _TeamRatingService_GetTeamRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratings.proto",
}
