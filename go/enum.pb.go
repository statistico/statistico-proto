// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package statisticoproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_FOR     Action = 0
	Action_AGAINST Action = 1
)

var Action_name = map[int32]string{
	0: "FOR",
	1: "AGAINST",
}

var Action_value = map[string]int32{
	"FOR":     0,
	"AGAINST": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{0}
}

type Line int32

const (
	Line_CLOSING Line = 0
	Line_MAX     Line = 1
)

var Line_name = map[int32]string{
	0: "CLOSING",
	1: "MAX",
}

var Line_value = map[string]int32{
	"CLOSING": 0,
	"MAX":     1,
}

func (x Line) String() string {
	return proto.EnumName(Line_name, int32(x))
}

func (Line) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{1}
}

type Measure int32

const (
	Measure_TOTAL Measure = 0
	Measure_AVG   Measure = 1
)

var Measure_name = map[int32]string{
	0: "TOTAL",
	1: "AVG",
}

var Measure_value = map[string]int32{
	"TOTAL": 0,
	"AVG":   1,
}

func (x Measure) String() string {
	return proto.EnumName(Measure_name, int32(x))
}

func (Measure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{2}
}

type Metric int32

const (
	Metric_GTE Metric = 0
	Metric_LTE Metric = 1
)

var Metric_name = map[int32]string{
	0: "GTE",
	1: "LTE",
}

var Metric_value = map[string]int32{
	"GTE": 0,
	"LTE": 1,
}

func (x Metric) String() string {
	return proto.EnumName(Metric_name, int32(x))
}

func (Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{3}
}

type ResultEnum int32

const (
	ResultEnum_WIN       ResultEnum = 0
	ResultEnum_LOSE      ResultEnum = 1
	ResultEnum_DRAW      ResultEnum = 2
	ResultEnum_WIN_DRAW  ResultEnum = 3
	ResultEnum_LOSE_DRAW ResultEnum = 4
)

var ResultEnum_name = map[int32]string{
	0: "WIN",
	1: "LOSE",
	2: "DRAW",
	3: "WIN_DRAW",
	4: "LOSE_DRAW",
}

var ResultEnum_value = map[string]int32{
	"WIN":       0,
	"LOSE":      1,
	"DRAW":      2,
	"WIN_DRAW":  3,
	"LOSE_DRAW": 4,
}

func (x ResultEnum) String() string {
	return proto.EnumName(ResultEnum_name, int32(x))
}

func (ResultEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{4}
}

type StatEnum int32

const (
	StatEnum_GOALS         StatEnum = 0
	StatEnum_SHOTS_ON_GOAL StatEnum = 1
	StatEnum_XG            StatEnum = 2
)

var StatEnum_name = map[int32]string{
	0: "GOALS",
	1: "SHOTS_ON_GOAL",
	2: "XG",
}

var StatEnum_value = map[string]int32{
	"GOALS":         0,
	"SHOTS_ON_GOAL": 1,
	"XG":            2,
}

func (x StatEnum) String() string {
	return proto.EnumName(StatEnum_name, int32(x))
}

func (StatEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{5}
}

type TeamEnum int32

const (
	TeamEnum_HOME_TEAM TeamEnum = 0
	TeamEnum_AWAY_TEAM TeamEnum = 1
)

var TeamEnum_name = map[int32]string{
	0: "HOME_TEAM",
	1: "AWAY_TEAM",
}

var TeamEnum_value = map[string]int32{
	"HOME_TEAM": 0,
	"AWAY_TEAM": 1,
}

func (x TeamEnum) String() string {
	return proto.EnumName(TeamEnum_name, int32(x))
}

func (TeamEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{6}
}

type TradeResult int32

const (
	TradeResult_SUCCESS TradeResult = 0
	TradeResult_FAIL    TradeResult = 1
)

var TradeResult_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var TradeResult_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x TradeResult) String() string {
	return proto.EnumName(TradeResult_name, int32(x))
}

func (TradeResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{7}
}

type VenueEnum int32

const (
	VenueEnum_HOME      VenueEnum = 0
	VenueEnum_AWAY      VenueEnum = 1
	VenueEnum_HOME_AWAY VenueEnum = 2
)

var VenueEnum_name = map[int32]string{
	0: "HOME",
	1: "AWAY",
	2: "HOME_AWAY",
}

var VenueEnum_value = map[string]int32{
	"HOME":      0,
	"AWAY":      1,
	"HOME_AWAY": 2,
}

func (x VenueEnum) String() string {
	return proto.EnumName(VenueEnum_name, int32(x))
}

func (VenueEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{8}
}

func init() {
	proto.RegisterEnum("statisticoproto.Action", Action_name, Action_value)
	proto.RegisterEnum("statisticoproto.Line", Line_name, Line_value)
	proto.RegisterEnum("statisticoproto.Measure", Measure_name, Measure_value)
	proto.RegisterEnum("statisticoproto.Metric", Metric_name, Metric_value)
	proto.RegisterEnum("statisticoproto.ResultEnum", ResultEnum_name, ResultEnum_value)
	proto.RegisterEnum("statisticoproto.StatEnum", StatEnum_name, StatEnum_value)
	proto.RegisterEnum("statisticoproto.TeamEnum", TeamEnum_name, TeamEnum_value)
	proto.RegisterEnum("statisticoproto.TradeResult", TradeResult_name, TradeResult_value)
	proto.RegisterEnum("statisticoproto.VenueEnum", VenueEnum_name, VenueEnum_value)
}

func init() {
	proto.RegisterFile("enum.proto", fileDescriptor_13a9f1b5947140c8)
}

var fileDescriptor_13a9f1b5947140c8 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4f, 0x83, 0x30,
	0x14, 0xc7, 0x29, 0x63, 0x0c, 0xde, 0x5c, 0x7c, 0xf6, 0x68, 0xd4, 0x93, 0x07, 0xd3, 0xc3, 0x62,
	0xe2, 0x27, 0x68, 0x26, 0x63, 0x24, 0x40, 0x93, 0xb5, 0x8e, 0x79, 0x22, 0x38, 0x7b, 0x20, 0x71,
	0x60, 0xa0, 0x7c, 0x7f, 0x53, 0x9a, 0x78, 0xe3, 0xf7, 0x7b, 0x7f, 0xfe, 0x7d, 0x79, 0x00, 0xba,
	0x9b, 0xae, 0xdb, 0xdf, 0xa1, 0x37, 0x3d, 0xbd, 0x1d, 0x4d, 0x63, 0xda, 0xd1, 0xb4, 0x97, 0x7e,
	0x16, 0xec, 0x09, 0x42, 0x7e, 0x31, 0x6d, 0xdf, 0xd1, 0x15, 0x2c, 0xf6, 0xe2, 0x88, 0x1e, 0x5d,
	0xc3, 0x8a, 0xa7, 0x3c, 0x2b, 0xa5, 0x42, 0xc2, 0x1e, 0x20, 0xc8, 0xdb, 0x4e, 0x5b, 0xb9, 0xcb,
	0x85, 0xcc, 0xca, 0x14, 0x3d, 0x1b, 0x2d, 0xf8, 0x19, 0x09, 0x7b, 0x84, 0x55, 0xa1, 0x9b, 0x71,
	0x1a, 0x34, 0x8d, 0x61, 0xa9, 0x84, 0xe2, 0xb9, 0x1b, 0xf3, 0x53, 0x8a, 0x84, 0xdd, 0x43, 0x58,
	0x68, 0x33, 0xb4, 0x17, 0xab, 0x52, 0x95, 0xb8, 0x59, 0xae, 0x12, 0x24, 0x6c, 0x0f, 0x70, 0xd4,
	0xe3, 0xf4, 0x63, 0x92, 0x6e, 0xba, 0x5a, 0x5d, 0x65, 0x25, 0x7a, 0x34, 0x82, 0x20, 0x17, 0x32,
	0x41, 0x62, 0xbf, 0xde, 0x8f, 0xbc, 0x42, 0x9f, 0xde, 0x40, 0x54, 0x65, 0x65, 0x3d, 0xd3, 0x82,
	0x6e, 0x20, 0xb6, 0x09, 0x87, 0x01, 0x7b, 0x85, 0x48, 0x9a, 0xc6, 0xb5, 0xc4, 0xb0, 0x4c, 0x05,
	0xcf, 0x25, 0x7a, 0xf4, 0x0e, 0x36, 0xf2, 0x20, 0x94, 0xac, 0x45, 0x59, 0x5b, 0x87, 0x84, 0x86,
	0xe0, 0x9f, 0x53, 0xf4, 0xd9, 0x0b, 0x44, 0x4a, 0x37, 0xd7, 0xf9, 0x8f, 0x0d, 0xc4, 0x07, 0x51,
	0x24, 0xb5, 0x4a, 0x78, 0x81, 0x9e, 0x45, 0x5e, 0xf1, 0x4f, 0x87, 0x84, 0x3d, 0xc3, 0x5a, 0x0d,
	0xcd, 0xb7, 0x76, 0x8b, 0xda, 0x1b, 0xc8, 0x8f, 0xdd, 0x2e, 0x91, 0xd2, 0x2d, 0xba, 0xe7, 0x59,
	0x8e, 0x84, 0x6d, 0x21, 0x3e, 0xe9, 0x6e, 0xd2, 0x73, 0x61, 0x04, 0x81, 0x2d, 0x74, 0x01, 0xdb,
	0x85, 0xe4, 0xff, 0x91, 0x19, 0xfd, 0xaf, 0x70, 0xbe, 0xfc, 0xdb, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x10, 0x8a, 0x86, 0x69, 0x98, 0x01, 0x00, 0x00,
}
