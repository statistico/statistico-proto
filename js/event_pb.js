/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var requests_pb = require('./requests_pb.js');
goog.exportSymbol('proto.statistico.CardEvent', null, global);
goog.exportSymbol('proto.statistico.FixtureEventsResponse', null, global);
goog.exportSymbol('proto.statistico.GoalEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.FixtureEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.statistico.FixtureEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.statistico.FixtureEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.statistico.FixtureEventsResponse.displayName = 'proto.statistico.FixtureEventsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.statistico.FixtureEventsResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.FixtureEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.FixtureEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.FixtureEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.FixtureEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fixtureId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.statistico.CardEvent.toObject, includeInstance),
    goalsList: jspb.Message.toObjectList(msg.getGoalsList(),
    proto.statistico.GoalEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.FixtureEventsResponse}
 */
proto.statistico.FixtureEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.FixtureEventsResponse;
  return proto.statistico.FixtureEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.FixtureEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.FixtureEventsResponse}
 */
proto.statistico.FixtureEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFixtureId(value);
      break;
    case 2:
      var value = new proto.statistico.CardEvent;
      reader.readMessage(value,proto.statistico.CardEvent.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 3:
      var value = new proto.statistico.GoalEvent;
      reader.readMessage(value,proto.statistico.GoalEvent.deserializeBinaryFromReader);
      msg.addGoals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.FixtureEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.FixtureEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.FixtureEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.FixtureEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFixtureId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.statistico.CardEvent.serializeBinaryToWriter
    );
  }
  f = message.getGoalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.statistico.GoalEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 fixture_id = 1;
 * @return {number}
 */
proto.statistico.FixtureEventsResponse.prototype.getFixtureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.statistico.FixtureEventsResponse.prototype.setFixtureId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CardEvent cards = 2;
 * @return {!Array<!proto.statistico.CardEvent>}
 */
proto.statistico.FixtureEventsResponse.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.statistico.CardEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.statistico.CardEvent, 2));
};


/** @param {!Array<!proto.statistico.CardEvent>} value */
proto.statistico.FixtureEventsResponse.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.statistico.CardEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.statistico.CardEvent}
 */
proto.statistico.FixtureEventsResponse.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.statistico.CardEvent, opt_index);
};


proto.statistico.FixtureEventsResponse.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * repeated GoalEvent goals = 3;
 * @return {!Array<!proto.statistico.GoalEvent>}
 */
proto.statistico.FixtureEventsResponse.prototype.getGoalsList = function() {
  return /** @type{!Array<!proto.statistico.GoalEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.statistico.GoalEvent, 3));
};


/** @param {!Array<!proto.statistico.GoalEvent>} value */
proto.statistico.FixtureEventsResponse.prototype.setGoalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.statistico.GoalEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.statistico.GoalEvent}
 */
proto.statistico.FixtureEventsResponse.prototype.addGoals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.statistico.GoalEvent, opt_index);
};


proto.statistico.FixtureEventsResponse.prototype.clearGoalsList = function() {
  this.setGoalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.CardEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.statistico.CardEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.statistico.CardEvent.displayName = 'proto.statistico.CardEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.CardEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.CardEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.CardEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.CardEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.CardEvent}
 */
proto.statistico.CardEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.CardEvent;
  return proto.statistico.CardEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.CardEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.CardEvent}
 */
proto.statistico.CardEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayerId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.CardEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.CardEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.CardEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.CardEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.statistico.CardEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.statistico.CardEvent.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 team_id = 2;
 * @return {number}
 */
proto.statistico.CardEvent.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.statistico.CardEvent.prototype.setTeamId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.statistico.CardEvent.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.statistico.CardEvent.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 player_id = 4;
 * @return {number}
 */
proto.statistico.CardEvent.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.statistico.CardEvent.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 minute = 5;
 * @return {number}
 */
proto.statistico.CardEvent.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.statistico.CardEvent.prototype.setMinute = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.statistico.GoalEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.statistico.GoalEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.statistico.GoalEvent.displayName = 'proto.statistico.GoalEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.statistico.GoalEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.statistico.GoalEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.statistico.GoalEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.GoalEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    playerAssistId: (f = msg.getPlayerAssistId()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    minute: jspb.Message.getFieldWithDefault(msg, 5, 0),
    score: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.statistico.GoalEvent}
 */
proto.statistico.GoalEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.statistico.GoalEvent;
  return proto.statistico.GoalEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.statistico.GoalEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.statistico.GoalEvent}
 */
proto.statistico.GoalEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayerId(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setPlayerAssistId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinute(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.statistico.GoalEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.statistico.GoalEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.statistico.GoalEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.statistico.GoalEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPlayerAssistId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getScore();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.statistico.GoalEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.statistico.GoalEvent.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 team_id = 2;
 * @return {number}
 */
proto.statistico.GoalEvent.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.statistico.GoalEvent.prototype.setTeamId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 player_id = 3;
 * @return {number}
 */
proto.statistico.GoalEvent.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.statistico.GoalEvent.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.UInt64Value player_assist_id = 4;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.statistico.GoalEvent.prototype.getPlayerAssistId = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 4));
};


/** @param {?proto.google.protobuf.UInt64Value|undefined} value */
proto.statistico.GoalEvent.prototype.setPlayerAssistId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.statistico.GoalEvent.prototype.clearPlayerAssistId = function() {
  this.setPlayerAssistId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.statistico.GoalEvent.prototype.hasPlayerAssistId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 minute = 5;
 * @return {number}
 */
proto.statistico.GoalEvent.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.statistico.GoalEvent.prototype.setMinute = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string score = 6;
 * @return {string}
 */
proto.statistico.GoalEvent.prototype.getScore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.statistico.GoalEvent.prototype.setScore = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.statistico);
