syntax = "proto3";

package statistico;

option go_package = "github.com/statistico/statistico-proto;statistico";

import "enum.proto";
import "filter.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message CompetitionRequest {
    // A filter to limit the competitions returned associated to a specific countries
    repeated uint64 country_ids = 1;
    // Order the ID column to return competitions in specific order
    google.protobuf.StringValue sort = 2;
    // A filter to limit the competitions returned depending on if they are a cup competition or not
    google.protobuf.BoolValue is_cup = 3;
}

message FixtureRequest {
    uint64 fixture_id = 1;
}

message FixtureSearchRequest {
    // A filter to limit the results returned associated to a specific season
    repeated uint64 season_ids = 1;
    // The number of results to return.
    google.protobuf.UInt64Value limit = 2;
    // A filter to return Results before a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_before = 3;
    // A filter to return Results after a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_after = 4;
    // Order the date column to return results in specific order
    google.protobuf.StringValue sort = 5;
}

message HistoricalResultRequest {
    // The Home Team ID that the Result set relates to
    uint64 home_team_id = 1;
    // The Away Team ID that the Result set relates to
    uint64 away_team_id = 2;
    // The number of results to return
    uint32 limit = 3;
    // A filter to return Results before a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    string date_before = 4;
}

message ListUserStrategiesRequest {
    string user_id = 1;
}

message ResultRequest {
    uint64 fixture_id = 1;
}

message SaveStrategyRequest {
    string name = 1;
    string description = 2;
    string user_id = 3;
    string market = 4;
    string runner = 5;
    google.protobuf.FloatValue min_odds = 6;
    google.protobuf.FloatValue max_odds = 7;
    SideEnum side = 8;
    repeated uint64 competition_ids = 9;
    repeated ResultFilter result_filters = 10;
    repeated StatFilter stat_filters = 11;
    VisibilityEnum visibility = 12;
}

message SeasonCompetitionRequest {
    uint64 competition_id = 1;
    // Order the name column to return seasons in specific order
    google.protobuf.StringValue sort = 2;
}

message SeasonFixtureRequest {
    uint64 season_id = 1;
    // RFC3339 formatted string i.e. "2006-01-02T15:04:05Z07:00"
    string date_from = 2;
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    string date_to = 3;
}

message SeasonRequest {
    // The Season ID that the Result set relates to
    int64 season_id = 1;
    // A filter to return Results before a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    string date_before = 2;
}

message SeasonTeamsRequest {
    uint64 season_id = 1;
}

message BuildStrategyRequest {
    string market = 1;
    string runner = 2;
    google.protobuf.FloatValue min_odds = 3;
    google.protobuf.FloatValue max_odds = 4;
    string line = 5;
    SideEnum side = 6;
    repeated uint64 competition_ids = 7;
    repeated uint64 season_ids = 8;
    google.protobuf.Timestamp dateFrom = 9;
    google.protobuf.Timestamp dateTo = 10;
    repeated ResultFilter result_filters = 11;
    repeated StatFilter stat_filters = 12;
}

message TeamRequest {
    uint64 team_id = 1;
}

message TeamResultRequest {
    // The Team ID that the Result set relates to
    uint64 team_id = 1;
    // The number of results to return. If limit is not set the whole Result set for the Team
    // will be returned
    google.protobuf.UInt64Value limit = 2;
    // A filter to return Results before a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_before = 3;
    // A filter to return Results after a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_after = 4;
    // A filter to return based limited to either home or away results
    google.protobuf.StringValue venue = 5;
    // A filter to limit the results returned associated to a specific season
    repeated uint64 season_ids = 6;
    // Order the date column to return results in specific order
    google.protobuf.StringValue sort = 7;
}

message TeamSeasonsRequest {
    uint64 team_id = 1;
    // Order the name column to return seasons in specific order
    google.protobuf.StringValue sort = 2;
}

message TeamStatRequest {
    string stat = 1;
    // The Team ID that the Result set relates to
    uint64 team_id = 2;
    // The number of results to return. If limit is not set the whole Result set for the Team
    // will be returned
    google.protobuf.UInt64Value limit = 3;
    // A filter to return stats before a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_before = 4;
    // A filter to return stats after a specific date
    // RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
    google.protobuf.StringValue date_after = 5;
    // A filter to return based stats limited to match being played either home or away
    google.protobuf.StringValue venue = 6;
    // A filter to limit the results returned associated to a specific season
    repeated uint64 season_ids = 7;
    // Order the date column to return stats in specific order
    google.protobuf.StringValue sort = 8;
    // Return stats for opposing team
    google.protobuf.BoolValue opponent = 9;
}
